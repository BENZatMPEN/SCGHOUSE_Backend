[
    {
        "id": "3b1fe48eb8c3d4ed",
        "type": "tab",
        "label": "Config",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "3f82c49c8d750693",
        "type": "tab",
        "label": "API",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "c50d486d4200cd31",
        "type": "tab",
        "label": "API Send data",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "63022294005c57ec",
        "type": "tab",
        "label": "Schedule Zone",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "d21f09457f348b43",
        "type": "tab",
        "label": "(zone) Send data to modbus ",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "b1b087dc079885be",
        "type": "tab",
        "label": "(Report) Send data to modbus ",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "800bf15721c87a4b",
        "type": "tab",
        "label": "Flow 1",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "0c43390420f21dec",
        "type": "subflow",
        "name": "Subflow Zone 1",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 220,
                "y": 160,
                "wires": [
                    {
                        "id": "8aedc6853ea16fd0"
                    }
                ]
            }
        ],
        "out": [],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "6009ebac4f7ca066",
        "type": "subflow",
        "name": "Subflow Zone 2",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 80,
                "y": 100,
                "wires": [
                    {
                        "id": "52495bb37eb76f92"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 860,
                "y": 100,
                "wires": [
                    {
                        "id": "3a759043855016ce",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "0e235a2eb9e7e79b",
        "type": "subflow",
        "name": "Main Subflow QR",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 200,
                "wires": [
                    {
                        "id": "f26c4b9289cd1eb0"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1300,
                "y": 260,
                "wires": [
                    {
                        "id": "9f4f5f1339e469df",
                        "port": 0
                    },
                    {
                        "id": "5f4725bafcc960ff",
                        "port": 5
                    },
                    {
                        "id": "f26c4b9289cd1eb0",
                        "port": 1
                    },
                    {
                        "id": "9671a2afe61bd3d6",
                        "port": 0
                    },
                    {
                        "id": "68a05edaab75714c",
                        "port": 0
                    },
                    {
                        "id": "931d16b27c81d3cb",
                        "port": 0
                    },
                    {
                        "id": "a9ef5c506a9e398c",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "058966f9141fa853",
        "type": "subflow",
        "name": "Subflow zone3",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 160,
                "y": 120,
                "wires": [
                    {
                        "id": "5ebe3e6991eea62b"
                    }
                ]
            }
        ],
        "out": [],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "fcaf559c6a8d9f1a",
        "type": "subflow",
        "name": "Subflow zone 4-5",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 120,
                "wires": [
                    {
                        "id": "732cd7b153d2cc27"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1100,
                "y": 120,
                "wires": [
                    {
                        "id": "c7988dd53230e08f",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "85e689ea7c76acc7",
        "type": "subflow",
        "name": "Subflow zone 6",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 120,
                "y": 180,
                "wires": [
                    {
                        "id": "25daeb64e31b76cd"
                    }
                ]
            }
        ],
        "out": [],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "26852d784adb3c7f",
        "type": "subflow",
        "name": "Subflow zone 7",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 120,
                "y": 160,
                "wires": [
                    {
                        "id": "53f3824f9f756b27"
                    }
                ]
            }
        ],
        "out": [],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "c74c97e324c41a52",
        "type": "subflow",
        "name": "Subflow zone 8 Add new object by pass 2",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 140,
                "y": 200,
                "wires": [
                    {
                        "id": "3f950c1260be948b"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1220,
                "y": 200,
                "wires": [
                    {
                        "id": "37719fabfd1d6dd8",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "4e6f598c1a06160a",
        "type": "subflow",
        "name": "Subflow zone 9",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 180,
                "y": 120,
                "wires": [
                    {
                        "id": "5839bf7bd1878922"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1040,
                "y": 120,
                "wires": [
                    {
                        "id": "d0d71fe0d032b9e2",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "c378d9efe79ee88a",
        "type": "subflow",
        "name": "Subflow zone 10",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 200,
                "y": 180,
                "wires": [
                    {
                        "id": "6e198ee73804793b"
                    }
                ]
            }
        ],
        "out": [],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "ffec7d5f3c1b1228",
        "type": "subflow",
        "name": "Subflow zone 11",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 140,
                "y": 200,
                "wires": [
                    {
                        "id": "eaa2d35a3c195bf3"
                    }
                ]
            }
        ],
        "out": [],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "2bc316e725c3638f",
        "type": "subflow",
        "name": "Subflow zone 12",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 180,
                "y": 160,
                "wires": [
                    {
                        "id": "256092ec7710614f"
                    }
                ]
            }
        ],
        "out": [],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "ed16bca66bbf3ac0",
        "type": "subflow",
        "name": "Subflow Update Weight",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 160,
                "y": 200,
                "wires": [
                    {
                        "id": "c5e135fe5f01c587"
                    }
                ]
            }
        ],
        "out": [],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "3b00f01717289024",
        "type": "subflow",
        "name": "Subflow end of production process",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 140,
                "y": 220,
                "wires": [
                    {
                        "id": "f58e9f7da9ff0a6f"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1080,
                "y": 220,
                "wires": [
                    {
                        "id": "42623bfeb08be299",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "4f93f103a4819898",
        "type": "subflow",
        "name": "Validate time",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 220,
                "y": 160,
                "wires": [
                    {
                        "id": "25d63ab968f601ad"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 520,
                "y": 160,
                "wires": [
                    {
                        "id": "25d63ab968f601ad",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "6cca8702023da790",
        "type": "group",
        "z": "c50d486d4200cd31",
        "name": "",
        "style": {
            "label": true
        },
        "nodes": [
            "f8919195fecdf853",
            "8ec2ee2ff6b50781",
            "c834aa8dd89f7db9"
        ],
        "x": 174,
        "y": 1059,
        "w": 692,
        "h": 82
    },
    {
        "id": "e8d53e32ddbbd816",
        "type": "semaphore-config",
        "name": "zone3",
        "capacity": "1"
    },
    {
        "id": "30c70907500bd983",
        "type": "semaphore-config",
        "name": "zone1_2",
        "capacity": "1"
    },
    {
        "id": "a0d1da37e2bbfdd6",
        "type": "semaphore-config",
        "name": "zone2",
        "capacity": "1"
    },
    {
        "id": "c17bb858097c9a0e",
        "type": "semaphore-config",
        "name": "zone4",
        "capacity": "1"
    },
    {
        "id": "ed2802594337325f",
        "type": "semaphore-config",
        "z": "85e689ea7c76acc7",
        "name": "zone5",
        "capacity": "1"
    },
    {
        "id": "573e5368955bfbd7",
        "type": "semaphore-config",
        "name": "zone5",
        "capacity": "1"
    },
    {
        "id": "a8b852ed91072d2e",
        "type": "semaphore-config",
        "name": "zone6",
        "capacity": "1"
    },
    {
        "id": "338c2cf3835aa8b0",
        "type": "semaphore-config",
        "z": "c74c97e324c41a52",
        "name": "byPass2",
        "capacity": "1"
    },
    {
        "id": "1f3f50aabab600f4",
        "type": "semaphore-config",
        "z": "4e6f598c1a06160a",
        "name": "zone7",
        "capacity": "1"
    },
    {
        "id": "23d8c85168c40d3b",
        "type": "semaphore-config",
        "name": "zone7",
        "capacity": "1"
    },
    {
        "id": "f2c6bc5445ee1fc2",
        "type": "semaphore-config",
        "name": "zone8",
        "capacity": "1"
    },
    {
        "id": "0e291ed92d22da3d",
        "type": "semaphore-config",
        "name": "zone9",
        "capacity": "1"
    },
    {
        "id": "1f4b221281101740",
        "type": "semaphore-config",
        "name": "zone10",
        "capacity": "1"
    },
    {
        "id": "1d0a468d587f24b5",
        "type": "semaphore-config",
        "z": "3b00f01717289024",
        "name": "end process",
        "capacity": "1"
    },
    {
        "id": "71c2e3771d24a4a4",
        "type": "semaphore-config",
        "z": "ed16bca66bbf3ac0",
        "name": "weight",
        "capacity": "1"
    },
    {
        "id": "51a1a8e59174b5dc",
        "type": "modbus-client",
        "name": "NodeRedServer",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": false,
        "tcpHost": "192.168.150.45",
        "tcpPort": "11502",
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": "9600",
        "serialDatabits": "8",
        "serialStopbits": "1",
        "serialParity": "none",
        "serialConnectionDelay": "100",
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": "1",
        "commandDelay": "1",
        "clientTimeout": "1000",
        "reconnectOnTimeout": true,
        "reconnectTimeout": "2000",
        "parallelUnitIdsAllowed": true
    },
    {
        "id": "954c94afe3128510",
        "type": "modbus-client",
        "name": "Node1",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "127.0.0.1",
        "tcpPort": "502",
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": "9600",
        "serialDatabits": "8",
        "serialStopbits": "1",
        "serialParity": "none",
        "serialConnectionDelay": "100",
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": "1",
        "commandDelay": "1",
        "clientTimeout": "1000",
        "reconnectOnTimeout": true,
        "reconnectTimeout": "2000",
        "parallelUnitIdsAllowed": true,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "7c1cf240dba9a6bc",
        "type": "semaphore-config",
        "name": "zone11",
        "capacity": "1"
    },
    {
        "id": "038695e34941a35f",
        "type": "semaphore-config",
        "name": "zone12",
        "capacity": "1"
    },
    {
        "id": "7ab982fca0f94f9e",
        "type": "modbus-client",
        "name": "Modbus server",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "192.168.150.31",
        "tcpPort": "502",
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": "9600",
        "serialDatabits": "8",
        "serialStopbits": "1",
        "serialParity": "none",
        "serialConnectionDelay": "100",
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": 1,
        "commandDelay": 1,
        "clientTimeout": 1000,
        "reconnectOnTimeout": true,
        "reconnectTimeout": 2000,
        "parallelUnitIdsAllowed": true,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "02d76861c1ab959d",
        "type": "semaphore-config",
        "name": "zone1_1",
        "capacity": "1"
    },
    {
        "id": "6fea019d2d6ddc36",
        "type": "modbus-client",
        "name": "Speed",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "192.168.150.31",
        "tcpPort": "502",
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": "9600",
        "serialDatabits": "8",
        "serialStopbits": "1",
        "serialParity": "none",
        "serialConnectionDelay": "100",
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": "1",
        "commandDelay": "1",
        "clientTimeout": "1000",
        "reconnectOnTimeout": true,
        "reconnectTimeout": "2000",
        "parallelUnitIdsAllowed": true,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "736ed972943b9e1c",
        "type": "catch",
        "z": "0c43390420f21dec",
        "name": "",
        "scope": null,
        "uncaught": false,
        "x": 500,
        "y": 240,
        "wires": [
            [
                "cb644e5bcc71a0dd"
            ]
        ]
    },
    {
        "id": "cb644e5bcc71a0dd",
        "type": "function",
        "z": "0c43390420f21dec",
        "name": "msg",
        "func": "node.warn(msg);\nnode.warn(JSON.stringify(msg));",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "752dbbe0595b29a7",
        "type": "function",
        "z": "0c43390420f21dec",
        "name": "Add new object",
        "func": "const logger = global.get('loggerInfo');\nconst db = global.get(\"connetion_mongo\");\nconst collectionEnum = global.get(\"CollectionEnum\");\nconst collection = db.collection(collectionEnum.ZONE1_PRODUCTION_DATA);\nconst lineEnum = global.get(\"LineEnum\");\nconst preAddObjectCheckZone1 = global.get('preAddObjectCheckZone1');\nconst zoneEnum = global.get(\"ZoneEnum\");\n\nlogger('', `start ... msg.payload.event:${msg.payload.event}`)\nconst newBlock = {\n    block_number: 1,\n    entry_time: new Date(),\n    exit_time: null\n}\nlet newObject = {\n    zone_name: zoneEnum.ZONE_1.value,\n    zone_number: zoneEnum.ZONE_1.index,\n    is_active: true,\n    current_zone: 1,\n    current_block: 1,\n    entry_time: new Date(),\n    exit_time: null,\n    lines: {},\n    blocks: []\n}\nnewObject.blocks.push(newBlock);\n\ntry {\n    if (msg.payload.event === lineEnum.LINE_CEILING.value) {\n        await preAddObjectCheckZone1(lineEnum.LINE_CEILING.index, 1);\n        newObject.lines.line_number = lineEnum.LINE_CEILING.index;\n        newObject.lines.line_name = lineEnum.LINE_CEILING.value;\n        // node.warn(newObject);\n\n    } else {\n        await preAddObjectCheckZone1(lineEnum.LINE_FLOOR.index, 1);\n        newObject.lines.line_number = lineEnum.LINE_FLOOR.index;\n        newObject.lines.line_name = lineEnum.LINE_FLOOR.value;\n    }\n    await collection.insertOne(newObject);\n    logger('', `save newObject success!`);\n    return msg;\n} catch (error) {\n    node.warn(error);\n};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 660,
        "y": 160,
        "wires": [
            [
                "74f4e43cff36b527"
            ]
        ]
    },
    {
        "id": "8aedc6853ea16fd0",
        "type": "semaphore-take",
        "z": "0c43390420f21dec",
        "config": "30c70907500bd983",
        "name": "",
        "x": 400,
        "y": 160,
        "wires": [
            [
                "752dbbe0595b29a7"
            ]
        ]
    },
    {
        "id": "74f4e43cff36b527",
        "type": "semaphore-leave",
        "z": "0c43390420f21dec",
        "config": "30c70907500bd983",
        "name": "",
        "x": 910,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "98de045bd222d4bf",
        "type": "function",
        "z": "6009ebac4f7ca066",
        "name": "Add new object",
        "func": "const moment = global.get('moment_timezone');\nconst db = global.get(\"connetion_mongo\");\nconst zoneEnum = global.get(\"ZoneEnum\");\nconst collectionEnum = global.get(\"CollectionEnum\");\nconst lineEnum = global.get(\"LineEnum\");\nconst preAddObjectCheck = global.get(\"preAddObjectCheck\")\nconst saveQrCode = global.get('saveQrCode');\nconst qrData = msg.qrData;\n\n// try {\n//save QR\nconst res = await saveQrCode(msg.tempPayload);\npreAddObjectCheck(zoneEnum.ZONE_2.index, 1);\nawait updateObjectZone1(lineEnum.LINE_CEILING.index);\nawait updateObjectZone1(lineEnum.LINE_FLOOR.index);\nawait createObjectZone2(res);\nawait updateReport(qrData);\n\n// } catch (error) {\n//     node.warn(error);\n// };\nreturn msg;\n\n\nasync function updateObjectZone1(line_number) {\n    try {\n        node.log(\"updateObjectZone1\");\n        const results = await db.collection(collectionEnum.ZONE1_PRODUCTION_DATA).find(\n            { is_active: true, 'lines.line_number': line_number },\n            { _id: 0 }).sort({ current_block: -1 }).toArray();\n        const result = results[0];\n        // node.warn(result);\n        result.is_active = false;\n        const currentBlockIndex = result.current_block - 1;\n        result.blocks[currentBlockIndex].exit_time = moment();\n        await db.collection(collectionEnum.ZONE1_PRODUCTION_DATA).updateOne({ _id: result._id }, {\n            $set: {\n                exit_time: new Date(),\n                blocks: result.blocks,\n                is_active: result.is_active\n            }\n        }).then((result) => {\n            node.log(\"Update object zone1 sunccess!\");\n        })\n            .catch((error) => {\n                node.error(error);\n            });\n    } catch (error) {\n        node.warn(error);\n    };\n\n}\n\n//function create item zone2\nasync function createObjectZone2(qrData) {\n    node.log(\"createObjectZone2\");\n    const newObject = {\n        qr_data_detail: qrData,\n        color: await getColor(qrData),\n        entry_time: new Date(),\n        exit_time: null,\n        weight: null,\n        is_active: true,\n        current_zone: 2,\n        current_block: 1,\n        zones: [],\n        unit_type: await validateUnitType(qrData.data.type),\n        by_pass: [],\n    }\n    const newZone = {\n        zone_number: zoneEnum.ZONE_2.index,\n        zone_name: zoneEnum.ZONE_2.value,\n        entry_time: new Date(),\n        exit_time: null,\n        blocks: []\n    }\n\n    const newBlock = {\n        block_number: 1,\n        entry_time: new Date(),\n        exit_time: null\n    }\n\n    newZone.blocks.push(newBlock)\n    newObject.zones.push(newZone)\n    // node.warn(newObject);\n    await db.collection(collectionEnum.PRODUCTION_DATA).insertOne(newObject)\n        .then((result) => {\n            node.log(\"save newObject sunccess!\");\n        })\n        .catch((error) => {\n            node.error(error);\n        });\n    \n}\n\nasync function getColor(qrData) {\n    const houseCode = qrData?.data?.house_code;\n    const maxColorNumber = 100;\n    const result = await db.collection(collectionEnum.PRODUCTION_DATA).find({ is_active: true }).toArray();\n\n    // 1. สร้างเซ็ตเพื่อเก็บ color_number ที่ถูกใช้แล้วใน res\n    const usedColorNumbers = new Set();\n    for (const item of result) {\n        if (item.qr_data_detail?.data?.house_code === houseCode) {\n            return item.color;\n        }\n        usedColorNumbers.add(item.color);\n    }\n\n    // 2. วนลูปหา color_number ที่ไม่ซ้ำกับที่ใช้แล้วในช่วง 1-100\n    for (let colorNumber = 1; colorNumber <= maxColorNumber; colorNumber++) {\n        if (!usedColorNumbers.has(colorNumber)) {\n            return colorNumber;\n        }\n    }\n    // 3. หากไม่พบ color_number ที่ไม่ซ้ำกับที่ใช้แล้วในช่วง 1-100\n    return null;\n}\n\nasync function updateReport(qrData) {\n    const newHouseObject = {\n        record_date_time: new Date(),\n        entry_time: new Date(),\n        house_name: qrData.data.owner_name,\n        house_code: qrData.data.house_code,\n        total_unit: qrData.data.total_units,\n        unit_finish: 0,\n        assy: 1,\n        mj_date: new Date(),\n        mj_date_time: \"\",\n        installation_date: qrData.data.installation_date,\n        color: await getColor(qrData),\n        all_part_finish_date_time: null,\n        duration: null,\n        ct: null,\n        is_active: true\n    }\n    const record = await db.collection(collectionEnum.HOUSE_PRODUCTION_RECORDS).findOne({\n        house_name: qrData.data.owner_name,\n        house_code: qrData.data.house_code,\n        total_unit: qrData.data.total_units,\n    });\n\n    if (!record) {\n        await db.collection(collectionEnum.HOUSE_PRODUCTION_RECORDS).insertOne(newHouseObject)\n            .then((result) => {\n                node.log(\"save house production record sunccess!\");\n            })\n            .catch((error) => {\n                node.error(error);\n            });\n    } else {\n        db.collection(collectionEnum.HOUSE_PRODUCTION_RECORDS).updateOne({ house_code: qrData.data.house_code }, {\n            $set: {\n                assy: record.assy + 1\n            }\n        })\n    }\n\n    const newPartObject = {\n        record_date_time: new Date(),\n        entry_time: new Date(),\n        qr_code: qrData.qr_code,\n        house_name: qrData.data.owner_name,\n        house_code: qrData.data.house_code,\n        type: qrData.data.type,\n        type_unit: qrData.data.unit_type,\n        unit_size: qrData.data.size,\n        area_for_b: qrData.data.remark_b,\n        type_stair_for_r: qrData.data.remark_r,\n        house_type: qrData.data.house_type,\n        units_number: qrData.data.units_number,\n        total_unit: qrData.data.total_units,\n        mj_date: qrData.data.mj_plan_date,\n        mj_date_time: \"\",\n        installation_date: qrData.data.installation_date,\n        part_finish_date_time: null,\n        weight: null,\n        ct_min_at_mj: null,\n        ct_min_at_buffer: null,\n        ct_min_at_bypass1: null,\n        ct_min_at_ew: null,\n        ct_min_at_ee_in: null,\n        ct_min_at_iwpt: null,\n        ct_min_at_bypass2: null,\n        ct_min_at_door: null,\n        ct_min_at_window: null,\n        ct_min_at_scaffold: null,\n        ct_min_at_loading: null,\n        ct_min_at_weight: null,\n    }\n    await db.collection(collectionEnum.PART_PRODUCTION_RECORDS).insertOne(newPartObject)\n        .then((result) => {\n            node.log(\"save house production record sunccess!\");\n        })\n        .catch((error) => {\n            node.error(error);\n        });\n}\n\nasync function validateUnitType(unit_type) {\n    switch (unit_type.toUpperCase()) {\n        case 'N':\n            return 'N';\n        case 'B':\n        case 'C':\n            return 'B,C';\n        case 'R':\n            return 'R';\n        default:\n            // กรณีที่ไม่ตรงเงื่อนไขใดเลย\n            return 'N';\n    }\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 100,
        "wires": [
            [
                "3a759043855016ce"
            ]
        ]
    },
    {
        "id": "52495bb37eb76f92",
        "type": "semaphore-take",
        "z": "6009ebac4f7ca066",
        "config": "a0d1da37e2bbfdd6",
        "name": "",
        "x": 260,
        "y": 100,
        "wires": [
            [
                "98de045bd222d4bf",
                "37facc77d255ab17"
            ]
        ]
    },
    {
        "id": "3a759043855016ce",
        "type": "semaphore-leave",
        "z": "6009ebac4f7ca066",
        "config": "a0d1da37e2bbfdd6",
        "name": "",
        "x": 710,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "2766e3b49be92b0d",
        "type": "catch",
        "z": "6009ebac4f7ca066",
        "name": "",
        "scope": null,
        "uncaught": false,
        "x": 380,
        "y": 220,
        "wires": [
            [
                "2877bdc1b3517a20"
            ]
        ]
    },
    {
        "id": "2877bdc1b3517a20",
        "type": "function",
        "z": "6009ebac4f7ca066",
        "name": "msg",
        "func": "// node.warn(msg);\nnode.warn(JSON.stringify(msg));",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "42637bec6244a6f4",
        "type": "function",
        "z": "6009ebac4f7ca066",
        "name": "Calculate Speed A-Line",
        "func": "const moment = global.get('moment_timezone');\nconst db = global.get(\"connetion_mongo\");\nconst zoneEnum = global.get(\"ZoneEnum\");\nconst collectionEnum = global.get(\"CollectionEnum\");\nconst lineEnum = global.get(\"LineEnum\");\nconst preAddObjectCheck = global.get(\"preAddObjectCheck\")\nconst saveQrCode = global.get('saveQrCode');\nconst qrData = msg.qrData;\n\n\nconst timeMorningStart = global.get('timeMorningStart');\nconst timeAfternoonStart = global.get('timeAfternoonStart');\nconst timeOvertimeStart = global.get('timeOvertimeStart');\n\n\nconst currentTime = moment();\n\nif (currentTime.isAfter(timeOvertimeStart)) {\n    console.log('เวลาปัจจุบันมากกว่า timeOvertimeStart');\n} else {\n    console.log('เวลาปัจจุบันไม่มากกว่า timeOvertimeStart');\n}\n\nconst result = await db.collection(collectionEnum.PRODUCTION_DATA).find({ is_active: true }, { color_number: 1 }).toArray();\n// node.warn(results);\n\n\n\n\n// async function updateObjectZone1(line_number) {\n//     try {\n//         node.log(\"updateObjectZone1\");\n//         const results = await db.collection(collectionEnum.ZONE1_PRODUCTION_DATA).find(\n//             { is_active: true, 'lines.line_number': line_number },\n//             { _id: 0 }).sort({ current_block: -1 }).toArray();\n//         const result = results[0];\n//         // node.warn(result);\n//         result.is_active = false;\n//         const currentBlockIndex = result.current_block - 1;\n//         result.blocks[currentBlockIndex].exit_time = moment();\n//         await db.collection(collectionEnum.ZONE1_PRODUCTION_DATA).updateOne({ _id: result._id }, {\n//             $set: {\n//                 exit_time: new Date(),\n//                 blocks: result.blocks,\n//                 is_active: result.is_active\n//             }\n//         }).then((result) => {\n//             node.log(\"Update object zone1 sunccess!\");\n//         })\n//             .catch((error) => {\n//                 node.error(error);\n//             });\n//     } catch (error) {\n//         node.warn(error);\n//     };\n\n// }\n\n// //function create item zone2\n// async function createObjectZone2(qrData) {\n//     node.log(\"createObjectZone2\");\n//     const newObject = {\n//         qr_data_detail: qrData,\n//         color: await getColor(),\n//         entry_time: new Date(),\n//         exit_time: null,\n//         weight: null,\n//         is_active: true,\n//         current_zone: 2,\n//         current_block: 1,\n//         zones: [],\n//         unit_type: await validateUnitType(qrData.data.type),\n//         by_pass: [],\n//     }\n//     const newZone = {\n//         zone_number: zoneEnum.ZONE_2.index,\n//         zone_name: zoneEnum.ZONE_2.value,\n//         entry_time: new Date(),\n//         exit_time: null,\n//         blocks: []\n//     }\n\n//     const newBlock = {\n//         block_number: 1,\n//         entry_time: new Date(),\n//         exit_time: null\n//     }\n\n//     newZone.blocks.push(newBlock)\n//     newObject.zones.push(newZone)\n//     // node.warn(newObject);\n//     await db.collection(collectionEnum.PRODUCTION_DATA).insertOne(newObject)\n//         .then((result) => {\n//             node.log(\"save newObject sunccess!\");\n//         })\n//         .catch((error) => {\n//             node.error(error);\n//         });\n// }\n\n// async function getColor() {\n//     const maxColorNumber = 100;\n//     const result = await db.collection(collectionEnum.PRODUCTION_DATA).find({ is_active: true }, { color_number: 1 }).toArray();\n\n//     // 1. สร้างเซ็ตเพื่อเก็บ color_number ที่ถูกใช้แล้วใน res\n//     const usedColorNumbers = new Set();\n//     for (const item of result) {\n//         usedColorNumbers.add(item.color);\n//     }\n\n//     // 2. วนลูปหา color_number ที่ไม่ซ้ำกับที่ใช้แล้วในช่วง 1-100\n//     for (let colorNumber = 1; colorNumber <= maxColorNumber; colorNumber++) {\n//         if (!usedColorNumbers.has(colorNumber)) {\n//             return colorNumber;\n//         }\n//     }\n//     // 3. หากไม่พบ color_number ที่ไม่ซ้ำกับที่ใช้แล้วในช่วง 1-100\n//     return null;\n// }\n\n// async function updateReport(qrData) {\n//     const newHouseObject = {\n//         record_date_time: new Date(),\n//         entry_time: new Date(),\n//         house_name: qrData.data.owner_name,\n//         house_code: qrData.data.house_code,\n//         total_unit: qrData.data.total_units,\n//         mj_date: qrData.data.mj_plan_date,\n//         mj_date_time: \"\",\n//         installation_date: qrData.data.installation_date,\n//         all_part_finish_date_time: null,\n//         duration: null,\n//     }\n//     const record = await db.collection(collectionEnum.HOUSE_PRODUCTION_RECORDS).find({\n//         house_name: qrData.data.owner_name,\n//         house_code: qrData.data.house_code,\n//         total_unit: qrData.data.total_units,\n//     }).toArray();\n\n//     if (record.length === 0) {\n//         await db.collection(collectionEnum.HOUSE_PRODUCTION_RECORDS).insertOne(newHouseObject)\n//             .then((result) => {\n//                 node.log(\"save house production record sunccess!\");\n//             })\n//             .catch((error) => {\n//                 node.error(error);\n//             });\n//     }\n\n//     const newPartObject = {\n//         record_date_time: new Date(),\n//         entry_time: new Date(),\n//         qr_code: qrData.qr_code,\n//         house_name: qrData.data.owner_name,\n//         house_code: qrData.data.house_code,\n//         type: qrData.data.type,\n//         units_number: qrData.data.units_number,\n//         total_unit: qrData.data.total_units,\n//         mj_date: qrData.data.mj_plan_date,\n//         mj_date_time: \"\",\n//         installation_date: qrData.data.installation_date,\n//         part_finish_date_time: null,\n//         weight: null,\n//         ct_min_at_mj: null,\n//         ct_min_at_buffer: null,\n//         ct_min_at_bypass1: null,\n//         ct_min_at_ew: null,\n//         ct_min_at_ee_in: null,\n//         ct_min_at_iwpt: null,\n//         ct_min_at_bypass2: null,\n//         ct_min_at_door: null,\n//         ct_min_at_window: null,\n//         ct_min_at_scaffold: null,\n//         ct_min_at_loading: null,\n//         ct_min_at_weight: null,\n//     }\n//     await db.collection(collectionEnum.PART_PRODUCTION_RECORDS).insertOne(newPartObject)\n//         .then((result) => {\n//             node.log(\"save house production record sunccess!\");\n//         })\n//         .catch((error) => {\n//             node.error(error);\n//         });\n// }\n\n// async function validateUnitType(unit_type) {\n//     switch (unit_type.toUpperCase()) {\n//         case 'N':\n//             return 'N';\n//         case 'B':\n//         case 'C':\n//             return 'B,C';\n//         case 'R':\n//             return 'R';\n//         default:\n//             // กรณีที่ไม่ตรงเงื่อนไขใดเลย\n//             return 'N';\n//     }\n// }",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 280,
        "wires": [
            []
        ]
    },
    {
        "id": "37facc77d255ab17",
        "type": "function",
        "z": "6009ebac4f7ca066",
        "name": "setTimeMoveItem LineA",
        "func": "const moment = global.get('moment_timezone');\nconst db = global.get(\"connetion_mongo\");\nconst collectionEnum = global.get(\"CollectionEnum\");\nconst timeMorningStart = global.get('timeMorningStart');\nconst timeMorningEnd = global.get('timeMorningEnd');\nconst timeAfternoonStart = global.get('timeAfternoonStart');\nconst timeAfternoonEnd = global.get('timeAfternoonEnd');\nconst timeOvertimeStart = global.get('timeOvertimeStart');\nconst timeOvertimeEnd = global.get('timeOvertimeEnd');\nconst zoneMoveTime = global.get('ZoneMoveTime');\n\nconst currentTime = moment();\nlet timeMove = 9999;\nlet queryCondition = null; // เงื่อนไขการค้นหาเริ่มต้น\nlet timestart = moment();\n// node.warn(`currentTime:${currentTime}`);\n// node.warn(`timeOvertimeStart:${timeOvertimeStart}`);\nif (currentTime.isAfter(timeMorningStart)) {\n    // node.warn(`timeMorningStart:${timeMorningStart}`);\n    // queryCondition = { entry_time: { $gt: moment(timeMorningStart).toDate(), $lt: moment(timeMorningEnd).toDate() } };\n    queryCondition = { entry_time: { $gt: moment(timeMorningStart).toDate() } };\n    timestart = timeMorningStart;\n}\n// node.warn(queryCondition);\nif (!queryCondition) {\n    node.warn(`Not in working hours...`);\n    return\n}\n// node.warn(queryCondition);\nconst result = await db.collection(collectionEnum.PRODUCTION_DATA).find(queryCondition).toArray();\n// node.warn(result);\nif (result?.length > 0) {\n    // node.warn(result);\n    //แก้ไขเปลี่ยนไปใช้ startdate ของ preriod นั้น diff กับเวลาเข้าตัวล่าสุด แล้วหารจำนวนทั้งหมด\n    // node.warn(`timestart:${timestart}`);\n    if (moment(result[0].entry_time).isAfter(timestart)) {\n        const timeDifference = moment(result[0].entry_time).diff(timestart);\n        const durationInMinutes = moment.duration(timeDifference).asMinutes();\n        timeMove = Math.floor(durationInMinutes / result.length);\n    }\n\n}\n//Fix for test\n// timeMove = 1\nnode.warn(`timeMoveALine:${timeMove}`);\nzoneMoveTime['zone1MoveTime'] = timeMove;\nzoneMoveTime['zone2MoveTime'] = timeMove;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "5f4725bafcc960ff",
        "type": "switch",
        "z": "0e235a2eb9e7e79b",
        "name": "switch location",
        "property": "qrData.location",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "QR_MJ_IN",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "QR_EW_IN",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "QR_IWPT_OUT",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "QR_BR_STR_IN",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "QR_LOADING_OUT",
                "vt": "str"
            },
            {
                "t": "null"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 6,
        "x": 500,
        "y": 200,
        "wires": [
            [
                "9f4f5f1339e469df"
            ],
            [
                "9671a2afe61bd3d6"
            ],
            [
                "68a05edaab75714c"
            ],
            [
                "931d16b27c81d3cb"
            ],
            [
                "a9ef5c506a9e398c"
            ],
            []
        ]
    },
    {
        "id": "9f4f5f1339e469df",
        "type": "subflow:6009ebac4f7ca066",
        "z": "0e235a2eb9e7e79b",
        "name": "",
        "x": 800,
        "y": 40,
        "wires": [
            []
        ]
    },
    {
        "id": "f26c4b9289cd1eb0",
        "type": "switch",
        "z": "0e235a2eb9e7e79b",
        "name": "Validate status code",
        "property": "statusCode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "200",
                "vt": "str"
            },
            {
                "t": "neq",
                "v": "200",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 260,
        "y": 260,
        "wires": [
            [
                "5f4725bafcc960ff"
            ],
            []
        ]
    },
    {
        "id": "9671a2afe61bd3d6",
        "type": "subflow:fcaf559c6a8d9f1a",
        "z": "0e235a2eb9e7e79b",
        "name": "",
        "x": 810,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "68a05edaab75714c",
        "type": "subflow:c74c97e324c41a52",
        "z": "0e235a2eb9e7e79b",
        "name": "",
        "x": 880,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "931d16b27c81d3cb",
        "type": "subflow:4e6f598c1a06160a",
        "z": "0e235a2eb9e7e79b",
        "name": "",
        "x": 800,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "a9ef5c506a9e398c",
        "type": "subflow:3b00f01717289024",
        "z": "0e235a2eb9e7e79b",
        "name": "",
        "x": 860,
        "y": 200,
        "wires": [
            []
        ]
    },
    {
        "id": "34ab4bf67139b011",
        "type": "function",
        "z": "058966f9141fa853",
        "name": "Add new object zone3",
        "func": "const db = global.get(\"connetion_mongo\");\nconst moment = global.get('moment_timezone');\nconst zoneEnum = global.get(\"ZoneEnum\");\nconst collectionEnum = global.get(\"CollectionEnum\");\nconst lineEnum = global.get(\"LineEnum\");\nconst preAddObjectCheck = global.get(\"preAddObjectCheck\");\nconst qrData = msg.qrData;\nconst calculateTotalWorkMinutes = global.get('calculateTotalWorkMinutes');\n\nif (!await validateZone2()) {\n    return msg;\n}\npreAddObjectCheck(zoneEnum.ZONE_3.index, 1);\nawait updateZoneObject(zoneEnum.ZONE_2.index)\nreturn msg;\n\n//validate zone2 \nasync function validateZone2() {\n    const results = await db.collection(collectionEnum.PRODUCTION_DATA).find(\n        { current_zone: zoneEnum.ZONE_2.index, is_active: true }, { _id: 0 }).sort({ \"zones.current_block\": -1 }).toArray();\n    if (results.length > 0) {\n        return true;\n    }\n    return false;\n}\n\n//Update Zone2 and Create Zone3\nasync function updateZoneObject(zoneIndex) {\n    node.log(\"updateZoneObject Zone2\");\n    let duration = 0;\n    const results = await db.collection(collectionEnum.PRODUCTION_DATA).find(\n        { current_zone: zoneIndex, is_active: true }, { _id: 0 }).sort({ \"zones.current_block\": -1 }).toArray();\n\n    const result = results[0];\n    for (const zone of result.zones) {\n        // node.warn(zone.zone_number);\n        // node.warn(zone);\n        if (zone.zone_number === zoneIndex) {\n            zone.exit_time = new Date();\n            zone.blocks[result.current_block - 1].exit_time = new Date();\n            // node.warn(zone);\n\n            await db.collection(collectionEnum.PRODUCTION_DATA).updateOne(\n                { _id: result._id, \"zones.zone_number\": zone.zone_number },\n                {\n                    $set: {\n                        \"zones.$\": zone\n                    }\n                }\n            ).then((result) => {\n                node.warn(\"Update zone success!\");\n            }).catch((error) => {\n                node.warn(error);\n            });\n\n            const entryTime = moment(zone.entry_time);\n            const exitTime = moment(zone.exit_time);\n            // const timeDifferenceMinutes = exitTime.diff(entryTime, 'minutes');\n            const timeDifferenceMinutes = await calculateTotalWorkMinutes(entryTime, exitTime);\n            node.warn(`timeDifferenceMinutes:${timeDifferenceMinutes}`);\n            await db.collection(collectionEnum.PART_PRODUCTION_RECORDS).updateOne(\n                { qr_code: result.qr_data_detail.qr_code },\n                {\n                    $set: {\n                        \"ct_min_at_mj\": timeDifferenceMinutes\n                    }\n                }\n            ).then((result) => {\n                node.warn(\"Update part production record success!\");\n            }).catch((error) => {\n                node.warn(error);\n            });\n        }\n\n    }\n\n    const newZone = {\n        zone_number: zoneEnum.ZONE_3.index,\n        zone_name: zoneEnum.ZONE_3.value,\n        entry_time: new Date(),\n        exit_time: null,\n        blocks: []\n    }\n\n    const newBlock = {\n        block_number: 1,\n        entry_time: new Date(),\n        exit_time: null\n    }\n    newZone.blocks.push(newBlock);\n    result.zones.push(newZone);\n    result.current_zone = zoneEnum.ZONE_3.index;\n    result.current_block = 1;\n    // node.warn(result);\n    await db.collection(collectionEnum.PRODUCTION_DATA).updateOne(\n        { _id: result._id, },\n        {\n            $set: {\n                \"zones\": result.zones,\n                \"current_zone\": zoneEnum.ZONE_3.index,\n                \"current_block\": 1\n            }\n        }\n    ).then((result) => {\n        node.warn(\"Update new zone success!\");\n    }).catch((error) => {\n        node.warn(error);\n    });\n\n\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 560,
        "y": 120,
        "wires": [
            [
                "d4f25c6314aff4fb"
            ]
        ]
    },
    {
        "id": "5ebe3e6991eea62b",
        "type": "semaphore-take",
        "z": "058966f9141fa853",
        "config": "e8d53e32ddbbd816",
        "name": "",
        "x": 320,
        "y": 120,
        "wires": [
            [
                "34ab4bf67139b011"
            ]
        ]
    },
    {
        "id": "d4f25c6314aff4fb",
        "type": "semaphore-leave",
        "z": "058966f9141fa853",
        "config": "e8d53e32ddbbd816",
        "name": "",
        "x": 810,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "31234bbd41137797",
        "type": "catch",
        "z": "058966f9141fa853",
        "name": "",
        "scope": null,
        "uncaught": false,
        "x": 480,
        "y": 220,
        "wires": [
            [
                "8488e4d097858aa5"
            ]
        ]
    },
    {
        "id": "8488e4d097858aa5",
        "type": "function",
        "z": "058966f9141fa853",
        "name": "msg",
        "func": "node.warn(msg);\nnode.warn(JSON.stringify(msg));",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "f770e0f6716200b1",
        "type": "function",
        "z": "fcaf559c6a8d9f1a",
        "name": "Add new object zone 4-5",
        "func": "const logger = global.get('loggerInfo');\nconst db = global.get(\"connetion_mongo\");\nconst moment = global.get('moment_timezone');\nconst zoneEnum = global.get(\"ZoneEnum\");\nconst collectionEnum = global.get(\"CollectionEnum\");\nconst lineEnum = global.get(\"LineEnum\");\nconst preAddObjectCheck = global.get(\"preAddObjectCheck\")\nconst byPassEnum = global.get(\"ByPassEnum\");\nconst saveQrCode = global.get('saveQrCode');\nconst calculateTotalWorkMinutes = global.get('calculateTotalWorkMinutes');\n//cross zone \nconst endCrossZone = global.get('endCrossZone');\nconst updatePartProductionZone = global.get('updatePartProductionZone');\nconst addCrossZone = global.get('addCrossZone');\nconst findBlockEmpty = global.get('findBlockEmpty');\nconst newObjectInZone = global.get('newObjectInZone');\nconst saveLogCrossZone = global.get('saveLogCrossZone');\n//QR Data\nconst qrData = msg.qrData;\n\nlogger(qrData.qr_code, `Start Add new object zone 4-5`)\nawait updateZoneObject(zoneEnum.ZONE_3.index)\nlogger(qrData.qr_code, `End Add new object zone 4-5`)\nreturn msg;\n\n\nasync function updateZoneObject(zoneIndex) {\n    logger(qrData.qr_code, `updateZoneObject zone ${zoneIndex}`)\n    let results = [];\n    //find item in zone 3\n    const query = {\n        \"is_active\": true,\n        \"current_zone\": zoneIndex,\n        \"qr_data_detail.qr_code\": msg.qrData.qr_code\n    }\n    results = await db.collection(collectionEnum.PRODUCTION_DATA).find(query).toArray();\n    // node.warn(results);\n    if (results.length === 0) {\n        //find item in by pass 1\n        const query = {\n            \"is_active\": true,\n            \"current_zone\": zoneEnum.ZONE_4.index,\n            \"qr_data_detail.qr_code\": msg.qrData.qr_code\n        }\n        results = await db.collection(collectionEnum.PRODUCTION_DATA).find(query).toArray();\n        // node.warn(results);\n        if (results.length === 0) {\n            //find cross zone\n            const query = {\n                \"is_active\": true,\n                \"qr_data_detail.qr_code\": msg.qrData.qr_code\n            }\n            const result = await db.collection(collectionEnum.PRODUCTION_DATA).findOne(query);\n            node.warn(result)\n            if (!result || result?.current_zone >= zoneEnum.ZONE_5.index) {\n                node.log(\"Cannot add object zone4 because the QR code does not match the system.\");\n                node.log(`current zone : ${result?.current_zone}`);\n                msg.statusCode = 500;\n                msg.payload = {\n                    \"code\": \"ERR_9999\",\n                    \"message\": \"ระบบไม่สามารถดำเนินการได้\",\n                    \"data\": `Cannot add object zone4 because the QR code does not match the system.`\n                };\n                return msg;\n            } else {\n                const currentZone = result.current_zone;\n                //update cross zone \n                logger(qrData.qr_code, `update cross zone ${result.current_zone}`)\n                //end zone 2\n                await endCrossZone(result, zoneEnum.ZONE_2.index, \"ct_min_at_mj\")\n                //add zone 3\n                await addCrossZone(result, zoneEnum.ZONE_3.index, zoneEnum.ZONE_3.value, \"ct_min_at_buffer\")\n                //new zone 5\n                await newObjectInZone(result, zoneEnum.ZONE_5.index, zoneEnum.ZONE_5.value, qrData.data.type)\n                await saveLogCrossZone(qrData.qr_code, currentZone, zoneEnum.ZONE_5.index)\n                //save QR\n                await saveQrCode(msg.tempPayload);\n                return msg;\n            }\n        } else {\n            //Update by pass             \n            const result = results[0];\n            for (const zone of result.zones) {\n                if (zone.zone_number === zoneEnum.ZONE_4.index) {\n                    zone.exit_time = new Date();\n                    zone.blocks[0].exit_time = new Date()\n                    // node.warn(zone);\n\n                    await db.collection(collectionEnum.PRODUCTION_DATA).updateOne(\n                        { _id: result._id, \"zones.zone_number\": zone.zone_number },\n                        {\n                            $set: {\n                                \"zones.$\": zone\n                            }\n                        }\n                    ).then((result) => {\n                        node.warn(\"Update zone success!\");\n                    }).catch((error) => {\n                        node.warn(error);\n                    });\n                }\n\n                const entryTime = moment(zone.entry_time);\n                const exitTime = moment(zone.exit_time);\n                // const timeDifferenceMinutes = exitTime.diff(entryTime, 'minutes');\n                const timeDifferenceMinutes = await calculateTotalWorkMinutes(entryTime, exitTime);\n                await db.collection(collectionEnum.PART_PRODUCTION_RECORDS).updateOne(\n                    { qr_code: result.qr_data_detail.qr_code },\n                    {\n                        $set: {\n                            \"ct_min_at_bypass1\": timeDifferenceMinutes\n                        }\n                    }\n                ).then((result) => {\n                    node.warn(\"Update part production record success!\");\n                }).catch((error) => {\n                    node.warn(error);\n                });\n            }\n\n            //save QR\n            await saveQrCode(msg.tempPayload);\n            //next item before insert new item\n            preAddObjectCheck(zoneEnum.ZONE_5.index, 1);\n            // create object zone 5\n            await newObjectInZone5(result);\n            return msg;\n        }\n    }\n    //save QR\n    await saveQrCode(msg.tempPayload);\n\n    //next item before insert new item\n    preAddObjectCheck(zoneEnum.ZONE_5.index, 1);\n    const result = results[0];\n\n    //create zone4\n    await updateObjectZone(zoneIndex, result);\n\n    //Update exit_time zone 3\n    for (const zone of result.zones) {\n        if (zone.zone_number === zoneIndex) {\n            zone.exit_time = new Date();\n            zone.blocks[result.current_block - 1].exit_time = new Date()\n            // node.warn(zone);\n            await db.collection(collectionEnum.PRODUCTION_DATA).updateOne(\n                { _id: result._id, \"zones.zone_number\": zone.zone_number },\n                {\n                    $set: {\n                        \"zones.$\": zone\n                    }\n                }\n            ).then((result) => {\n                node.warn(\"Update zone success!\");\n            }).catch((error) => {\n                node.warn(error);\n            });\n\n            const entryTime = moment(zone.entry_time);\n            const exitTime = moment(zone.exit_time);\n            // const timeDifferenceMinutes = exitTime.diff(entryTime, 'minutes');\n            const timeDifferenceMinutes = await calculateTotalWorkMinutes(entryTime, exitTime);\n            await db.collection(collectionEnum.PART_PRODUCTION_RECORDS).updateOne(\n                { qr_code: result.qr_data_detail.qr_code },\n                {\n                    $set: {\n                        \"ct_min_at_buffer\": timeDifferenceMinutes\n                    }\n                }\n            ).then((result) => {\n                node.warn(\"Update part production record success!\");\n            }).catch((error) => {\n                node.warn(error);\n            });\n        }\n\n    }\n    await newObjectInZone5(result);\n}\n\nasync function newObjectInZone5(result) {\n    //Create object zone 5\n    const newZone = {\n        zone_number: zoneEnum.ZONE_5.index,\n        zone_name: zoneEnum.ZONE_5.value,\n        entry_time: new Date(),\n        exit_time: null,\n        blocks: []\n    }\n\n    const newBlock = {\n        block_number: 1,\n        entry_time: new Date(),\n        exit_time: null\n    }\n    newZone.blocks.push(newBlock);\n    result.zones.push(newZone);\n    result.current_zone = zoneEnum.ZONE_5.index;\n    result.current_block = 1;\n    // node.warn(result);\n    await db.collection(collectionEnum.PRODUCTION_DATA).updateOne(\n        { _id: result._id, },\n        {\n            $set: {\n                \"zones\": result.zones,\n                \"current_zone\": zoneEnum.ZONE_5.index,\n                \"current_block\": 1\n            }\n        }\n    ).then((result) => {\n        node.warn(\"Update new zone success!\");\n    }).catch((error) => {\n        node.warn(error);\n    });\n}\n\nasync function updateObjectZone(zoneIndex, item) {\n    const query = {\n        \"is_active\": true,\n        \"current_zone\": zoneIndex,\n        \"current_block\": { $gt: item.current_block }\n    }\n    const results = await db.collection(collectionEnum.PRODUCTION_DATA).find(query).toArray();\n    for (const result of results) {\n        for (const zone of result.zones) {\n            //Update exit_time zone 3\n            if (zone.zone_number === zoneIndex) {\n                zone.exit_time = new Date();\n                zone.blocks[result.current_block - 1].exit_time = new Date()\n                // node.warn(zone);\n\n                await db.collection(collectionEnum.PRODUCTION_DATA).updateOne(\n                    { _id: result._id, \"zones.zone_number\": zone.zone_number },\n                    {\n                        $set: {\n                            \"zones.$\": zone\n                        }\n                    }\n                ).then((result) => {\n                    node.warn(\"Update zone success!\");\n                }).catch((error) => {\n                    node.warn(error);\n                });\n                const entryTime = moment(zone.entry_time);\n                const exitTime = moment(zone.exit_time);\n                // const timeDifferenceMinutes = exitTime.diff(entryTime, 'minutes');\n                const timeDifferenceMinutes = await calculateTotalWorkMinutes(entryTime, exitTime);\n                await db.collection(collectionEnum.PART_PRODUCTION_RECORDS).updateOne(\n                    { qr_code: result.qr_data_detail.qr_code },\n                    {\n                        $set: {\n                            \"ct_min_at_buffer\": timeDifferenceMinutes\n                        }\n                    }\n                ).then((result) => {\n                    node.warn(\"Update part production record success!\");\n                }).catch((error) => {\n                    node.warn(error);\n                });\n            }\n\n        }\n\n        //Create object zone 4\n        const blockNumber = await findBlockEmpty(zoneEnum.ZONE_4.index);\n        const newZone = {\n            zone_number: zoneEnum.ZONE_4.index,\n            zone_name: zoneEnum.ZONE_4.value,\n            entry_time: new Date(),\n            exit_time: null,\n            blocks: []\n        }\n\n        const newBlock = {\n            block_number: blockNumber,\n            entry_time: new Date(),\n            exit_time: null\n        }\n        newZone.blocks.push(newBlock);\n        result.zones.push(newZone);\n        result.current_zone = zoneEnum.ZONE_4.index;\n        result.current_block = 1;\n        // node.warn(result);\n        await db.collection(collectionEnum.PRODUCTION_DATA).updateOne(\n            { _id: result._id, },\n            {\n                $set: {\n                    \"zones\": result.zones,\n                    \"current_zone\": zoneEnum.ZONE_4.index,\n                    \"current_block\": blockNumber\n                }\n            }\n        ).then((result) => {\n            node.warn(\"Update new zone success!\");\n        }).catch((error) => {\n            node.warn(error);\n        });\n    }\n}\n\nasync function crossZone(result) {\n    logger(qrData.qr_code, `update cross zone ${result.current_zone}`)\n    //end zone 2\n    await endCrossZone(result, zoneEnum.ZONE_2.index, \"ct_min_at_mj\")\n    //add zone 3\n    await addCrossZone(result, zoneEnum.ZONE_3.index, zoneEnum.ZONE_3.value, \"ct_min_at_buffer\")\n    //new zone 5\n    await preAddObjectCheck(zoneEnum.ZONE_5.index, 1);\n    await newObjectInZone(result, zoneEnum.ZONE_5.index, zoneEnum.ZONE_5.value)\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 120,
        "wires": [
            [
                "c7988dd53230e08f"
            ]
        ]
    },
    {
        "id": "732cd7b153d2cc27",
        "type": "semaphore-take",
        "z": "fcaf559c6a8d9f1a",
        "config": "e8d53e32ddbbd816",
        "name": "",
        "x": 240,
        "y": 120,
        "wires": [
            [
                "f770e0f6716200b1"
            ]
        ]
    },
    {
        "id": "9582b83f9c5fc968",
        "type": "function",
        "z": "fcaf559c6a8d9f1a",
        "name": "Add new object zone4",
        "func": "const db = global.get(\"connetion_mongo\");\nconst zoneEnum = global.get(\"ZoneEnum\");\nconst collectionEnum = global.get(\"CollectionEnum\");\nconst lineEnum = global.get(\"LineEnum\");\nconst preAddObjectCheck = global.get(\"preAddObjectCheck\")\nconst byPassEnum = global.get(\"ByPassEnum\");\nconst saveQrCode = global.get('saveQrCode');\nconst qrData = msg.qrData;\n\nawait updateZoneObject(zoneEnum.ZONE_3.index)\nreturn msg;\n\n\nasync function updateZoneObject(zoneIndex) {\n    node.log(\"updateZoneObject zone 4\");\n    let results = [];\n    //find item in zone 4\n    const query = {\n        \"is_active\": true,\n        \"current_zone\": zoneIndex,\n        \"qr_data_detail.qr_code\": msg.qrData.qr_code\n    }\n    results = await db.collection(collectionEnum.PRODUCTION_DATA).find(query).toArray();\n\n    if (results.length === 0) {\n        //find item in by pass 1\n        const query = {\n            \"is_active\": true,\n            \"current_zone\": byPassEnum.BY_PASS_1.value,\n            \"qr_data_detail.qr_code\": msg.qrData.qr_code\n        }\n        results = await db.collection(collectionEnum.PRODUCTION_DATA).find(query).toArray();\n        if (results.length === 0){\n            node.warn(\"Cannot add object zone4 because the QR code does not match the system.\");\n            msg.statusCode = 500;\n            msg.payload = {\n                \"code\": \"ERR_9999\",\n                \"message\": \"ระบบไม่สามารถดำเนินการได้\",\n                \"data\": `Cannot add object zone4 because the QR code does not match the system.`\n            };\n            return msg;\n        } else {\n            //save QR\n            await saveQrCode(msg.tempPayload);\n            //Update by pass \n            const result = results[0];\n            for (const byPass of result.by_pass){\n                if (byPass.by_pass_number === byPassEnum.BY_PASS_1.index){\n                    byPass.blocks[byPass.blocks.length - 1].exit_time = new Date();\n                    \n                    await db.collection(collectionEnum.PRODUCTION_DATA).updateOne(\n                        { _id: result._id, \"by_pass.by_pass_number\": byPass.by_pass_number },\n                        {\n                            $set: {\n                                \"by_pass.$.exit_time\": new Date(), \n                                \"by_pass.$.blocks\": byPass.blocks\n                            }\n                        }\n                    ).then((result) => {\n                        node.warn(\"Update byPass success!\");\n                    }).catch((error) => {\n                        node.warn(error);\n                    });\n                }\n            }\n        }\n    }\n    //save QR\n    await saveQrCode(msg.tempPayload);\n    //next item before insert new item\n    preAddObjectCheck(zoneEnum.ZONE_4.index, 1);\n    const result = results[0];\n\n    // move item list to by pass\n    await updateObjectByPass(zoneIndex, result);\n    \n    for (const zone of result.zones) {\n        if (zone.zone_number === zoneIndex) {\n            zone.exit_time = new Date();\n            zone.blocks[result.current_block - 1].exit_time = new Date()\n            // node.warn(zone);\n\n            await db.collection(collectionEnum.PRODUCTION_DATA).updateOne(\n                { _id: result._id, \"zones.zone_number\": zone.zone_number },\n                {\n                    $set: {\n                        \"zones.$\": zone\n                    }\n                }\n            ).then((result) => {\n                node.warn(\"Update zone success!\");\n            }).catch((error) => {\n                node.warn(error);\n            });\n        }\n\n    }\n\n    const newZone = {\n        zone_number: zoneEnum.ZONE_4.index,\n        zone_name: zoneEnum.ZONE_4.value,\n        entry_time: new Date(),\n        exit_time: null,\n        blocks: []\n    }\n\n    const newBlock = {\n        block_number: 1,\n        entry_time: new Date(),\n        exit_time: null\n    }\n    newZone.blocks.push(newBlock);\n    result.zones.push(newZone);\n    result.current_zone = zoneEnum.ZONE_4.index;\n    result.current_block = 1;\n    // node.warn(result);\n    await db.collection(collectionEnum.PRODUCTION_DATA).updateOne(\n        { _id: result._id, },\n        {\n            $set: {\n                \"zones\": result.zones,\n                \"current_zone\": zoneEnum.ZONE_4.index,\n                \"current_block\": 1\n            }\n        }\n    ).then((result) => {\n        node.warn(\"Update new zone success!\");\n    }).catch((error) => {\n        node.warn(error);\n    });\n}\n\nasync function updateObjectByPass(zoneIndex, item) {\n    const query = {\n        \"is_active\": true,\n        \"current_zone\": zoneIndex,\n        \"current_block\": { $gt: item.current_block }\n    }\n\n    const results = await db.collection(collectionEnum.PRODUCTION_DATA).find(query).toArray();\n\n    for (const result of results) {\n        for (const zone of result.zones) {\n            if (zone.zone_number === zoneIndex) {\n                zone.exit_time = new Date();\n                zone.blocks[result.current_block - 1].exit_time = new Date()\n                // node.warn(zone);\n\n                await db.collection(collectionEnum.PRODUCTION_DATA).updateOne(\n                    { _id: result._id, \"zones.zone_number\": zone.zone_number },\n                    {\n                        $set: {\n                            \"zones.$\": zone\n                        }\n                    }\n                ).then((result) => {\n                    node.warn(\"Update zone success!\");\n                }).catch((error) => {\n                    node.warn(error);\n                });\n            }\n\n        }\n        const newBypass = {\n            by_pass_number: byPassEnum.BY_PASS_1.index,\n            by_pass_name: byPassEnum.BY_PASS_1.value,\n            entry_time: new Date(),\n            exit_time: null,\n            blocks: []\n        }\n\n        const newBlock = {\n            block_number: 1,\n            entry_time: new Date(),\n            exit_time: null\n        }\n        newBypass.blocks.push(newBlock);\n        result.by_pass.push(newBypass)\n        const blockNumber = await findBlockEmpty();\n        await db.collection(collectionEnum.PRODUCTION_DATA).updateOne(\n            { _id: result._id, },\n            {\n                $set: {\n                    \"by_pass\": result.by_pass,\n                    \"current_zone\": byPassEnum.BY_PASS_1.value,\n                    \"current_block\": blockNumber\n                }\n            }\n        ).then((result) => {\n            node.warn(\"Update new zone success!\");\n        }).catch((error) => {\n            node.warn(error);\n        });\n    }\n}\n\n\nasync function findBlockEmpty(){\n    const maxBlockByPass = 99;\n    for (let index = 1; index < maxBlockByPass; index++) {\n        const query = {\n            \"is_active\": true,\n            \"current_zone\": byPassEnum.BY_PASS_1.value,\n            \"current_block\": index\n        }\n        const results = await db.collection(collectionEnum.PRODUCTION_DATA).find(query).toArray();\n        if (results.length === 0){\n            return index;\n        }\n    }\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 60,
        "wires": [
            []
        ]
    },
    {
        "id": "1107e103e2c17f89",
        "type": "catch",
        "z": "fcaf559c6a8d9f1a",
        "name": "",
        "scope": null,
        "uncaught": false,
        "x": 400,
        "y": 340,
        "wires": [
            [
                "2aded06278c76869"
            ]
        ]
    },
    {
        "id": "2aded06278c76869",
        "type": "function",
        "z": "fcaf559c6a8d9f1a",
        "name": "msg",
        "func": "try {\n    node.warn(msg);\n    node.warn(JSON.stringify(msg));    \n} catch (error) {\n    node.warn(error);\n};\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 340,
        "wires": [
            []
        ]
    },
    {
        "id": "c7988dd53230e08f",
        "type": "semaphore-leave",
        "z": "fcaf559c6a8d9f1a",
        "config": "e8d53e32ddbbd816",
        "name": "",
        "x": 850,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "262e93bd1908c48a",
        "type": "function",
        "z": "85e689ea7c76acc7",
        "name": "Add new object zone 6",
        "func": "const db = global.get(\"connetion_mongo\");\nconst moment = global.get('moment_timezone');\nconst zoneEnum = global.get(\"ZoneEnum\");\nconst collectionEnum = global.get(\"CollectionEnum\");\nconst lineEnum = global.get(\"LineEnum\");\nconst preAddObjectCheck = global.get(\"preAddObjectCheck\")\nconst qrData = msg.qrData;\nconst calculateTotalWorkMinutes = global.get('calculateTotalWorkMinutes');\n\nif (!await validateZone5()) {\n    return msg;\n}\npreAddObjectCheck(zoneEnum.ZONE_6.index, 1);\nawait updateZoneObject(zoneEnum.ZONE_5.index)\nreturn msg;\n\n//validate zone5\nasync function validateZone5() {\n    const results = await db.collection(collectionEnum.PRODUCTION_DATA).find(\n        { current_zone: zoneEnum.ZONE_5.index, is_active: true }, { _id: 0 }).sort({ \"zones.current_block\": -1 }).toArray();\n    if (results.length > 0) {\n        return true;\n    }\n    return false;\n}\n\n//Update Zone5 and Create Zone6\nasync function updateZoneObject(zoneIndex) {\n    node.log(\"updateZoneObject\");\n\n    const results = await db.collection(collectionEnum.PRODUCTION_DATA).find(\n        { current_zone: zoneIndex, is_active: true }, { _id: 0 }).sort({ \"zones.current_block\": -1 }).toArray();\n\n    const result = results[0];\n    for (const zone of result.zones){\n        // node.warn(zone.zone_number);\n        // node.warn(zone);\n        if (zone.zone_number === zoneIndex){\n            zone.exit_time = new Date();\n            zone.blocks[result.current_block - 1].exit_time = new Date()\n            // node.warn(zone);\n\n            await db.collection(collectionEnum.PRODUCTION_DATA).updateOne(\n                { _id: result._id, \"zones.zone_number\": zone.zone_number },\n                {\n                    $set: {\n                        \"zones.$\": zone\n                    }\n                }\n            ).then((result) => {\n                node.warn(`Update zone (${zone.zone_number}) success!`);\n            }).catch((error) => {\n                node.warn(error);\n            });\n\n            const entryTime = moment(zone.entry_time);\n            const exitTime = moment(zone.exit_time);\n            // const timeDifferenceMinutes = exitTime.diff(entryTime, 'minutes');\n            const timeDifferenceMinutes = await calculateTotalWorkMinutes(entryTime, exitTime);\n            await db.collection(collectionEnum.PART_PRODUCTION_RECORDS).updateOne(\n                { qr_code: result.qr_data_detail.qr_code },\n                {\n                    $set: {\n                        \"ct_min_at_ew\": timeDifferenceMinutes\n                    }\n                }\n            ).then((result) => {\n                node.warn(\"Update part production record success!\");\n            }).catch((error) => {\n                node.warn(error);\n            });\n        }\n\n    }\n\n    const newZone = {\n        zone_number: zoneEnum.ZONE_6.index,\n        zone_name: zoneEnum.ZONE_6.value,\n        entry_time: new Date(),\n        exit_time: null,\n        blocks: []\n    }\n\n    const newBlock = {\n        block_number: 1,\n        entry_time: new Date(),\n        exit_time: null\n    }\n    newZone.blocks.push(newBlock);\n    result.zones.push(newZone);\n    result.current_zone = zoneEnum.ZONE_6.index;\n    result.current_block = 1;\n    // node.warn(result);\n    await db.collection(collectionEnum.PRODUCTION_DATA).updateOne(\n        { _id: result._id, },\n        {\n            $set: {\n                \"zones\": result.zones,\n                \"current_zone\": zoneEnum.ZONE_6.index,\n                \"current_block\": 1\n            }\n        }\n    ).then((result) => {\n        node.warn(`Update new zone (${zoneEnum.ZONE_6.index}) success!`);\n    }).catch((error) => {\n        node.warn(error);\n    });\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 180,
        "wires": [
            [
                "7060db7969e63173"
            ]
        ]
    },
    {
        "id": "25daeb64e31b76cd",
        "type": "semaphore-take",
        "z": "85e689ea7c76acc7",
        "config": "ed2802594337325f",
        "name": "",
        "x": 300,
        "y": 180,
        "wires": [
            [
                "262e93bd1908c48a"
            ]
        ]
    },
    {
        "id": "7060db7969e63173",
        "type": "semaphore-leave",
        "z": "85e689ea7c76acc7",
        "config": "ed2802594337325f",
        "name": "",
        "x": 810,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "d2d81cab9757ae12",
        "type": "function",
        "z": "85e689ea7c76acc7",
        "name": "Add new object zone5",
        "func": "const db = global.get(\"connetion_mongo\");\nconst zoneEnum = global.get(\"ZoneEnum\");\nconst collectionEnum = global.get(\"CollectionEnum\");\nconst lineEnum = global.get(\"LineEnum\");\nconst preAddObjectCheck = global.get(\"preAddObjectCheck\")\nconst qrData = msg.qrData;\n\nif (!await validateZone4()) {\n    return msg;\n}\npreAddObjectCheck(zoneEnum.ZONE_5.index, 1);\nawait updateZoneObject(zoneEnum.ZONE_4.index)\nreturn msg;\n\n//validate zone4\nasync function validateZone4() {\n    const results = await db.collection(collectionEnum.PRODUCTION_DATA).find(\n        { current_zone: zoneEnum.ZONE_4.index, is_active: true }, { _id: 0 }).sort({ \"zones.current_block\": -1 }).toArray();\n    if (results.length > 0) {\n        return true;\n    }\n    return false;\n}\n\n//Update Zone4 and Create Zone5\nasync function updateZoneObject(zoneIndex) {\n    node.log(\"updateZoneObject\");\n\n    const results = await db.collection(collectionEnum.PRODUCTION_DATA).find(\n        { current_zone: zoneIndex, is_active: true }, { _id: 0 }).sort({ \"zones.current_block\": -1 }).toArray();\n\n    const result = results[0];\n    for (const zone of result.zones){\n        // node.warn(zone.zone_number);\n        // node.warn(zone);\n        if (zone.zone_number === zoneIndex){\n            zone.exit_time = new Date();\n            zone.blocks[result.current_block - 1].exit_time = new Date()\n            // node.warn(zone);\n\n            await db.collection(collectionEnum.PRODUCTION_DATA).updateOne(\n                { _id: result._id, \"zones.zone_number\": zone.zone_number },\n                {\n                    $set: {\n                        \"zones.$\": zone\n                    }\n                }\n            ).then((result) => {\n                node.warn(`Update zone (${zone.zone_number}) success!`);\n            }).catch((error) => {\n                node.warn(error);\n            });\n        }\n\n    }\n\n    const newZone = {\n        zone_number: zoneEnum.ZONE_5.index,\n        zone_name: zoneEnum.ZONE_5.value,\n        entry_time: new Date(),\n        exit_time: null,\n        blocks: []\n    }\n\n    const newBlock = {\n        block_number: 1,\n        entry_time: new Date(),\n        exit_time: null\n    }\n    newZone.blocks.push(newBlock);\n    result.zones.push(newZone);\n    result.current_zone = zoneEnum.ZONE_5.index;\n    result.current_block = 1;\n    // node.warn(result);\n    await db.collection(collectionEnum.PRODUCTION_DATA).updateOne(\n        { _id: result._id, },\n        {\n            $set: {\n                \"zones\": result.zones,\n                \"current_zone\": zoneEnum.ZONE_5.index,\n                \"current_block\": 1\n            }\n        }\n    ).then((result) => {\n        node.warn(`Update new zone (${zoneEnum.ZONE_5.index}) success!`);\n    }).catch((error) => {\n        node.warn(error);\n    });\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "99e0b8fd1ac699e9",
        "type": "catch",
        "z": "85e689ea7c76acc7",
        "name": "",
        "scope": null,
        "uncaught": false,
        "x": 480,
        "y": 260,
        "wires": [
            [
                "9711af0fba167db7"
            ]
        ]
    },
    {
        "id": "9711af0fba167db7",
        "type": "function",
        "z": "85e689ea7c76acc7",
        "name": "msg",
        "func": "node.warn(msg);\nnode.warn(JSON.stringify(msg));",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "33e56609263326dd",
        "type": "function",
        "z": "26852d784adb3c7f",
        "name": "Add new object zone 7",
        "func": "const db = global.get(\"connetion_mongo\");\nconst moment = global.get('moment_timezone');\nconst zoneEnum = global.get(\"ZoneEnum\");\nconst collectionEnum = global.get(\"CollectionEnum\");\nconst lineEnum = global.get(\"LineEnum\");\nconst preAddObjectCheck = global.get(\"preAddObjectCheck\")\nconst qrData = msg.qrData;\nconst calculateTotalWorkMinutes = global.get('calculateTotalWorkMinutes');\n\nif (!await validateZone6()) {\n    return msg;\n}\npreAddObjectCheck(zoneEnum.ZONE_7.index, 1);\nawait updateZoneObject(zoneEnum.ZONE_6.index)\nreturn msg;\n\n//validate zone6\nasync function validateZone6() {\n    const results = await db.collection(collectionEnum.PRODUCTION_DATA).find(\n        { current_zone: zoneEnum.ZONE_6.index, is_active: true }, { _id: 0 }).sort({ \"zones.current_block\": -1 }).toArray();\n    if (results.length > 0) {\n        return true;\n    }\n    return false;\n}\n\n//Update Zone6 and Create Zone7\nasync function updateZoneObject(zoneIndex) {\n    node.log(\"updateZoneObject\");\n\n    const results = await db.collection(collectionEnum.PRODUCTION_DATA).find(\n        { current_zone: zoneIndex, is_active: true }, { _id: 0 }).sort({ \"zones.current_block\": -1 }).toArray();\n\n    const result = results[0];\n    for (const zone of result.zones){\n        // node.warn(zone.zone_number);\n        // node.warn(zone);\n        if (zone.zone_number === zoneIndex){\n            zone.exit_time = new Date();\n            zone.blocks[result.current_block - 1].exit_time = new Date()\n            // node.warn(zone);\n\n            await db.collection(collectionEnum.PRODUCTION_DATA).updateOne(\n                { _id: result._id, \"zones.zone_number\": zone.zone_number },\n                {\n                    $set: {\n                        \"zones.$\": zone\n                    }\n                }\n            ).then((result) => {\n                node.warn(`Update zone (${zone.zone_number}) success!`);\n            }).catch((error) => {\n                node.warn(error);\n            });\n\n            const entryTime = moment(zone.entry_time);\n            const exitTime = moment(zone.exit_time);\n            // const timeDifferenceMinutes = exitTime.diff(entryTime, 'minutes');\n            const timeDifferenceMinutes = await calculateTotalWorkMinutes(entryTime, exitTime);\n            await db.collection(collectionEnum.PART_PRODUCTION_RECORDS).updateOne(\n                { qr_code: result.qr_data_detail.qr_code },\n                {\n                    $set: {\n                        \"ct_min_at_ee_in\": timeDifferenceMinutes\n                    }\n                }\n            ).then((result) => {\n                node.warn(\"Update part production record success!\");\n            }).catch((error) => {\n                node.warn(error);\n            });\n        }\n    }\n\n    const newZone = {\n        zone_number: zoneEnum.ZONE_7.index,\n        zone_name: zoneEnum.ZONE_7.value,\n        entry_time: new Date(),\n        exit_time: null,\n        blocks: []\n    }\n\n    const newBlock = {\n        block_number: 1,\n        entry_time: new Date(),\n        exit_time: null\n    }\n    newZone.blocks.push(newBlock);\n    result.zones.push(newZone);\n    result.current_zone = zoneEnum.ZONE_7.index;\n    result.current_block = 1;\n    // node.warn(result);\n    await db.collection(collectionEnum.PRODUCTION_DATA).updateOne(\n        { _id: result._id, },\n        {\n            $set: {\n                \"zones\": result.zones,\n                \"current_zone\": zoneEnum.ZONE_7.index,\n                \"current_block\": 1\n            }\n        }\n    ).then((result) => {\n        node.warn(`Update new zone (${zoneEnum.ZONE_7.index}) success!`);\n    }).catch((error) => {\n        node.warn(error);\n    });\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 160,
        "wires": [
            [
                "e95cbe01193eb520"
            ]
        ]
    },
    {
        "id": "53f3824f9f756b27",
        "type": "semaphore-take",
        "z": "26852d784adb3c7f",
        "config": "a8b852ed91072d2e",
        "name": "",
        "x": 300,
        "y": 160,
        "wires": [
            [
                "33e56609263326dd"
            ]
        ]
    },
    {
        "id": "e95cbe01193eb520",
        "type": "semaphore-leave",
        "z": "26852d784adb3c7f",
        "config": "a8b852ed91072d2e",
        "name": "",
        "x": 810,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "4a4d3aab57bad2d3",
        "type": "function",
        "z": "26852d784adb3c7f",
        "name": "Add new object zone6",
        "func": "const db = global.get(\"connetion_mongo\");\nconst zoneEnum = global.get(\"ZoneEnum\");\nconst collectionEnum = global.get(\"CollectionEnum\");\nconst lineEnum = global.get(\"LineEnum\");\nconst preAddObjectCheck = global.get(\"preAddObjectCheck\")\nconst qrData = msg.qrData;\n\nif (!await validateZone5()) {\n    return msg;\n}\npreAddObjectCheck(zoneEnum.ZONE_6.index, 1);\nawait updateZoneObject(zoneEnum.ZONE_5.index)\nreturn msg;\n\n//validate zone4\nasync function validateZone5() {\n    const results = await db.collection(collectionEnum.PRODUCTION_DATA).find(\n        { current_zone: zoneEnum.ZONE_5.index, is_active: true }, { _id: 0 }).sort({ \"zones.current_block\": -1 }).toArray();\n    if (results.length > 0) {\n        return true;\n    }\n    return false;\n}\n\n//Update Zone5 and Create Zone6\nasync function updateZoneObject(zoneIndex) {\n    node.log(\"updateZoneObject\");\n\n    const results = await db.collection(collectionEnum.PRODUCTION_DATA).find(\n        { current_zone: zoneIndex, is_active: true }, { _id: 0 }).sort({ \"zones.current_block\": -1 }).toArray();\n\n    const result = results[0];\n    for (const zone of result.zones){\n        // node.warn(zone.zone_number);\n        // node.warn(zone);\n        if (zone.zone_number === zoneIndex){\n            zone.exit_time = new Date();\n            zone.blocks[result.current_block - 1].exit_time = new Date()\n            // node.warn(zone);\n\n            await db.collection(collectionEnum.PRODUCTION_DATA).updateOne(\n                { _id: result._id, \"zones.zone_number\": zone.zone_number },\n                {\n                    $set: {\n                        \"zones.$\": zone\n                    }\n                }\n            ).then((result) => {\n                node.warn(`Update zone (${zone.zone_number}) success!`);\n            }).catch((error) => {\n                node.warn(error);\n            });\n        }\n\n    }\n\n    const newZone = {\n        zone_number: zoneEnum.ZONE_6.index,\n        zone_name: zoneEnum.ZONE_6.value,\n        entry_time: new Date(),\n        exit_time: null,\n        blocks: []\n    }\n\n    const newBlock = {\n        block_number: 1,\n        entry_time: new Date(),\n        exit_time: null\n    }\n    newZone.blocks.push(newBlock);\n    result.zones.push(newZone);\n    result.current_zone = zoneEnum.ZONE_6.index;\n    result.current_block = 1;\n    // node.warn(result);\n    await db.collection(collectionEnum.PRODUCTION_DATA).updateOne(\n        { _id: result._id, },\n        {\n            $set: {\n                \"zones\": result.zones,\n                \"current_zone\": zoneEnum.ZONE_6.index,\n                \"current_block\": 1\n            }\n        }\n    ).then((result) => {\n        node.warn(`Update new zone (${zoneEnum.ZONE_6.index}) success!`);\n    }).catch((error) => {\n        node.warn(error);\n    });\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "1dfa58ab688d5cb8",
        "type": "catch",
        "z": "26852d784adb3c7f",
        "name": "",
        "scope": null,
        "uncaught": false,
        "x": 460,
        "y": 240,
        "wires": [
            [
                "52418c8edbde6920"
            ]
        ]
    },
    {
        "id": "52418c8edbde6920",
        "type": "function",
        "z": "26852d784adb3c7f",
        "name": "msg",
        "func": "node.warn(msg);\nnode.warn(JSON.stringify(msg));",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "b23b91c9ce1074f2",
        "type": "function",
        "z": "c74c97e324c41a52",
        "name": "Subflow zone 8 Add new object by pass 2",
        "func": "const logger = global.get('loggerInfo');\nconst db = global.get(\"connetion_mongo\");\nconst moment = global.get('moment_timezone');\nconst zoneEnum = global.get(\"ZoneEnum\");\nconst collectionEnum = global.get(\"CollectionEnum\");\nconst lineEnum = global.get(\"LineEnum\");\nconst preAddObjectCheck = global.get(\"preAddObjectCheck\")\nconst byPassEnum = global.get(\"ByPassEnum\");\nconst saveQrCode = global.get('saveQrCode');\nconst saveLogCrossZone = global.get('saveLogCrossZone');\nconst qrData = msg.qrData;\nconst calculateTotalWorkMinutes = global.get('calculateTotalWorkMinutes');\n\nlogger(qrData.qr_code, `Start Subflow zone 8 Add new object by pass 2`)\nawait updateZoneObject(zoneEnum.ZONE_7.index)\nlogger(qrData.qr_code, `End Subflow zone 8 Add new object by pass 2`)\nreturn msg;\n\n\nasync function updateZoneObject(zoneIndex) {\n    node.log(`updateZoneObject zone ${zoneIndex}`);\n    let results = [];\n    //find item in zone 7\n    const query = {\n        \"is_active\": true,\n        \"current_zone\": zoneIndex,\n        \"qr_data_detail.qr_code\": msg.qrData.qr_code\n    }\n    results = await db.collection(collectionEnum.PRODUCTION_DATA).find(query).toArray();\n\n    if (results.length === 0) {\n        //find cross zone\n        const query = {\n            \"is_active\": true,\n            \"qr_data_detail.qr_code\": msg.qrData.qr_code\n        }\n        const result = await db.collection(collectionEnum.PRODUCTION_DATA).findOne(query);\n        //validate zone\n        if (!result || result.current_zone >= zoneEnum.ZONE_8.index) {\n            node.warn(\"Cannot add object by pass 2 (zone 8) because the QR code does not match in zone 7.\");\n            msg.statusCode = 500;\n            msg.payload = {\n                \"code\": \"ERR_9999\",\n                \"message\": \"ระบบไม่สามารถดำเนินการได้\",\n                \"data\": `Cannot add object by pass 2 (zone 8)because the QR code does not match in zone 7.`\n            };\n            return msg;\n        } else {\n            //update cross zone\n            const currentZone = result.current_zone;\n            //case 2 -> add3 -> add5 -> add6 -> add7 -> new8\n            if (currentZone === 2) {\n                //end zone 2\n                await endCrossZone(result, zoneEnum.ZONE_2.index, \"ct_min_at_mj\")\n                //add zone 3\n                await addCrossZone(result, zoneEnum.ZONE_3.index, zoneEnum.ZONE_3.value, \"ct_min_at_buffer\")\n                //add zone 5\n                await addCrossZone(result, zoneEnum.ZONE_5.index, zoneEnum.ZONE_5.value, \"ct_min_at_ew\")\n                //add zone 6\n                await addCrossZone(result, zoneEnum.ZONE_6.index, zoneEnum.ZONE_6.value, \"ct_min_at_ee_in\")\n                //add zone 7\n                await addCrossZone(result, zoneEnum.ZONE_7.index, zoneEnum.ZONE_7.value, \"ct_min_at_iwpt\")\n                //new zone 8\n                await newObjectInZone(result, zoneEnum.ZONE_8.index, zoneEnum.ZONE_8.value)\n            }\n            //case 3 -> add5 -> add6 -> add7 -> new8\n            if (currentZone === 3) {\n                //end zone 3\n                await endCrossZone(result, zoneEnum.ZONE_3.index, \"ct_min_at_buffer\")\n                //add zone 5\n                await addCrossZone(result, zoneEnum.ZONE_5.index, zoneEnum.ZONE_5.value, \"ct_min_at_ew\")\n                //add zone 6\n                await addCrossZone(result, zoneEnum.ZONE_6.index, zoneEnum.ZONE_6.value, \"ct_min_at_ee_in\")\n                //add zone 7\n                await addCrossZone(result, zoneEnum.ZONE_7.index, zoneEnum.ZONE_7.value, \"ct_min_at_iwpt\")\n                //new zone 8\n                await newObjectInZone(result, zoneEnum.ZONE_8.index, zoneEnum.ZONE_8.value)\n            }\n            //case 4 -> add5 -> add6 -> add7 -> new8\n            if (currentZone === 4) {\n                //end zone 4\n                await endCrossZone(result, zoneEnum.ZONE_4.index, \"ct_min_at_bypass1\")\n                //add zone 5\n                await addCrossZone(result, zoneEnum.ZONE_5.index, zoneEnum.ZONE_5.value, \"ct_min_at_ew\")\n                //add zone 6\n                await addCrossZone(result, zoneEnum.ZONE_6.index, zoneEnum.ZONE_6.value, \"ct_min_at_ee_in\")\n                //add zone 7\n                await addCrossZone(result, zoneEnum.ZONE_7.index, zoneEnum.ZONE_7.value, \"ct_min_at_iwpt\")\n                //new zone 8\n                await newObjectInZone(result, zoneEnum.ZONE_8.index, zoneEnum.ZONE_8.value)\n            }\n            //case 5 -> add6 -> add7 -> new8\n            if (currentZone === 5) {\n                //end zone 5\n                await endCrossZone(result, zoneEnum.ZONE_5.index, \"ct_min_at_ew\")\n                //add zone 6\n                await addCrossZone(result, zoneEnum.ZONE_6.index, zoneEnum.ZONE_6.value, \"ct_min_at_ee_in\")\n                //add zone 7\n                await addCrossZone(result, zoneEnum.ZONE_7.index, zoneEnum.ZONE_7.value, \"ct_min_at_iwpt\")\n                //new zone 8\n                await newObjectInZone(result, zoneEnum.ZONE_8.index, zoneEnum.ZONE_8.value)\n            }\n            //case 6 -> add7 -> new8\n            if (currentZone === 6) {\n                //end zone 6\n                await endCrossZone(result, zoneEnum.ZONE_5.index, \"ct_min_at_ee_in\")\n                //add zone 7\n                await addCrossZone(result, zoneEnum.ZONE_7.index, zoneEnum.ZONE_7.value, \"ct_min_at_iwpt\")\n                //new zone 8\n                await newObjectInZone(result, zoneEnum.ZONE_8.index, zoneEnum.ZONE_8.value)\n            }\n            //save log\n            await saveLogCrossZone(qrData.qr_code, currentZone, zoneEnum.ZONE_8.index)\n            //save qr code\n            await saveQrCode(msg.tempPayload);\n            return msg;\n        }\n\n    }\n    await saveQrCode(msg.tempPayload);\n    const result = results[0];\n\n    // move item list to by pass\n    // await updateObjectByPass(zoneIndex, result);\n\n    for (const zone of result.zones) {\n        if (zone.zone_number === zoneIndex) {\n            zone.exit_time = new Date();\n            zone.blocks[result.current_block - 1].exit_time = new Date()\n            // node.warn(zone);\n\n            await db.collection(collectionEnum.PRODUCTION_DATA).updateOne(\n                { _id: result._id, \"zones.zone_number\": zone.zone_number },\n                {\n                    $set: {\n                        \"zones.$\": zone\n                    }\n                }\n            )\n            logger(qrData.qr_code, `Update zone success! ${zoneEnum.ZONE_7.index}`)\n        }\n\n        const entryTime = moment(zone.entry_time);\n        const exitTime = moment(zone.exit_time);\n        // const timeDifferenceMinutes = exitTime.diff(entryTime, 'minutes');\n        const timeDifferenceMinutes = await calculateTotalWorkMinutes(entryTime, exitTime);\n        await db.collection(collectionEnum.PART_PRODUCTION_RECORDS).updateOne(\n            { qr_code: result.qr_data_detail.qr_code },\n            {\n                $set: {\n                    \"ct_min_at_iwpt\": timeDifferenceMinutes\n                }\n            }\n        )\n        logger(qrData.qr_code, `Update part production record success!`);\n        \n    }\n\n    const unitType = await validateUnitType(qrData.data.type);\n    const blockNumber = await findBlockEmpty(zoneEnum.ZONE_8.index, unitType);\n    const newZone = {\n        zone_number: zoneEnum.ZONE_8.index,\n        zone_name: zoneEnum.ZONE_8.value,\n        // unit_type: unitType,\n        entry_time: new Date(),\n        exit_time: null,\n        blocks: []\n    }\n\n    const newBlock = {\n        block_number: blockNumber,\n        entry_time: new Date(),\n        exit_time: null\n    }\n    newZone.blocks.push(newBlock);\n    result.zones.push(newZone);\n    result.current_zone = zoneEnum.ZONE_8.index;\n    result.current_block = blockNumber;\n    // node.warn(result);\n    await db.collection(collectionEnum.PRODUCTION_DATA).updateOne(\n        { _id: result._id, },\n        {\n            $set: {\n                \"zones\": result.zones,\n                \"current_zone\": zoneEnum.ZONE_8.index,\n                \"current_block\": blockNumber\n            }\n        }\n    ).then((result) => {\n        node.warn(`Update new zone (${zoneEnum.ZONE_8.index}) success!`);\n    }).catch((error) => {\n        node.warn(error);\n    });\n}\n\nasync function findBlockEmpty(zoneIndex, unitType) {\n    const maxBlockByPass = 99;\n    for (let index = 1; index < maxBlockByPass; index++) {\n        let query = \"\";\n        if (zoneIndex === zoneEnum.ZONE_8.index) {\n            query = {\n                \"is_active\": true,\n                \"current_zone\": zoneIndex,\n                \"current_block\": index,\n                \"unit_type\": unitType\n            }\n        } else {\n            query = {\n                \"is_active\": true,\n                \"current_zone\": zoneIndex,\n                \"current_block\": index,\n            }\n        }\n        const results = await db.collection(collectionEnum.PRODUCTION_DATA).find(query).toArray();\n        if (results.length === 0) {\n            return index;\n        }\n    }\n}\n\nasync function validateUnitType(unit_type) {\n    switch (unit_type.toUpperCase()) {\n        case 'N':\n            return 'N';\n        case 'B':\n        case 'C':\n            return 'B,C';\n        case 'R':\n            return 'R';\n        default:\n            // กรณีที่ไม่ตรงเงื่อนไขใดเลย\n            return 'N';\n    }\n}\nasync function newObjectInZone(result, zoneIndex, zoneValue) {\n    try {\n        logger(result?.qr_data_detail?.qr_code, `newObjectInZone: ${zoneIndex}`)\n        const unitType = await validateUnitType(qrData.data.type);\n        const blockNumber = await findBlockEmpty(zoneEnum.ZONE_8.index, unitType);\n        const newZone = {\n            zone_number: zoneIndex,\n            zone_name: zoneValue,\n            entry_time: new Date(),\n            exit_time: null,\n            blocks: [{\n                block_number: blockNumber,\n                entry_time: new Date(),\n                exit_time: null\n            }]\n        };\n\n        result.zones.push(newZone);\n        result.current_zone = zoneIndex;\n        result.current_block = blockNumber;\n\n        await db.collection(collectionEnum.PRODUCTION_DATA).updateOne(\n            { _id: result._id },\n            {\n                $set: {\n                    zones: result.zones,\n                    current_zone: zoneIndex,\n                    current_block: blockNumber\n                }\n            }\n        );\n        logger(result?.qr_data_detail?.qr_code, `Update new zone ${zoneIndex} success!`)\n        logger(result?.qr_data_detail?.qr_code, `newObjectInZone: ${zoneIndex} success!`)\n    } catch (error) {\n        node.error(error);\n    }\n}\n\n\nasync function endCrossZone(result, currentZone, keyUpdate) {\n    try {\n        logger(result?.qr_data_detail?.qr_code, `endZone: ${currentZone}`)\n        for (const zone of result.zones) {\n            if (zone.zone_number === currentZone) {\n                zone.exit_time = new Date();\n                zone.blocks[result.current_block - 1].exit_time = new Date()\n\n                await db.collection(collectionEnum.PRODUCTION_DATA).updateOne(\n                    { _id: result._id, \"zones.zone_number\": zone.zone_number },\n                    { $set: { \"zones.$\": zone } }\n                );\n                logger(result?.qr_data_detail?.qr_code, `Update zone ${currentZone} success!`)\n                await updatePartProductionZone(result, zone.entry_time, zone.exit_time, keyUpdate)\n            }\n        }\n        logger(result?.qr_data_detail?.qr_code, `endZone: ${currentZone} success!`)\n    } catch (error) {\n        node.error(error);\n    }\n}\n\nasync function updatePartProductionZone(result, entry_time, exit_time, keyUpdate) {\n    try {\n        logger(result?.qr_data_detail?.qr_code, `updatePartProductionZone keyUpdate:${keyUpdate}`)\n        const entryTime = moment(entry_time);\n        const exitTime = moment(exit_time);\n        const timeDifferenceMinutes = await calculateTotalWorkMinutes(entryTime, exitTime);\n        await db.collection(collectionEnum.PART_PRODUCTION_RECORDS).updateOne(\n            { qr_code: result.qr_data_detail.qr_code },\n            { $set: { [keyUpdate]: timeDifferenceMinutes } }\n        );\n        logger(result?.qr_data_detail?.qr_code, \"Update part production record success!\")\n    } catch (error) {\n        node.error(error);\n    }\n}\n\nasync function addCrossZone(result, zoneIndex, zoneValue, keyUpdate) {\n    try {\n        logger(result?.qr_data_detail?.qr_code, `addCrossZone: ${zoneIndex}`)\n        const blockNumber = await findBlockEmpty(zoneIndex);\n        const newZone = {\n            zone_number: zoneIndex,\n            zone_name: zoneValue,\n            entry_time: new Date(),\n            exit_time: new Date(),\n            blocks: [{\n                block_number: blockNumber,\n                entry_time: new Date(),\n                exit_time: new Date(),\n            }]\n        };\n\n        result.zones.push(newZone);\n        result.current_zone = zoneIndex;\n        result.current_block = blockNumber;\n\n        await db.collection(collectionEnum.PRODUCTION_DATA).updateOne(\n            { _id: result._id },\n            {\n                $set: {\n                    zones: result.zones,\n                    current_zone: zoneIndex,\n                    current_block: blockNumber\n                }\n            }\n        );\n        logger(result?.qr_data_detail?.qr_code, `Update new zone ${zoneIndex} success!`)\n        await updatePartProductionZone(result, newZone.entry_time, newZone.exit_time, keyUpdate);\n        logger(result?.qr_data_detail?.qr_code, `addCrossZone success!`)\n    } catch (error) {\n        node.error(error);\n    }\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 200,
        "wires": [
            [
                "37719fabfd1d6dd8"
            ]
        ]
    },
    {
        "id": "3f950c1260be948b",
        "type": "semaphore-take",
        "z": "c74c97e324c41a52",
        "config": "338c2cf3835aa8b0",
        "name": "",
        "x": 300,
        "y": 200,
        "wires": [
            [
                "b23b91c9ce1074f2"
            ]
        ]
    },
    {
        "id": "37719fabfd1d6dd8",
        "type": "semaphore-leave",
        "z": "c74c97e324c41a52",
        "config": "338c2cf3835aa8b0",
        "name": "",
        "x": 950,
        "y": 200,
        "wires": [
            []
        ]
    },
    {
        "id": "98072c33567f3984",
        "type": "catch",
        "z": "c74c97e324c41a52",
        "name": "",
        "scope": null,
        "uncaught": false,
        "x": 520,
        "y": 280,
        "wires": [
            [
                "f0801073238d71cf"
            ]
        ]
    },
    {
        "id": "f0801073238d71cf",
        "type": "function",
        "z": "c74c97e324c41a52",
        "name": "msg",
        "func": "node.warn(msg);\nnode.warn(JSON.stringify(msg));",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 280,
        "wires": [
            []
        ]
    },
    {
        "id": "8cb7439e0b2c632f",
        "type": "function",
        "z": "4e6f598c1a06160a",
        "name": "Add new object zone 9",
        "func": "const logger = global.get('loggerInfo');\nconst db = global.get(\"connetion_mongo\");\nconst moment = global.get('moment_timezone');\nconst zoneEnum = global.get(\"ZoneEnum\");\nconst collectionEnum = global.get(\"CollectionEnum\");\nconst lineEnum = global.get(\"LineEnum\");\nconst preAddObjectCheck = global.get(\"preAddObjectCheck\")\nconst byPassEnum = global.get(\"ByPassEnum\");\nconst saveQrCode = global.get('saveQrCode');\nconst calculateTotalWorkMinutes = global.get('calculateTotalWorkMinutes');\n//cross zone \nconst endCrossZone = global.get('endCrossZone');\nconst updatePartProductionZone = global.get('updatePartProductionZone');\nconst addCrossZone = global.get('addCrossZone');\nconst findBlockEmpty = global.get('findBlockEmpty');\nconst newObjectInZone = global.get('newObjectInZone');\nconst saveLogCrossZone = global.get('saveLogCrossZone');\nconst qrData = msg.qrData;\nlogger(qrData.qr_code, `Start Add new object zone 9`)\nawait updateZoneObject(zoneEnum.ZONE_8.index)\nlogger(qrData.qr_code, `End Add new object zone 9`)\nreturn msg;\n\n\nasync function updateZoneObject(zoneIndex) {\n    logger(qrData.qr_code, `updateZoneObject zone 9`)\n    let results = [];\n    //find item in zone by pass 2\n    const query = {\n        \"is_active\": true,\n        \"current_zone\": zoneIndex,\n        \"qr_data_detail.qr_code\": msg.qrData.qr_code\n    }\n    results = await db.collection(collectionEnum.PRODUCTION_DATA).find(query).toArray();\n    if (results.length === 0) {\n\n        //find cross zone\n        const query = {\n            \"is_active\": true,\n            \"qr_data_detail.qr_code\": msg.qrData.qr_code\n        }\n        const result = await db.collection(collectionEnum.PRODUCTION_DATA).findOne(query);\n        //validate zone\n        if (!result || result.current_zone >= zoneEnum.ZONE_9.index) {\n            node.warn(\"Cannot add object by pass 2 (zone 8) because the QR code does not match in zone 7.\");\n            msg.statusCode = 500;\n            msg.payload = {\n                \"code\": \"ERR_9999\",\n                \"message\": \"ระบบไม่สามารถดำเนินการได้\",\n                \"data\": `Cannot add object by pass 2 (zone 8)because the QR code does not match in zone 7.`\n            };\n            return msg;\n        } else {\n            //update cross zone\n            const currentZone = result.current_zone;\n            //case 2 -> add3 -> add5 -> add6 -> add7 -> add8 -> new9\n            if (currentZone === 2) {\n                //end zone 2\n                await endCrossZone(result, zoneEnum.ZONE_2.index, \"ct_min_at_mj\")\n                //add zone 3\n                await addCrossZone(result, zoneEnum.ZONE_3.index, zoneEnum.ZONE_3.value, \"ct_min_at_buffer\")\n                //add zone 5\n                await addCrossZone(result, zoneEnum.ZONE_5.index, zoneEnum.ZONE_5.value, \"ct_min_at_ew\")\n                //add zone 6\n                await addCrossZone(result, zoneEnum.ZONE_6.index, zoneEnum.ZONE_6.value, \"ct_min_at_ee_in\")\n                //add zone 7\n                await addCrossZone(result, zoneEnum.ZONE_7.index, zoneEnum.ZONE_7.value, \"ct_min_at_iwpt\")\n                //add zone 8\n                await addCrossZone(result, zoneEnum.ZONE_8.index, zoneEnum.ZONE_8.value, \"ct_min_at_bypass2\")\n                //new zone 9\n                await preAddObjectCheck(zoneEnum.ZONE_9.index, 1);\n                await newObjectInZone(result, zoneEnum.ZONE_9.index, zoneEnum.ZONE_9.value)\n            }\n            //case 3 -> add5 -> add6 -> add7 -> add8 -> new9\n            if (currentZone === 3) {\n                //end zone 3\n                await endCrossZone(result, zoneEnum.ZONE_3.index, \"ct_min_at_buffer\")\n                //add zone 5\n                await addCrossZone(result, zoneEnum.ZONE_5.index, zoneEnum.ZONE_5.value, \"ct_min_at_ew\")\n                //add zone 6\n                await addCrossZone(result, zoneEnum.ZONE_6.index, zoneEnum.ZONE_6.value, \"ct_min_at_ee_in\")\n                //add zone 7\n                await addCrossZone(result, zoneEnum.ZONE_7.index, zoneEnum.ZONE_7.value, \"ct_min_at_iwpt\")\n                //add zone 8\n                await addCrossZone(result, zoneEnum.ZONE_8.index, zoneEnum.ZONE_8.value, \"ct_min_at_bypass2\")\n                //new zone 9\n                await preAddObjectCheck(zoneEnum.ZONE_9.index, 1);\n                await newObjectInZone(result, zoneEnum.ZONE_9.index, zoneEnum.ZONE_9.value, qrData.data.type)\n            }\n            //case 4 -> add6 -> add7 -> add8 -> new9\n            if (currentZone === 4) {\n                //end zone 4\n                await endCrossZone(result, zoneEnum.ZONE_4.index, \"ct_min_at_ew_out\")\n                //add zone 6\n                await addCrossZone(result, zoneEnum.ZONE_6.index, zoneEnum.ZONE_6.value, \"ct_min_at_ee_in\")\n                //add zone 7\n                await addCrossZone(result, zoneEnum.ZONE_7.index, zoneEnum.ZONE_7.value, \"ct_min_at_iwpt\")\n                //add zone 8\n                await addCrossZone(result, zoneEnum.ZONE_8.index, zoneEnum.ZONE_8.value, \"ct_min_at_bypass2\")\n                //new zone 9\n                await preAddObjectCheck(zoneEnum.ZONE_9.index, 1);\n                await newObjectInZone(result, zoneEnum.ZONE_9.index, zoneEnum.ZONE_9.value, qrData.data.type)\n            }\n            //case 5 -> add6 -> add7 -> add8 -> new9\n            if (currentZone === 5) {\n                //end zone 5\n                await endCrossZone(result, zoneEnum.ZONE_5.index, \"ct_min_at_ew\")\n                //add zone 6\n                await addCrossZone(result, zoneEnum.ZONE_6.index, zoneEnum.ZONE_6.value, \"ct_min_at_ee_in\")\n                //add zone 7\n                await addCrossZone(result, zoneEnum.ZONE_7.index, zoneEnum.ZONE_7.value, \"ct_min_at_iwpt\")\n                //add zone 8\n                await addCrossZone(result, zoneEnum.ZONE_8.index, zoneEnum.ZONE_8.value, \"ct_min_at_bypass2\")\n                //new zone 9\n                await preAddObjectCheck(zoneEnum.ZONE_9.index, 1);\n                await newObjectInZone(result, zoneEnum.ZONE_9.index, zoneEnum.ZONE_9.value, qrData.data.type)\n            }\n            //case 6 -> add7 -> add8 -> new9\n            if (currentZone === 6) {\n                //end zone 6\n                await endCrossZone(result, zoneEnum.ZONE_5.index, \"ct_min_at_ee_in\")\n                //add zone 7\n                await addCrossZone(result, zoneEnum.ZONE_7.index, zoneEnum.ZONE_7.value, \"ct_min_at_iwpt\")\n                //add zone 8\n                await addCrossZone(result, zoneEnum.ZONE_8.index, zoneEnum.ZONE_8.value, \"ct_min_at_bypass2\")\n                //new zone 9\n                await preAddObjectCheck(zoneEnum.ZONE_9.index, 1);\n                await newObjectInZone(result, zoneEnum.ZONE_9.index, zoneEnum.ZONE_9.value, qrData.data.type)\n            }\n            //case 7 -> add8 -> new9\n            if (currentZone === 7) {\n                //end zone 7\n                await endCrossZone(result, zoneEnum.ZONE_7.index, \"ct_min_at_iwpt\")\n                //add zone 8\n                await addCrossZone(result, zoneEnum.ZONE_8.index, zoneEnum.ZONE_8.value, \"ct_min_at_bypass2\")\n                //new zone 9\n                await preAddObjectCheck(zoneEnum.ZONE_9.index, 1);\n                await newObjectInZone(result, zoneEnum.ZONE_9.index, zoneEnum.ZONE_9.value, qrData.data.type)\n            }\n            //save log\n            await saveLogCrossZone(qrData.qr_code, currentZone, zoneEnum.ZONE_9.value)\n            //save qr code\n            await saveQrCode(msg.tempPayload);\n            return msg;\n        }\n    } else {\n        //Update by pass \n        const result = results[0];\n        // node.warn(result);\n        for (const zone of result.zones) {\n            // node.warn(zone.zone_number);\n            // node.warn(zone);\n            if (zone.zone_number === zoneIndex) {\n                zone.exit_time = new Date();\n                zone.blocks[0].exit_time = new Date()\n                // node.warn(zone);\n\n                await db.collection(collectionEnum.PRODUCTION_DATA).updateOne(\n                    { _id: result._id, \"zones.zone_number\": zone.zone_number },\n                    {\n                        $set: {\n                            \"zones.$\": zone\n                        }\n                    }\n                ).then((result) => {\n                    node.warn(`Update zone (${zone.zone_number}) success!`);\n                }).catch((error) => {\n                    node.warn(error);\n                });\n\n                const entryTime = moment(zone.entry_time);\n                const exitTime = moment(zone.exit_time);\n                // const timeDifferenceMinutes = exitTime.diff(entryTime, 'minutes');\n                const timeDifferenceMinutes = await calculateTotalWorkMinutes(entryTime, exitTime);\n                await db.collection(collectionEnum.PART_PRODUCTION_RECORDS).updateOne(\n                    { qr_code: result.qr_data_detail.qr_code },\n                    {\n                        $set: {\n                            \"ct_min_at_bypass2\": timeDifferenceMinutes\n                        }\n                    }\n                ).then((result) => {\n                    node.warn(\"Update part production record success!\");\n                }).catch((error) => {\n                    node.warn(error);\n                });\n            }\n        }\n        // for (const byPass of result.by_pass) {\n        //     if (byPass.by_pass_number === byPassEnum.BY_PASS_2.index) {\n        //         byPass.blocks[byPass.blocks.length - 1].exit_time = new Date();\n\n        //         await db.collection(collectionEnum.PRODUCTION_DATA).updateOne(\n        //             { _id: result._id, \"by_pass.by_pass_number\": byPass.by_pass_number },\n        //             {\n        //                 $set: {\n        //                     \"by_pass.$.exit_time\": new Date(),\n        //                     \"by_pass.$.blocks\": byPass.blocks\n        //                 }\n        //             }\n        //         ).then((result) => {\n        //             node.warn(\"Update byPass success!\");\n        //         }).catch((error) => {\n        //             node.warn(error);\n        //         });\n        //     }\n        // }\n    }\n\n    //save QR\n    await saveQrCode(msg.tempPayload);\n    //next item before insert new item\n    await preAddObjectCheck(zoneEnum.ZONE_9.index, 1);\n    const result = results[0];\n    //add new zone7 9  \n\n    const newZone = {\n        zone_number: zoneEnum.ZONE_9.index,\n        zone_name: zoneEnum.ZONE_9.value,\n        entry_time: new Date(),\n        exit_time: null,\n        blocks: []\n    }\n\n    const newBlock = {\n        block_number: 1,\n        entry_time: new Date(),\n        exit_time: null\n    }\n    newZone.blocks.push(newBlock);\n    result.zones.push(newZone);\n    result.current_zone = zoneEnum.ZONE_9.index;\n    result.current_block = 1;\n    // node.warn(result);\n    await db.collection(collectionEnum.PRODUCTION_DATA).updateOne(\n        { _id: result._id, },\n        {\n            $set: {\n                \"zones\": result.zones,\n                \"current_zone\": zoneEnum.ZONE_9.index,\n                \"current_block\": 1\n            }\n        }\n    ).then((result) => {\n        node.warn(`Update new zone(${zoneEnum.ZONE_9.index}) success!`);\n    }).catch((error) => {\n        node.warn(error);\n    });\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 120,
        "wires": [
            [
                "d0d71fe0d032b9e2"
            ]
        ]
    },
    {
        "id": "5839bf7bd1878922",
        "type": "semaphore-take",
        "z": "4e6f598c1a06160a",
        "config": "1f3f50aabab600f4",
        "name": "",
        "x": 360,
        "y": 120,
        "wires": [
            [
                "8cb7439e0b2c632f"
            ]
        ]
    },
    {
        "id": "d0d71fe0d032b9e2",
        "type": "semaphore-leave",
        "z": "4e6f598c1a06160a",
        "config": "1f3f50aabab600f4",
        "name": "",
        "x": 850,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "98be0dac9363bd8d",
        "type": "function",
        "z": "4e6f598c1a06160a",
        "name": "Add new object zone7",
        "func": "const db = global.get(\"connetion_mongo\");\nconst zoneEnum = global.get(\"ZoneEnum\");\nconst collectionEnum = global.get(\"CollectionEnum\");\nconst lineEnum = global.get(\"LineEnum\");\nconst preAddObjectCheck = global.get(\"preAddObjectCheck\")\nconst byPassEnum = global.get(\"ByPassEnum\");\nconst saveQrCode = global.get('saveQrCode');\nconst qrData = msg.qrData;\n\nawait updateZoneObject(byPassEnum.BY_PASS_2.index)\nreturn msg;\n\n\nasync function updateZoneObject(zoneIndex) {\n    node.log(\"updateZoneObject zone 4\");\n    let results = [];\n    //find item in zone by pass 2\n    const query = {\n        \"is_active\": true,\n        \"current_zone\": byPassEnum.BY_PASS_2.value,\n        \"qr_data_detail.qr_code\": msg.qrData.qr_code\n    }\n    results = await db.collection(collectionEnum.PRODUCTION_DATA).find(query).toArray();\n    if (results.length === 0) {\n        node.warn(\"Cannot add object zone7 because the QR code does not match the system.\");\n        msg.statusCode = 500;\n        msg.payload = {\n            \"code\": \"ERR_9999\",\n            \"message\": \"ระบบไม่สามารถดำเนินการได้\",\n            \"data\": `Cannot add object zone7 because the QR code does not match the system.`\n        };\n        return msg;\n    } else {\n        //save QR\n        await saveQrCode(msg.tempPayload);\n        //Update by pass \n        const result = results[0];\n        for (const byPass of result.by_pass) {\n            if (byPass.by_pass_number === byPassEnum.BY_PASS_2.index) {\n                byPass.blocks[byPass.blocks.length - 1].exit_time = new Date();\n\n                await db.collection(collectionEnum.PRODUCTION_DATA).updateOne(\n                    { _id: result._id, \"by_pass.by_pass_number\": byPass.by_pass_number },\n                    {\n                        $set: {\n                            \"by_pass.$.exit_time\": new Date(),\n                            \"by_pass.$.blocks\": byPass.blocks\n                        }\n                    }\n                ).then((result) => {\n                    node.warn(\"Update byPass success!\");\n                }).catch((error) => {\n                    node.warn(error);\n                });\n            }\n        }\n    }\n    \n    //next item before insert new item\n    preAddObjectCheck(zoneEnum.ZONE_7.index, 1);\n    const result = results[0];\n    //add new zone7    \n    \n    const newZone = {\n        zone_number: zoneEnum.ZONE_7.index,\n        zone_name: zoneEnum.ZONE_7.value,\n        entry_time: new Date(),\n        exit_time: null,\n        blocks: []\n    }\n\n    const newBlock = {\n        block_number: 1,\n        entry_time: new Date(),\n        exit_time: null\n    }\n    newZone.blocks.push(newBlock);\n    result.zones.push(newZone);\n    result.current_zone = zoneEnum.ZONE_7.index;\n    result.current_block = 1;\n    // node.warn(result);\n    await db.collection(collectionEnum.PRODUCTION_DATA).updateOne(\n        { _id: result._id, },\n        {\n            $set: {\n                \"zones\": result.zones,\n                \"current_zone\": zoneEnum.ZONE_7.index,\n                \"current_block\": 1\n            }\n        }\n    ).then((result) => {\n        node.warn(`Update new zone(${zoneEnum.ZONE_7.index}) success!`);\n    }).catch((error) => {\n        node.warn(error);\n    });\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 60,
        "wires": [
            []
        ]
    },
    {
        "id": "2506a4613b96b182",
        "type": "catch",
        "z": "4e6f598c1a06160a",
        "name": "",
        "scope": null,
        "uncaught": false,
        "x": 520,
        "y": 220,
        "wires": [
            [
                "211f046bda038b98"
            ]
        ]
    },
    {
        "id": "211f046bda038b98",
        "type": "function",
        "z": "4e6f598c1a06160a",
        "name": "msg",
        "func": "node.warn(msg);\nnode.warn(JSON.stringify(msg));",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "6ec7bec899a3ec0a",
        "type": "function",
        "z": "c378d9efe79ee88a",
        "name": "Add new object zone 10",
        "func": "const db = global.get(\"connetion_mongo\");\nconst moment = global.get('moment_timezone');\nconst zoneEnum = global.get(\"ZoneEnum\");\nconst collectionEnum = global.get(\"CollectionEnum\");\nconst lineEnum = global.get(\"LineEnum\");\nconst preAddObjectCheck = global.get(\"preAddObjectCheck\")\nconst qrData = msg.qrData;\nconst calculateTotalWorkMinutes = global.get('calculateTotalWorkMinutes');\n\n//validate zone9\nif (!await validateZoneBefore(zoneEnum.ZONE_9.index)) {\n    return msg;\n}\nnode.warn(`Validate zone ${zoneEnum.ZONE_9.index} passed.`);\nawait preAddObjectCheck(zoneEnum.ZONE_10.index, 1);\nawait updateZoneObject(zoneEnum.ZONE_9.index)\nreturn msg;\n\n\nasync function validateZoneBefore(zoneIndex) {\n    const results = await db.collection(collectionEnum.PRODUCTION_DATA).find(\n        { current_zone: zoneIndex, is_active: true }, { _id: 0 }).sort({ \"zones.current_block\": -1 }).toArray();\n    if (results.length > 0) {\n        return true;\n    }\n    return false;\n}\n\n//Update Zone5 and Create Zone6\nasync function updateZoneObject(zoneIndex) {\n    node.log(\"updateZoneObject\");\n\n    const results = await db.collection(collectionEnum.PRODUCTION_DATA).find(\n        { current_zone: zoneIndex, is_active: true }, { _id: 0 }).sort({ \"zones.current_block\": -1 }).toArray();\n\n    const result = results[0];\n    for (const zone of result.zones){\n        // node.warn(zone.zone_number);\n        // node.warn(zone);\n        if (zone.zone_number === zoneIndex){\n            zone.exit_time = new Date();\n            zone.blocks[result.current_block - 1].exit_time = new Date()\n            // node.warn(zone);\n\n            await db.collection(collectionEnum.PRODUCTION_DATA).updateOne(\n                { _id: result._id, \"zones.zone_number\": zone.zone_number },\n                {\n                    $set: {\n                        \"zones.$\": zone\n                    }\n                }\n            ).then((result) => {\n                node.warn(`Update zone (${zone.zone_number}) success!`);\n            }).catch((error) => {\n                node.warn(error);\n            });\n\n            const entryTime = moment(zone.entry_time);\n            const exitTime = moment(zone.exit_time);\n            // const timeDifferenceMinutes = exitTime.diff(entryTime, 'minutes');\n            const timeDifferenceMinutes = await calculateTotalWorkMinutes(entryTime, exitTime);\n            await db.collection(collectionEnum.PART_PRODUCTION_RECORDS).updateOne(\n                { qr_code: result.qr_data_detail.qr_code },\n                {\n                    $set: {\n                        \"ct_min_at_door\": timeDifferenceMinutes\n                    }\n                }\n            ).then((result) => {\n                node.warn(\"Update part production record success!\");\n            }).catch((error) => {\n                node.warn(error);\n            });\n        }\n\n    }\n\n    const newZone = {\n        zone_number: zoneEnum.ZONE_10.index,\n        zone_name: zoneEnum.ZONE_10.value,\n        entry_time: new Date(),\n        exit_time: null,\n        blocks: []\n    }\n\n    const newBlock = {\n        block_number: 1,\n        entry_time: new Date(),\n        exit_time: null\n    }\n    newZone.blocks.push(newBlock);\n    result.zones.push(newZone);\n    result.current_zone = zoneEnum.ZONE_10.index;\n    result.current_block = 1;\n    // node.warn(result);\n    await db.collection(collectionEnum.PRODUCTION_DATA).updateOne(\n        { _id: result._id, },\n        {\n            $set: {\n                \"zones\": result.zones,\n                \"current_zone\": zoneEnum.ZONE_10.index,\n                \"current_block\": 1\n            }\n        }\n    ).then((result) => {\n        node.warn(`Update new zone (${zoneEnum.ZONE_10.index}) success!`);\n    }).catch((error) => {\n        node.warn(error);\n    });\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 180,
        "wires": [
            [
                "0c337e5e20503d63"
            ]
        ]
    },
    {
        "id": "6e198ee73804793b",
        "type": "semaphore-take",
        "z": "c378d9efe79ee88a",
        "config": "f2c6bc5445ee1fc2",
        "name": "",
        "x": 400,
        "y": 180,
        "wires": [
            [
                "6ec7bec899a3ec0a"
            ]
        ]
    },
    {
        "id": "0c337e5e20503d63",
        "type": "semaphore-leave",
        "z": "c378d9efe79ee88a",
        "config": "f2c6bc5445ee1fc2",
        "name": "",
        "x": 910,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "c81128098cbf5cb2",
        "type": "function",
        "z": "c378d9efe79ee88a",
        "name": "Add new object zone 10",
        "func": "const db = global.get(\"connetion_mongo\");\nconst zoneEnum = global.get(\"ZoneEnum\");\nconst collectionEnum = global.get(\"CollectionEnum\");\nconst lineEnum = global.get(\"LineEnum\");\nconst preAddObjectCheck = global.get(\"preAddObjectCheck\")\nconst qrData = msg.qrData;\n\n//validate zone7\nif (!await validateZoneBefore(zoneEnum.ZONE_7.index)) {\n    return msg;\n}\nnode.warn(`Validate zone ${zoneEnum.ZONE_7.index} passed.`);\npreAddObjectCheck(zoneEnum.ZONE_8.index, 1);\nawait updateZoneObject(zoneEnum.ZONE_7.index)\nreturn msg;\n\n\nasync function validateZoneBefore(zoneIndex) {\n    const results = await db.collection(collectionEnum.PRODUCTION_DATA).find(\n        { current_zone: zoneIndex, is_active: true }, { _id: 0 }).sort({ \"zones.current_block\": -1 }).toArray();\n    if (results.length > 0) {\n        return true;\n    }\n    return false;\n}\n\n//Update Zone5 and Create Zone6\nasync function updateZoneObject(zoneIndex) {\n    node.log(\"updateZoneObject\");\n\n    const results = await db.collection(collectionEnum.PRODUCTION_DATA).find(\n        { current_zone: zoneIndex, is_active: true }, { _id: 0 }).sort({ \"zones.current_block\": -1 }).toArray();\n\n    const result = results[0];\n    for (const zone of result.zones){\n        // node.warn(zone.zone_number);\n        // node.warn(zone);\n        if (zone.zone_number === zoneIndex){\n            zone.exit_time = new Date();\n            zone.blocks[result.current_block - 1].exit_time = new Date()\n            // node.warn(zone);\n\n            await db.collection(collectionEnum.PRODUCTION_DATA).updateOne(\n                { _id: result._id, \"zones.zone_number\": zone.zone_number },\n                {\n                    $set: {\n                        \"zones.$\": zone\n                    }\n                }\n            ).then((result) => {\n                node.warn(`Update zone (${zone.zone_number}) success!`);\n            }).catch((error) => {\n                node.warn(error);\n            });\n        }\n\n    }\n\n    const newZone = {\n        zone_number: zoneEnum.ZONE_8.index,\n        zone_name: zoneEnum.ZONE_8.value,\n        entry_time: new Date(),\n        exit_time: null,\n        blocks: []\n    }\n\n    const newBlock = {\n        block_number: 1,\n        entry_time: new Date(),\n        exit_time: null\n    }\n    newZone.blocks.push(newBlock);\n    result.zones.push(newZone);\n    result.current_zone = zoneEnum.ZONE_8.index;\n    result.current_block = 1;\n    // node.warn(result);\n    await db.collection(collectionEnum.PRODUCTION_DATA).updateOne(\n        { _id: result._id, },\n        {\n            $set: {\n                \"zones\": result.zones,\n                \"current_zone\": zoneEnum.ZONE_8.index,\n                \"current_block\": 1\n            }\n        }\n    ).then((result) => {\n        node.warn(`Update new zone (${zoneEnum.ZONE_8.index}) success!`);\n    }).catch((error) => {\n        node.warn(error);\n    });\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "b6b10ee386e22492",
        "type": "catch",
        "z": "c378d9efe79ee88a",
        "name": "",
        "scope": null,
        "uncaught": false,
        "x": 540,
        "y": 260,
        "wires": [
            [
                "011eb0bca3eaa99c"
            ]
        ]
    },
    {
        "id": "011eb0bca3eaa99c",
        "type": "function",
        "z": "c378d9efe79ee88a",
        "name": "msg",
        "func": "node.warn(msg);\nnode.warn(JSON.stringify(msg));",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "a0ef96ac79a1c965",
        "type": "function",
        "z": "ffec7d5f3c1b1228",
        "name": "Add new object zone 11",
        "func": "const db = global.get(\"connetion_mongo\");\nconst moment = global.get('moment_timezone');\nconst zoneEnum = global.get(\"ZoneEnum\");\nconst collectionEnum = global.get(\"CollectionEnum\");\nconst lineEnum = global.get(\"LineEnum\");\nconst preAddObjectCheck = global.get(\"preAddObjectCheck\")\nconst qrData = msg.qrData;\nconst calculateTotalWorkMinutes = global.get('calculateTotalWorkMinutes');\n\n//validate zone10\nif (!await validateZoneBefore(zoneEnum.ZONE_10.index)) {\n    return msg;\n}\nnode.warn(`Validate zone ${zoneEnum.ZONE_10.index} passed.`);\npreAddObjectCheck(zoneEnum.ZONE_11.index, 1);\nawait updateZoneObject(zoneEnum.ZONE_10.index)\nreturn msg;\n\n\nasync function validateZoneBefore(zoneIndex) {\n    const results = await db.collection(collectionEnum.PRODUCTION_DATA).find(\n        { current_zone: zoneIndex, is_active: true }, { _id: 0 }).sort({ \"zones.current_block\": -1 }).toArray();\n    if (results.length > 0) {\n        return true;\n    }\n    return false;\n}\n\n//Update Zone5 and Create Zone6\nasync function updateZoneObject(zoneIndex) {\n    node.log(\"updateZoneObject\");\n\n    const results = await db.collection(collectionEnum.PRODUCTION_DATA).find(\n        { current_zone: zoneIndex, is_active: true }, { _id: 0 }).sort({ \"zones.current_block\": -1 }).toArray();\n\n    const result = results[0];\n    for (const zone of result.zones){\n        // node.warn(zone.zone_number);\n        // node.warn(zone);\n        if (zone.zone_number === zoneIndex){\n            zone.exit_time = new Date();\n            zone.blocks[result.current_block - 1].exit_time = new Date()\n            // node.warn(zone);\n\n            await db.collection(collectionEnum.PRODUCTION_DATA).updateOne(\n                { _id: result._id, \"zones.zone_number\": zone.zone_number },\n                {\n                    $set: {\n                        \"zones.$\": zone\n                    }\n                }\n            ).then((result) => {\n                node.warn(`Update zone (${zone.zone_number}) success!`);\n            }).catch((error) => {\n                node.warn(error);\n            });\n\n            const entryTime = moment(zone.entry_time);\n            const exitTime = moment(zone.exit_time);\n            // const timeDifferenceMinutes = exitTime.diff(entryTime, 'minutes');\n            const timeDifferenceMinutes = await calculateTotalWorkMinutes(entryTime, exitTime);\n            await db.collection(collectionEnum.PART_PRODUCTION_RECORDS).updateOne(\n                { qr_code: result.qr_data_detail.qr_code },\n                {\n                    $set: {\n                        \"ct_min_at_window\": timeDifferenceMinutes\n                    }\n                }\n            ).then((result) => {\n                node.warn(\"Update part production record success!\");\n            }).catch((error) => {\n                node.warn(error);\n            });\n        }\n\n    }\n\n    const newZone = {\n        zone_number: zoneEnum.ZONE_11.index,\n        zone_name: zoneEnum.ZONE_11.value,\n        entry_time: new Date(),\n        exit_time: null,\n        blocks: []\n    }\n\n    const newBlock = {\n        block_number: 1,\n        entry_time: new Date(),\n        exit_time: null\n    }\n    newZone.blocks.push(newBlock);\n    result.zones.push(newZone);\n    result.current_zone = zoneEnum.ZONE_11.index;\n    result.current_block = 1;\n    // node.warn(result);\n    await db.collection(collectionEnum.PRODUCTION_DATA).updateOne(\n        { _id: result._id, },\n        {\n            $set: {\n                \"zones\": result.zones,\n                \"current_zone\": zoneEnum.ZONE_11.index,\n                \"current_block\": 1\n            }\n        }\n    ).then((result) => {\n        node.warn(`Update new zone (${zoneEnum.ZONE_11.index}) success!`);\n    }).catch((error) => {\n        node.warn(error);\n    });\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 200,
        "wires": [
            [
                "a41e98a89383ac4c"
            ]
        ]
    },
    {
        "id": "eaa2d35a3c195bf3",
        "type": "semaphore-take",
        "z": "ffec7d5f3c1b1228",
        "config": "0e291ed92d22da3d",
        "name": "",
        "x": 340,
        "y": 200,
        "wires": [
            [
                "a0ef96ac79a1c965"
            ]
        ]
    },
    {
        "id": "a41e98a89383ac4c",
        "type": "semaphore-leave",
        "z": "ffec7d5f3c1b1228",
        "config": "0e291ed92d22da3d",
        "name": "",
        "x": 850,
        "y": 200,
        "wires": [
            []
        ]
    },
    {
        "id": "939b2a702263ae71",
        "type": "function",
        "z": "ffec7d5f3c1b1228",
        "name": "Add new object zone 11",
        "func": "const db = global.get(\"connetion_mongo\");\nconst zoneEnum = global.get(\"ZoneEnum\");\nconst collectionEnum = global.get(\"CollectionEnum\");\nconst lineEnum = global.get(\"LineEnum\");\nconst preAddObjectCheck = global.get(\"preAddObjectCheck\")\nconst qrData = msg.qrData;\n\n//validate zone7\nif (!await validateZoneBefore(zoneEnum.ZONE_8.index)) {\n    return msg;\n}\nnode.warn(`Validate zone ${zoneEnum.ZONE_8.index} passed.`);\npreAddObjectCheck(zoneEnum.ZONE_9.index, 1);\nawait updateZoneObject(zoneEnum.ZONE_8.index)\nreturn msg;\n\n\nasync function validateZoneBefore(zoneIndex) {\n    const results = await db.collection(collectionEnum.PRODUCTION_DATA).find(\n        { current_zone: zoneIndex, is_active: true }, { _id: 0 }).sort({ \"zones.current_block\": -1 }).toArray();\n    if (results.length > 0) {\n        return true;\n    }\n    return false;\n}\n\n//Update Zone5 and Create Zone6\nasync function updateZoneObject(zoneIndex) {\n    node.log(\"updateZoneObject\");\n\n    const results = await db.collection(collectionEnum.PRODUCTION_DATA).find(\n        { current_zone: zoneIndex, is_active: true }, { _id: 0 }).sort({ \"zones.current_block\": -1 }).toArray();\n\n    const result = results[0];\n    for (const zone of result.zones){\n        // node.warn(zone.zone_number);\n        // node.warn(zone);\n        if (zone.zone_number === zoneIndex){\n            zone.exit_time = new Date();\n            zone.blocks[result.current_block - 1].exit_time = new Date()\n            // node.warn(zone);\n\n            await db.collection(collectionEnum.PRODUCTION_DATA).updateOne(\n                { _id: result._id, \"zones.zone_number\": zone.zone_number },\n                {\n                    $set: {\n                        \"zones.$\": zone\n                    }\n                }\n            ).then((result) => {\n                node.warn(`Update zone (${zone.zone_number}) success!`);\n            }).catch((error) => {\n                node.warn(error);\n            });\n        }\n\n    }\n\n    const newZone = {\n        zone_number: zoneEnum.ZONE_9.index,\n        zone_name: zoneEnum.ZONE_9.value,\n        entry_time: new Date(),\n        exit_time: null,\n        blocks: []\n    }\n\n    const newBlock = {\n        block_number: 1,\n        entry_time: new Date(),\n        exit_time: null\n    }\n    newZone.blocks.push(newBlock);\n    result.zones.push(newZone);\n    result.current_zone = zoneEnum.ZONE_9.index;\n    result.current_block = 1;\n    // node.warn(result);\n    await db.collection(collectionEnum.PRODUCTION_DATA).updateOne(\n        { _id: result._id, },\n        {\n            $set: {\n                \"zones\": result.zones,\n                \"current_zone\": zoneEnum.ZONE_9.index,\n                \"current_block\": 1\n            }\n        }\n    ).then((result) => {\n        node.warn(`Update new zone (${zoneEnum.ZONE_9.index}) success!`);\n    }).catch((error) => {\n        node.warn(error);\n    });\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "082c338b3b7ce983",
        "type": "catch",
        "z": "ffec7d5f3c1b1228",
        "name": "",
        "scope": null,
        "uncaught": false,
        "x": 500,
        "y": 300,
        "wires": [
            [
                "b55f41f326e08491"
            ]
        ]
    },
    {
        "id": "b55f41f326e08491",
        "type": "function",
        "z": "ffec7d5f3c1b1228",
        "name": "msg",
        "func": "node.warn(msg);\nnode.warn(JSON.stringify(msg));",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 300,
        "wires": [
            []
        ]
    },
    {
        "id": "c71fb5f36194b4c5",
        "type": "function",
        "z": "2bc316e725c3638f",
        "name": "Add new object zone 12",
        "func": "const db = global.get(\"connetion_mongo\");\nconst moment = global.get('moment_timezone');\nconst zoneEnum = global.get(\"ZoneEnum\");\nconst collectionEnum = global.get(\"CollectionEnum\");\nconst lineEnum = global.get(\"LineEnum\");\nconst preAddObjectCheck = global.get(\"preAddObjectCheck\")\nconst qrData = msg.qrData;\nconst calculateTotalWorkMinutes = global.get('calculateTotalWorkMinutes');\n\n//validate zone 11\nif (!await validateZoneBefore(zoneEnum.ZONE_11.index)) {\n    return msg;\n}\nnode.warn(`Validate zone ${zoneEnum.ZONE_11.index} passed.`);\npreAddObjectCheck(zoneEnum.ZONE_12.index, 1);\nawait updateZoneObject(zoneEnum.ZONE_11.index)\nreturn msg;\n\n\nasync function validateZoneBefore(zoneIndex) {\n    const results = await db.collection(collectionEnum.PRODUCTION_DATA).find(\n        { current_zone: zoneIndex, is_active: true }, { _id: 0 }).sort({ \"zones.current_block\": -1 }).toArray();\n    if (results.length > 0) {\n        return true;\n    }\n    return false;\n}\n\n//Update Zone11 and Create Zone12\nasync function updateZoneObject(zoneIndex) {\n    node.log(\"updateZoneObject\");\n\n    const results = await db.collection(collectionEnum.PRODUCTION_DATA).find(\n        { current_zone: zoneIndex, is_active: true }, { _id: 0 }).sort({ \"zones.current_block\": -1 }).toArray();\n\n    const result = results[0];\n    for (const zone of result.zones){\n        // node.warn(zone.zone_number);\n        // node.warn(zone);\n        if (zone.zone_number === zoneIndex){\n            zone.exit_time = new Date();\n            zone.blocks[result.current_block - 1].exit_time = new Date()\n            // node.warn(zone);\n\n            await db.collection(collectionEnum.PRODUCTION_DATA).updateOne(\n                { _id: result._id, \"zones.zone_number\": zone.zone_number },\n                {\n                    $set: {\n                        \"zones.$\": zone\n                    }\n                }\n            ).then((result) => {\n                node.warn(`Update zone (${zone.zone_number}) success!`);\n            }).catch((error) => {\n                node.warn(error);\n            });\n        }\n\n        const entryTime = moment(zone.entry_time);\n        const exitTime = moment(zone.exit_time);\n        // const timeDifferenceMinutes = exitTime.diff(entryTime, 'minutes');\n        const timeDifferenceMinutes = await calculateTotalWorkMinutes(entryTime, exitTime);\n        await db.collection(collectionEnum.PART_PRODUCTION_RECORDS).updateOne(\n            { qr_code: result.qr_data_detail.qr_code },\n            {\n                $set: {\n                    \"ct_min_at_scaffold\": timeDifferenceMinutes\n                }\n            }\n        ).then((result) => {\n            node.warn(\"Update part production record success!\");\n        }).catch((error) => {\n            node.warn(error);\n        });\n\n    }\n\n    const newZone = {\n        zone_number: zoneEnum.ZONE_12.index,\n        zone_name: zoneEnum.ZONE_12.value,\n        entry_time: new Date(),\n        exit_time: null,\n        blocks: []\n    }\n\n    const newBlock = {\n        block_number: 1,\n        entry_time: new Date(),\n        exit_time: null\n    }\n    newZone.blocks.push(newBlock);\n    result.zones.push(newZone);\n    result.current_zone = zoneEnum.ZONE_12.index;\n    result.current_block = 1;\n    // node.warn(result);\n    await db.collection(collectionEnum.PRODUCTION_DATA).updateOne(\n        { _id: result._id, },\n        {\n            $set: {\n                \"zones\": result.zones,\n                \"current_zone\": zoneEnum.ZONE_12.index,\n                \"current_block\": 1\n            }\n        }\n    ).then((result) => {\n        node.warn(`Update new zone (${zoneEnum.ZONE_12.index}) success!`);\n    }).catch((error) => {\n        node.warn(error);\n    });\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 160,
        "wires": [
            [
                "70172fba07fd12f0"
            ]
        ]
    },
    {
        "id": "256092ec7710614f",
        "type": "semaphore-take",
        "z": "2bc316e725c3638f",
        "config": "1f4b221281101740",
        "name": "",
        "x": 400,
        "y": 160,
        "wires": [
            [
                "c71fb5f36194b4c5"
            ]
        ]
    },
    {
        "id": "70172fba07fd12f0",
        "type": "semaphore-leave",
        "z": "2bc316e725c3638f",
        "config": "1f4b221281101740",
        "name": "",
        "x": 910,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "bdc45e6be8dc42d5",
        "type": "catch",
        "z": "2bc316e725c3638f",
        "name": "",
        "scope": null,
        "uncaught": false,
        "x": 580,
        "y": 240,
        "wires": [
            [
                "42a64c3246f0e239"
            ]
        ]
    },
    {
        "id": "42a64c3246f0e239",
        "type": "function",
        "z": "2bc316e725c3638f",
        "name": "msg",
        "func": "node.warn(msg);\nnode.warn(JSON.stringify(msg));",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 750,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "c56e8460852529d6",
        "type": "function",
        "z": "ed16bca66bbf3ac0",
        "name": "Update weight",
        "func": "const logger = global.get('loggerInfo');\nconst db = global.get(\"connetion_mongo\");\nconst moment = global.get('moment_timezone');\nconst zoneEnum = global.get(\"ZoneEnum\");\nconst collectionEnum = global.get(\"CollectionEnum\");\nconst lineEnum = global.get(\"LineEnum\");\nconst preAddObjectCheck = global.get(\"preAddObjectCheck\")\nconst byPassEnum = global.get(\"ByPassEnum\");\nconst saveQrCode = global.get('saveQrCode');\nconst calculateTotalWorkMinutes = global.get('calculateTotalWorkMinutes');\nconst weight = parseFloat(msg.payload);\nconst calculateCT = global.get('calculateCT');\ntry {\n    const results = await db.collection(collectionEnum.PRODUCTION_DATA).find(\n        {\n            current_zone: zoneEnum.ZONE_12.index,\n            is_active: false,\n            weight: null,\n            exit_time: { $ne: null }\n        }).sort({ exit_time: 1 }).toArray();\n    // node.warn(results);\n    if (results.length === 0) {\n        logger(\"\",\"Cannot update weight because no data found.\");\n        return msg;\n    }\n    const result = results[0];\n    const qr_data = result.qr_data_detail.qr_code;\n    await db.collection(collectionEnum.PRODUCTION_DATA).updateOne(\n        { _id: result._id },\n        {\n            $set: {\n                \"weight\": weight\n            }\n        }\n    );\n    logger(result?.qr_data_detail?.qr_code, `Update weight:${weight} QR:${qr_data} success!`);\n\n    const entryTime = moment(result.exit_time);\n    const exitTime = moment();\n    // const timeDifferenceMinutes = exitTime.diff(entryTime, 'minutes');\n    const timeDifferenceMinutes = await calculateTotalWorkMinutes(entryTime, exitTime);\n    await db.collection(collectionEnum.PART_PRODUCTION_RECORDS).updateOne(\n        { qr_code: result.qr_data_detail.qr_code },\n        {\n            $set: {\n                \"ct_min_at_weight\": timeDifferenceMinutes,\n                \"part_finish_date_time\": new Date(),\n                \"weight\": weight\n            }\n        }\n    );\n    logger(result?.qr_data_detail?.qr_code, `Update part production record success!`);\n\n    const query = {\n        \"house_name\": result.qr_data_detail.data.owner_name,\n        \"house_code\": result.qr_data_detail.data.house_code,\n        \"ct_min_at_weight\": { $ne: null }\n    };\n\n    const part_result = await db.collection(collectionEnum.PART_PRODUCTION_RECORDS).find(query).toArray();\n    logger(result?.qr_data_detail?.qr_code, `if part_result.length:${part_result.length} === Number(result.qr_data_detail.data.total_units):${Number(result.qr_data_detail.data.total_units)}`);\n    if (part_result.length === Number(result.qr_data_detail.data.total_units)) {\n        const result_house = await db.collection(collectionEnum.HOUSE_PRODUCTION_RECORDS).findOne({ house_code: result.qr_data_detail.data.house_code, total_unit: result.qr_data_detail.data.total_units })\n        const entryTime = moment(result_house.entry_time);\n        const exitTime = moment();\n\n        // const timeDifferenceMinutes = exitTime.diff(entryTime, 'minutes');\n        const timeDifferenceMinutes = await calculateTotalWorkMinutes(entryTime, exitTime);\n        const ct = await calculateCT(entryTime, exitTime);\n        await db.collection(collectionEnum.HOUSE_PRODUCTION_RECORDS).updateOne(\n            {\n                house_code: result.qr_data_detail.data.house_code,\n                total_unit: result.qr_data_detail.data.total_units\n            },\n            {\n                $set: {\n                    \"all_part_finish_date_time\": new Date(),\n                    \"duration\": timeDifferenceMinutes,\n                    \"ct\": ct,\n                }\n            }\n        );\n        logger(result?.qr_data_detail?.qr_code, `Update duration house production record success!`);\n\n        //Update CT part production records\n        await db.collection(collectionEnum.PART_PRODUCTION_RECORDS).updateMany(\n            {\n                house_code: result.qr_data_detail.data.house_code,\n                total_unit: result.qr_data_detail.data.total_units\n            },\n            {\n                $set: {\n                    \"ct\": ct\n                }\n            }\n        );\n        logger(result?.qr_data_detail?.qr_code, `Update CT part production record success!`);\n    } {\n        const houseRecord = await db.collection(collectionEnum.HOUSE_PRODUCTION_RECORDS).findOne({ house_code: result.qr_data_detail.data.house_code });\n        await db.collection(collectionEnum.HOUSE_PRODUCTION_RECORDS).updateOne(\n            {\n                house_code: result.qr_data_detail.data.house_code,\n            },\n            {\n                $set: {\n                    \"unit_finish\": houseRecord.unit_finish + 1,\n                }\n            }\n        );\n        logger(result?.qr_data_detail?.qr_code, `update unit_finish house production record success!`);\n    }\n    return msg;\n\n} catch (error) {\n    node.error(\"Update weight error message\", error);\n    return msg;\n};\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 200,
        "wires": [
            [
                "0e74801852419574"
            ]
        ]
    },
    {
        "id": "c5e135fe5f01c587",
        "type": "semaphore-take",
        "z": "ed16bca66bbf3ac0",
        "config": "71c2e3771d24a4a4",
        "name": "",
        "x": 300,
        "y": 200,
        "wires": [
            [
                "c56e8460852529d6"
            ]
        ]
    },
    {
        "id": "0e74801852419574",
        "type": "semaphore-leave",
        "z": "ed16bca66bbf3ac0",
        "config": "71c2e3771d24a4a4",
        "name": "",
        "x": 750,
        "y": 200,
        "wires": [
            []
        ]
    },
    {
        "id": "29aff7a8f62a4263",
        "type": "catch",
        "z": "ed16bca66bbf3ac0",
        "name": "",
        "scope": null,
        "uncaught": false,
        "x": 380,
        "y": 300,
        "wires": [
            []
        ]
    },
    {
        "id": "52483ac0c7e765bd",
        "type": "function",
        "z": "ed16bca66bbf3ac0",
        "name": "Update weight",
        "func": "node.warn(JSON.stringify(msg));",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 580,
        "y": 300,
        "wires": [
            []
        ]
    },
    {
        "id": "17f11bfc1a49e8e1",
        "type": "function",
        "z": "3b00f01717289024",
        "name": "end of production process",
        "func": "const logger = global.get('loggerInfo');\nconst db = global.get(\"connetion_mongo\");\nconst moment = global.get('moment_timezone');\nconst zoneEnum = global.get(\"ZoneEnum\");\nconst collectionEnum = global.get(\"CollectionEnum\");\nconst lineEnum = global.get(\"LineEnum\");\nconst preAddObjectCheck = global.get(\"preAddObjectCheck\")\nconst byPassEnum = global.get(\"ByPassEnum\");\nconst saveQrCode = global.get('saveQrCode');\n//cross zone \nconst endCrossZone = global.get('endCrossZone');\nconst updatePartProductionZone = global.get('updatePartProductionZone');\nconst addCrossZone = global.get('addCrossZone');\nconst findBlockEmpty = global.get('findBlockEmpty');\nconst newObjectInZone = global.get('newObjectInZone');\nconst saveLogCrossZone = global.get('saveLogCrossZone');\n\nconst qrData = msg.qrData;\nconst calculateTotalWorkMinutes = global.get('calculateTotalWorkMinutes');\n\nlogger(qrData.qr_code, `Start end of production process`)\nawait updateZoneObject(zoneEnum.ZONE_12.index)\nlogger(qrData.qr_code, `End end of production process`)\nreturn msg;\n\n\nasync function updateZoneObject(zoneIndex) {\n    node.log(`updateZoneObject zone ${zoneIndex}`);\n    let results = [];\n    //find item in zone 12\n    const query = {\n        \"is_active\": true,\n        \"current_zone\": zoneIndex,\n        \"qr_data_detail.qr_code\": msg.qrData.qr_code\n    }\n    results = await db.collection(collectionEnum.PRODUCTION_DATA).find(query).toArray();\n\n    if (results.length === 0) {\n        //find cross zone\n        const query = {\n            \"is_active\": true,\n            \"qr_data_detail.qr_code\": msg.qrData.qr_code\n        }\n        const result = await db.collection(collectionEnum.PRODUCTION_DATA).findOne(query);\n        //validate zone\n        if (!result) {\n            node.warn(\"Cannot add object by pass 2 (zone 8) because the QR code does not match in zone 7.\");\n            msg.statusCode = 500;\n            msg.payload = {\n                \"code\": \"ERR_9999\",\n                \"message\": \"ระบบไม่สามารถดำเนินการได้\",\n                \"data\": `Cannot add object by pass 2 (zone 8)because the QR code does not match in zone 7.`\n            };\n            return msg;\n        } else {\n            //update cross zone\n            const currentZone = result.current_zone;\n            //case 2 -> add3 -> add5 -> add6 -> add7 -> add8 -> add9 -> add10 -> add11 -> add12\n            if (currentZone === 2) {\n                //end zone 2\n                await endCrossZone(result, zoneEnum.ZONE_2.index, \"ct_min_at_mj\")\n                //add zone 3\n                await addCrossZone(result, zoneEnum.ZONE_3.index, zoneEnum.ZONE_3.value, \"ct_min_at_buffer\")\n                //add zone 5\n                await addCrossZone(result, zoneEnum.ZONE_5.index, zoneEnum.ZONE_5.value, \"ct_min_at_ew\")\n                //add zone 6\n                await addCrossZone(result, zoneEnum.ZONE_6.index, zoneEnum.ZONE_6.value, \"ct_min_at_ee_in\")\n                //add zone 7\n                await addCrossZone(result, zoneEnum.ZONE_7.index, zoneEnum.ZONE_7.value, \"ct_min_at_iwpt\")\n                //add zone 8\n                await addCrossZone(result, zoneEnum.ZONE_8.index, zoneEnum.ZONE_8.value, \"ct_min_at_bypass2\")\n                //add zone 9\n                await addCrossZone(result, zoneEnum.ZONE_9.index, zoneEnum.ZONE_9.value, \"ct_min_at_door\")\n                //add zone 10\n                await addCrossZone(result, zoneEnum.ZONE_10.index, zoneEnum.ZONE_10.value, \"ct_min_at_window\")\n                //add zone 11\n                await addCrossZone(result, zoneEnum.ZONE_11.index, zoneEnum.ZONE_11.value, \"ct_min_at_scaffold\")\n                //add zone 12\n                await addCrossZone(result, zoneEnum.ZONE_12.index, zoneEnum.ZONE_12.value, \"ct_min_at_loading\")\n            }\n            //case 3 -> add5 -> add6 -> add7 -> add8 -> add9 -> add10 -> add11 -> add12\n            if (currentZone === 3) {\n                //end zone 3\n                await endCrossZone(result, zoneEnum.ZONE_3.index, \"ct_min_at_buffer\")\n                //add zone 5\n                await addCrossZone(result, zoneEnum.ZONE_5.index, zoneEnum.ZONE_5.value, \"ct_min_at_ew\")\n                //add zone 6\n                await addCrossZone(result, zoneEnum.ZONE_6.index, zoneEnum.ZONE_6.value, \"ct_min_at_ee_in\")\n                //add zone 7\n                await addCrossZone(result, zoneEnum.ZONE_7.index, zoneEnum.ZONE_7.value, \"ct_min_at_iwpt\")\n                //add zone 8\n                await addCrossZone(result, zoneEnum.ZONE_8.index, zoneEnum.ZONE_8.value, \"ct_min_at_bypass2\")\n                //add zone 9\n                await addCrossZone(result, zoneEnum.ZONE_9.index, zoneEnum.ZONE_9.value, \"ct_min_at_door\")\n                //add zone 10\n                await addCrossZone(result, zoneEnum.ZONE_10.index, zoneEnum.ZONE_10.value, \"ct_min_at_window\")\n                //add zone 11\n                await addCrossZone(result, zoneEnum.ZONE_11.index, zoneEnum.ZONE_11.value, \"ct_min_at_scaffold\")\n                //add zone 12\n                await addCrossZone(result, zoneEnum.ZONE_12.index, zoneEnum.ZONE_12.value, \"ct_min_at_loading\")\n            }\n            //case 4 -> add5 -> add6 -> add7 -> add8 -> add9 -> add10 -> add11 -> add12\n            if (currentZone === 4) {\n                //end zone 4\n                await endCrossZone(result, zoneEnum.ZONE_4.index, \"ct_min_at_bypass1\")\n                //add zone 5\n                await addCrossZone(result, zoneEnum.ZONE_5.index, zoneEnum.ZONE_5.value, \"ct_min_at_ew\")\n                //add zone 6\n                await addCrossZone(result, zoneEnum.ZONE_6.index, zoneEnum.ZONE_6.value, \"ct_min_at_ee_in\")\n                //add zone 7\n                await addCrossZone(result, zoneEnum.ZONE_7.index, zoneEnum.ZONE_7.value, \"ct_min_at_iwpt\")\n                //add zone 8\n                await addCrossZone(result, zoneEnum.ZONE_8.index, zoneEnum.ZONE_8.value, \"ct_min_at_bypass2\")\n                //add zone 9\n                await addCrossZone(result, zoneEnum.ZONE_9.index, zoneEnum.ZONE_9.value, \"ct_min_at_door\")\n                //add zone 10\n                await addCrossZone(result, zoneEnum.ZONE_10.index, zoneEnum.ZONE_10.value, \"ct_min_at_window\")\n                //add zone 11\n                await addCrossZone(result, zoneEnum.ZONE_11.index, zoneEnum.ZONE_11.value, \"ct_min_at_scaffold\")\n                //add zone 12\n                await addCrossZone(result, zoneEnum.ZONE_12.index, zoneEnum.ZONE_12.value, \"ct_min_at_loading\")\n            }\n            //case 5 -> add6 -> add7 -> add8 -> add9 -> add10 -> add11 -> add12\n            if (currentZone === 5) {\n                //end zone 5\n                await endCrossZone(result, zoneEnum.ZONE_5.index, \"ct_min_at_ew\")\n                //add zone 6\n                await addCrossZone(result, zoneEnum.ZONE_6.index, zoneEnum.ZONE_6.value, \"ct_min_at_ee_in\")\n                //add zone 7\n                await addCrossZone(result, zoneEnum.ZONE_7.index, zoneEnum.ZONE_7.value, \"ct_min_at_iwpt\")\n                //add zone 8\n                await addCrossZone(result, zoneEnum.ZONE_8.index, zoneEnum.ZONE_8.value, \"ct_min_at_bypass2\")\n                //add zone 9\n                await addCrossZone(result, zoneEnum.ZONE_9.index, zoneEnum.ZONE_9.value, \"ct_min_at_door\")\n                //add zone 10\n                await addCrossZone(result, zoneEnum.ZONE_10.index, zoneEnum.ZONE_10.value, \"ct_min_at_window\")\n                //add zone 11\n                await addCrossZone(result, zoneEnum.ZONE_11.index, zoneEnum.ZONE_11.value, \"ct_min_at_scaffold\")\n                //add zone 12\n                await addCrossZone(result, zoneEnum.ZONE_12.index, zoneEnum.ZONE_12.value, \"ct_min_at_loading\")\n            }\n            //case 6 -> add7 -> add8 -> add9 -> add10 -> add11 -> add12\n            if (currentZone === 6) {\n                //end zone 6\n                await endCrossZone(result, zoneEnum.ZONE_5.index, \"ct_min_at_ee_in\")\n                //add zone 7\n                await addCrossZone(result, zoneEnum.ZONE_7.index, zoneEnum.ZONE_7.value, \"ct_min_at_iwpt\")\n                //add zone 8\n                await addCrossZone(result, zoneEnum.ZONE_8.index, zoneEnum.ZONE_8.value, \"ct_min_at_bypass2\")\n                //add zone 9\n                await addCrossZone(result, zoneEnum.ZONE_9.index, zoneEnum.ZONE_9.value, \"ct_min_at_door\")\n                //add zone 10\n                await addCrossZone(result, zoneEnum.ZONE_10.index, zoneEnum.ZONE_10.value, \"ct_min_at_window\")\n                //add zone 11\n                await addCrossZone(result, zoneEnum.ZONE_11.index, zoneEnum.ZONE_11.value, \"ct_min_at_scaffold\")\n                //add zone 12\n                await addCrossZone(result, zoneEnum.ZONE_12.index, zoneEnum.ZONE_12.value, \"ct_min_at_loading\")\n            }\n            //case 7 -> add8 -> add9 -> add10 -> add11 -> add12\n            if (currentZone === 7) {\n                //end zone 7\n                await endCrossZone(result, zoneEnum.ZONE_7.index, \"ct_min_at_iwpt\")\n                //add zone 8\n                await addCrossZone(result, zoneEnum.ZONE_8.index, zoneEnum.ZONE_8.value, \"ct_min_at_bypass2\")\n                //add zone 9\n                await addCrossZone(result, zoneEnum.ZONE_9.index, zoneEnum.ZONE_9.value, \"ct_min_at_door\")\n                //add zone 10\n                await addCrossZone(result, zoneEnum.ZONE_10.index, zoneEnum.ZONE_10.value, \"ct_min_at_window\")\n                //add zone 11\n                await addCrossZone(result, zoneEnum.ZONE_11.index, zoneEnum.ZONE_11.value, \"ct_min_at_scaffold\")\n                //add zone 12\n                await addCrossZone(result, zoneEnum.ZONE_12.index, zoneEnum.ZONE_12.value, \"ct_min_at_loading\")\n            }\n            //case 8 -> add9 -> add10 -> add11 -> add12\n            if (currentZone === 8) {\n                //end zone 8\n                await endCrossZone(result, zoneEnum.ZONE_8.index, \"ct_min_at_bypass2\")\n                //add zone 9\n                await addCrossZone(result, zoneEnum.ZONE_9.index, zoneEnum.ZONE_9.value, \"ct_min_at_door\")\n                //add zone 10\n                await addCrossZone(result, zoneEnum.ZONE_10.index, zoneEnum.ZONE_10.value, \"ct_min_at_window\")\n                //add zone 11\n                await addCrossZone(result, zoneEnum.ZONE_11.index, zoneEnum.ZONE_11.value, \"ct_min_at_scaffold\")\n                //add zone 12\n                await addCrossZone(result, zoneEnum.ZONE_12.index, zoneEnum.ZONE_12.value, \"ct_min_at_loading\")\n            }\n            //case 9 -> add10 -> add11 -> add12\n            if (currentZone === 9) {\n                //end zone 9\n                await endCrossZone(result, zoneEnum.ZONE_9.index, \"ct_min_at_door\")\n                //add zone 10\n                await addCrossZone(result, zoneEnum.ZONE_10.index, zoneEnum.ZONE_10.value, \"ct_min_at_window\")\n                //add zone 11\n                await addCrossZone(result, zoneEnum.ZONE_11.index, zoneEnum.ZONE_11.value, \"ct_min_at_scaffold\")\n                //add zone 12\n                await addCrossZone(result, zoneEnum.ZONE_12.index, zoneEnum.ZONE_12.value, \"ct_min_at_loading\")\n            }\n            //case 10 -> add11 -> add12\n            if (currentZone === 10) {\n                //end zone 10\n                await endCrossZone(result, zoneEnum.ZONE_10.index, \"ct_min_at_window\")\n                //add zone 11\n                await addCrossZone(result, zoneEnum.ZONE_11.index, zoneEnum.ZONE_11.value, \"ct_min_at_scaffold\")\n                //add zone 12\n                await addCrossZone(result, zoneEnum.ZONE_12.index, zoneEnum.ZONE_12.value, \"ct_min_at_loading\")\n            }\n            //case 11 -> add12\n            if (currentZone === 11) {\n                //end zone 11\n                await endCrossZone(result, zoneEnum.ZONE_11.index, \"ct_min_at_scaffold\")\n                //add zone 12\n                await addCrossZone(result, zoneEnum.ZONE_12.index, zoneEnum.ZONE_12.value, \"ct_min_at_loading\")\n            }\n            //case 12 \n            if (currentZone === 12) {\n                //end zone 12\n                await endCrossZone(result, zoneEnum.ZONE_12.index, \"ct_min_at_loading\")\n            }\n            //save log cross zone \n            await saveLogCrossZone(qrData.qr_code, currentZone, zoneEnum.ZONE_12.index)\n            //save qr code\n            await saveQrCode(msg.tempPayload);\n            return msg;\n        }\n    }\n    //save QR\n    await saveQrCode(msg.tempPayload);\n    const result = results[0];\n\n    for (const zone of result.zones) {\n        if (zone.zone_number === zoneIndex) {\n            zone.exit_time = new Date();\n            zone.blocks[result.current_block - 1].exit_time = new Date();\n            // node.warn(zone);\n\n            await db.collection(collectionEnum.PRODUCTION_DATA).updateOne(\n                { _id: result._id, \"zones.zone_number\": zone.zone_number },\n                {\n                    $set: {\n                        \"is_active\": false,\n                        \"exit_time\": new Date(),\n                        \"zones.$\": zone\n                    }\n                }\n            ).then((result) => {\n                node.warn(`End process QR:${msg.qrData.qr_code}`);\n            }).catch((error) => {\n                node.warn(error);\n            });\n\n            const entryTime = moment(zone.entry_time);\n            const exitTime = moment(zone.exit_time);\n            // const timeDifferenceMinutes = exitTime.diff(entryTime, 'minutes');\n            const timeDifferenceMinutes = await calculateTotalWorkMinutes(entryTime, exitTime);\n            await db.collection(collectionEnum.PART_PRODUCTION_RECORDS).updateOne(\n                { qr_code: result.qr_data_detail.qr_code },\n                {\n                    $set: {\n                        \"ct_min_at_loading\": timeDifferenceMinutes\n                    }\n                }\n            ).then((result) => {\n                node.warn(\"Update part production record success!\");\n            }).catch((error) => {\n                node.warn(error);\n            });\n\n        }\n\n    }\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 220,
        "wires": [
            [
                "42623bfeb08be299"
            ]
        ]
    },
    {
        "id": "f58e9f7da9ff0a6f",
        "type": "semaphore-take",
        "z": "3b00f01717289024",
        "config": "1d0a468d587f24b5",
        "name": "",
        "x": 360,
        "y": 220,
        "wires": [
            [
                "17f11bfc1a49e8e1"
            ]
        ]
    },
    {
        "id": "42623bfeb08be299",
        "type": "semaphore-leave",
        "z": "3b00f01717289024",
        "config": "1d0a468d587f24b5",
        "name": "",
        "x": 890,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "c37e8fbfc1ed0644",
        "type": "catch",
        "z": "3b00f01717289024",
        "name": "",
        "scope": null,
        "uncaught": false,
        "x": 560,
        "y": 300,
        "wires": [
            [
                "9b8cf6d7844e75ee"
            ]
        ]
    },
    {
        "id": "9b8cf6d7844e75ee",
        "type": "function",
        "z": "3b00f01717289024",
        "name": "msg",
        "func": "node.warn(msg);\nnode.warn(JSON.stringify(msg));",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 300,
        "wires": [
            []
        ]
    },
    {
        "id": "25d63ab968f601ad",
        "type": "function",
        "z": "4f93f103a4819898",
        "name": "Validate time",
        "func": "const moment = global.get('moment_timezone');\nconst morningStart = global.get('timeMorningStart');\nconst morningEnd = global.get('timeMorningEnd');\nconst afternoonStart = global.get('timeAfternoonStart');\nconst afternoonEnd = global.get('timeAfternoonEnd');\nconst overtimeStart = global.get('timeOvertimeStart');\nconst overtimeEnd = global.get('timeOvertimeEnd');\nconst daysOfWork = global.get('daysOfWork');\nconst overtimeStatus = global.get('timeOvertimeStatus');\n\nif (daysOfWork === null || daysOfWork === undefined) {\n    const db = global.get(\"connetion_mongo\");\n    const collectionEnum = global.get(\"CollectionEnum\");\n    const collection = db.collection(collectionEnum.WORK_SCHEDULE);\n    const results = await collection.find({}, { projection: { day: 1, is_active: 1 } }).toArray();\n    global.set(`daysOfWork`, results);\n    await new Promise(resolve => setTimeout(resolve, 2000));\n} else {\n    const today = moment().format('dddd');\n    const isActiveToday = daysOfWork.some(item => item.day === today && item.is_active);\n\n    if (!isActiveToday) {\n        msg.payload = false;\n    } else if (moment() >= morningStart && moment() <= morningEnd) {\n        msg.payload = true;\n        return msg;\n    } else if (moment() >= afternoonStart && moment() <= afternoonEnd) {\n        msg.payload = true;\n        return msg;\n    } else if (moment() >= overtimeStart && moment() <= overtimeEnd) {\n        if (overtimeStatus) {\n            msg.payload = true;\n            return msg;\n        } else {\n            msg.payload = false;\n        }\n\n    } else {\n        msg.payload = false;\n    }\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "d3b377035e671c96",
        "type": "inject",
        "z": "3b1fe48eb8c3d4ed",
        "name": "Inject once",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "0.2",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 250,
        "y": 100,
        "wires": [
            [
                "c063950189fb9aa9",
                "fdc559e597817610",
                "99cc2f2ed389e041",
                "3356d20f9807a13c",
                "89018b8cf2ecac50",
                "c1e306047672432d"
            ]
        ]
    },
    {
        "id": "c063950189fb9aa9",
        "type": "function",
        "z": "3b1fe48eb8c3d4ed",
        "name": "Connect MongoDB",
        "func": "const MongoClient = global.get(\"mongodb\").MongoClient;\nconst dotenv = global.get(\"env\").config().parsed;\nconst mongoUri = global.get(\"mongoUri\")\n\n// กำหนด URL ของ MongoDB และชื่อของฐานข้อมูลที่ต้องการใช้งาน\n// const url = 'mongodb+srv://admin:cbpxjUkYnA8WKTd9@cluster0.mdmqo.mongodb.net/dev_production_analysis_new?retryWrites=true&w=majority';\n// const dbName = 'dev_production_analysis';\nconst dbName = dotenv.DB_NAME;\n\n// สร้าง MongoClient และเชื่อมต่อกับฐานข้อมูล MongoDB\nconst client = new MongoClient(mongoUri, { useUnifiedTopology: true });\n\nasync function connectToDatabase() {\n    try {\n        // เปิดการเชื่อมต่อกับ MongoDB\n        await client.connect();\n        node.warn('Connected to MongoDB');\n\n        // เลือกใช้งานฐานข้อมูลที่ต้องการ\n        const db = client.db(dbName);\n        global.set(\"connetion_mongo\", db)\n        // เขียนโค้ดดำเนินการกับฐานข้อมูล MongoDB ต่อไป...\n    } catch (error) {\n        node.error('Error connecting to MongoDB:' + error);\n    }\n}\n\n// เรียกใช้งานฟังก์ชัน connectToDatabase เพื่อเริ่มต้นการเชื่อมต่อกับ MongoDB\nawait connectToDatabase();\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 180,
        "wires": [
            [
                "352bfaa115181bda",
                "4d09cb5f11720c81"
            ]
        ]
    },
    {
        "id": "fdc559e597817610",
        "type": "function",
        "z": "3b1fe48eb8c3d4ed",
        "name": "setEnum",
        "func": "const CollectionEnum = {\n    QR_DATA: 'qr_data',\n    ZONE1_PRODUCTION_DATA: 'zone1_production_data',\n    PRODUCTION_DATA: 'production_data',\n    WORK_SCHEDULE: 'work_schedule',\n    HOUSE_PRODUCTION_RECORDS: 'house_production_records',\n    PART_PRODUCTION_RECORDS: 'part_production_records',\n    JWT_TOKEN: 'jwt_tokens',\n    USERS: 'users',\n    HISTORY_WORK_SCHEDULE:'history_work_schedule',\n    LOG_INSTALLATION_DATE: 'log_installation_date',\n    LOG_MODBUS: 'log_modbus',\n    LOG_CROSS_ZONE: 'log_cross_zone'\n};\nglobal.set('CollectionEnum', CollectionEnum);\n\nconst ZoneEnum = {\n    ZONE_1: { value: 'Zone1', index: 1 },\n    ZONE_2: { value: 'Zone2', index: 2 },\n    ZONE_3: { value: 'Zone3', index: 3 },\n    ZONE_4: { value: 'Zone4', index: 4 },//Bypass 1\n    ZONE_5: { value: 'Zone5', index: 5 },\n    ZONE_6: { value: 'Zone6', index: 6 },\n    ZONE_7: { value: 'Zone7', index: 7 },\n    ZONE_8: { value: 'Zone8', index: 8 },\n    ZONE_9: { value: 'Zone9', index: 9 },\n    ZONE_10: { value: 'Zone10', index: 10 },\n    ZONE_11: { value: 'Zone11', index: 11 },\n    ZONE_12: { value: 'Zone12', index: 12 },\n};\nglobal.set('ZoneEnum', ZoneEnum);\n\nconst ByPassEnum = {\n    BY_PASS_1: { value: 'ByPass1', index: 1 },\n    BY_PASS_2: { value: 'ByPass2', index: 2 },\n\n};\nglobal.set('ByPassEnum', ByPassEnum);\n\nconst LineEnum = {\n    LINE_CEILING: { value: 'LineCeiling', index: 1 },\n    LINE_FLOOR: { value: 'LineFloor', index: 2 },\n};\nglobal.set('LineEnum', LineEnum);\n\nconst SourceEnum = {\n    SCHEDULE: 'schedule',\n    FACTORY: 'factory'\n};\nglobal.set('SourceEnum', SourceEnum);\n\n\nconst QrLocationEnum = {\n    QR_MJ_IN: { value: 'QR_MJ_IN', index: 1 },\n    QR_EW_IN: { value: 'QR_EW_IN', index: 2 },\n    QR_IWPT_OUT: { value: 'QR_IWPT_OUT', index: 3 },\n    QR_BR_STR_IN: { value: 'QR_BR_STR_IN', index: 4 },\n    QR_LOADING_OUT: { value: 'QR_LOADING_OUT', index: 5 },\n};\nglobal.set('QrLocationEnum', QrLocationEnum);\n\n\nconst StatusAddressEnum = {\n    STATUS_ADDRESS_CELLING: 'status address celling',\n    STATUS_ADDRESS_FLOOR: 'status address floor',\n    STATUS_ADDRESS_ST2: 'status address ST2',\n    STATUS_ADDRESS_EE_IN: 'status address EE in',\n    STATUS_ADDRESS_IWPT_IN: 'status address IWPT in',\n    STATUS_ADDRESS_DOOR_OUT: 'status address door out',\n    STATUS_ADDRESS_WINDOW_OUT: 'status address window out',\n    STATUS_ADDRESS_SCAFFOLD_OUT: 'status address scaffold out',\n    STATUS_ADDRESS_WEIGHT: 'status address weight',\n}\n\nglobal.set('StatusAddressEnum', StatusAddressEnum);",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "aaa66cae8e61f673",
        "type": "function",
        "z": "3b1fe48eb8c3d4ed",
        "name": "setTimeMoveItem LineA",
        "func": "const moment = global.get('moment_timezone');\nconst db = global.get(\"connetion_mongo\");\nconst collectionEnum = global.get(\"CollectionEnum\");\nconst timeMorningStart = global.get('timeMorningStart');\nconst timeMorningEnd = global.get('timeMorningEnd');\nconst timeAfternoonStart = global.get('timeAfternoonStart');\nconst timeAfternoonEnd = global.get('timeAfternoonEnd');\nconst timeOvertimeStart = global.get('timeOvertimeStart');\nconst timeOvertimeEnd = global.get('timeOvertimeEnd');\nconst zoneMoveTime = global.get('ZoneMoveTime');\n\nconst currentTime = moment();\nlet timeMove = 9999;\nlet queryCondition = null; // เงื่อนไขการค้นหาเริ่มต้น\nlet timestart = moment();\n// node.warn(`currentTime:${currentTime}`);\n// node.warn(`timeOvertimeStart:${timeOvertimeStart}`);\nif (currentTime.isAfter(timeMorningStart)) {\n    // node.warn(`timeMorningStart:${timeMorningStart}`);\n    // queryCondition = { entry_time: { $gt: moment(timeMorningStart).toDate(), $lt: moment(timeMorningEnd).toDate() } };\n    queryCondition = { entry_time: { $gt: moment(timeMorningStart).toDate() } };\n    timestart = timeMorningStart;\n}\n// node.warn(queryCondition);\nif (!queryCondition){\n    node.warn(`Not in working hours...`);\n    return\n}\n// node.warn(queryCondition);\nconst result = await db.collection(collectionEnum.PRODUCTION_DATA).find(queryCondition).toArray();\n// node.warn(result);\nif (result?.length > 0 ) {\n    // node.warn(result);\n    //แก้ไขเปลี่ยนไปใช้ startdate ของ preriod นั้น diff กับเวลาเข้าตัวล่าสุด แล้วหารจำนวนทั้งหมด\n    // node.warn(`timestart:${timestart}`);\n    if (moment(result[0].entry_time).isAfter(timestart)) {\n        const timeDifference = moment(result[0].entry_time).diff(timestart);\n        const durationInMinutes = moment.duration(timeDifference).asMinutes();\n        timeMove = Math.floor(durationInMinutes / result.length);\n    }\n\n}\n//Fix for test\n// timeMove = 1\nnode.warn(`timeMoveALine:${timeMove}`);\nzoneMoveTime['zone1MoveTime'] = timeMove;\nzoneMoveTime['zone2MoveTime'] = timeMove;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 800,
        "wires": [
            []
        ]
    },
    {
        "id": "352bfaa115181bda",
        "type": "function",
        "z": "3b1fe48eb8c3d4ed",
        "name": "Global Function",
        "func": "const db = global.get(\"connetion_mongo\");\n// const moment = global.get('moment_timezone');\nconst dotenv = global.get(\"env\").config().parsed;\nconst zoneEnum = global.get(\"ZoneEnum\");\nconst lineEnum = global.get(\"LineEnum\");\nconst collectionEnum = global.get(\"CollectionEnum\");\nconst zoneMoveTime = global.get('ZoneMoveTime');\nconst maxBlockPerZone = global.get('maxBlockPerZone');\nconst maxBlock = 99;\n\n// ======================= Init moment ==========================//\nconst moment = global.get('moment');\nconst timezone = 'Asia/Bangkok';\n\nmoment.tz.setDefault(timezone);\nglobal.set('moment_timezone', moment);\n// ======================= Logger ===========================//\nconst loggerInfo = (qr, message) => {\n    node.log(`${qr}|${message}`);\n}\nglobal.set('loggerInfo', loggerInfo);\n// ======================= Zone other ===========================//\nconst preAddObjectCheck = async (zoneIndex, startIndex) => {\n    // node.warn(`preAddObjectCheck(zoneIndex:${zoneIndex} ,startIndex${startIndex})`);\n    try {\n        let listNextBlocks = await findNextBlockZone(zoneIndex, startIndex);\n        // node.warn(`findNextBlockZone:${listNextBlocks}`);\n        // if (zoneIndex === 5) node.warn(`listNextBlocks:${listNextBlocks}`);\n        for (const result of listNextBlocks) {\n            for (const zone of result.zones) {\n                if (zone.zone_number !== zoneIndex) {\n                    continue;\n                }\n                const lastBlock = zone.blocks[zone.blocks.length - 1].block_number;\n                const newBlockNumber = lastBlock + 1;\n                zone.blocks[zone.blocks.length - 1].exit_time = new Date();\n\n                // Create new block\n                const newBlock = {\n                    block_number: newBlockNumber,\n                    entry_time: new Date(),\n                    exit_time: null\n                };\n                // const newBlocks = zone.blocks.slice();\n                zone.blocks.push(newBlock);\n                await db.collection(collectionEnum.PRODUCTION_DATA).updateOne(\n                    { _id: result._id, \"zones.zone_number\": zone.zone_number },\n                    {\n                        $set: {\n                            current_block: newBlockNumber,\n                            \"zones.$.blocks\": zone.blocks\n                        }\n                    }\n                ).then((result) => {\n                    node.warn(`Update newBlock(${newBlockNumber}) zome(${zoneIndex}) success!`);\n                }).catch((error) => {\n                    node.warn(error);\n                });\n            }\n        }\n    } catch (error) {\n        node.warn(error);\n    }\n}\n\nasync function findNextBlockZone(zone, startIndex, unitType) {\n    // node.warn(`findNextBlockZone(zone:${zone}, startIndex:${startIndex})`);\n    const maxBlock = await getmaxBlockPerZone(zone);\n    let results = [];\n    if (zone === 8) {\n        let maxBlockType = maxBlock[unitType];\n        for (let index = startIndex; index <= maxBlockType; index++) {\n            const query = {\n                \"is_active\": true,\n                \"current_zone\": zone,\n                \"current_block\": index,\n                \"unit_type\": unitType\n            }\n            const result = await db.collection(collectionEnum.PRODUCTION_DATA).find(query).toArray();\n            if (result.length === 0) {\n                // node.warn(\"Break!!\");\n                return results; // คืนค่าผลลัพธ์ที่ได้ก่อนหยุดการทำงาน\n            }\n            results.push(result[0])\n            if (index === maxBlock) {\n                results = [];\n            }\n        }\n        return results;\n    } else {\n        for (let index = startIndex; index <= maxBlock; index++) {\n            const query = {\n                \"is_active\": true,\n                \"current_zone\": zone,\n                \"current_block\": index\n            }\n            const result = await db.collection(collectionEnum.PRODUCTION_DATA).find(query).toArray();\n            if (result.length === 0) {\n                // node.warn(\"Break!!\");\n                return results; // คืนค่าผลลัพธ์ที่ได้ก่อนหยุดการทำงาน\n            }\n            results.push(result[0])\n            if (index === maxBlock) {\n                results = [];\n            }\n        }\n        return results;\n    }\n}\n\nglobal.set('preAddObjectCheck', preAddObjectCheck);\n\n\n// ======================= Zone1 ===========================//\nconst preAddObjectCheckZone1 = async (lineNumber, startIndex) => {\n    let listNextBlocks = await findNextBlockZone1(lineNumber, startIndex);\n    // listNextBlocks.forEach(async (result) => {\n    for (const result of listNextBlocks) {\n        const lastBlock = result.blocks[result.blocks.length - 1].block_number;\n        const newBlockNumber = lastBlock + 1;\n\n        // Update exit_time of last block\n        result.blocks[result.blocks.length - 1].exit_time = new Date();\n\n        // Create new block\n        const newBlock = {\n            block_number: newBlockNumber,\n            entry_time: new Date(),\n            exit_time: null\n        };\n\n        // Push the new block to the blocks array\n        result.blocks.push(newBlock);\n\n        // Update the document in the collection with the new blocks and current_block value\n        await db.collection(collectionEnum.ZONE1_PRODUCTION_DATA).updateOne({ _id: result._id }, {\n            $set: {\n                blocks: result.blocks,\n                current_block: newBlockNumber\n            }\n        });\n    };\n};\n\n\nasync function findNextBlockZone1(lineNumber, startIndex) {\n    let results = [];\n    const maxBlock = await getmaxBlockPerZone(1);\n    for (let index = startIndex; index <= await maxBlock; index++) {\n        const query = {\n            \"is_active\": true,\n            \"current_block\": index,\n            \"lines.line_number\": lineNumber\n        }\n\n        const result = await db.collection(collectionEnum.ZONE1_PRODUCTION_DATA).find(query).toArray();\n        // node.warn(result);\n        if (result.length === 0) {\n            // node.warn(\"Break!!\");\n            return results; // คืนค่าผลลัพธ์ที่ได้ก่อนหยุดการทำงาน\n        }\n        results.push(result[0])\n        if (index === maxBlock) {\n            results = [];\n        }\n    }\n\n    return results;\n}\n\nglobal.set('preAddObjectCheckZone1', preAddObjectCheckZone1);\n\n\nconst compareDateTime = async (zone) => {\n    let maxBlock = await getmaxBlockPerZone(zone);\n    const timeMove = await getTimeMove(zone);\n    try {\n        const pipeline = [\n            { $match: { current_zone: zone, is_active: true } },\n            { $unwind: \"$zones\" },\n            { $unwind: \"$zones.blocks\" },\n            { $match: { \"zones.blocks.exit_time\": null, \"zones.zone_number\": zone } },\n            { $sort: { \"zones.blocks.entry_time\": 1 } },\n        ];\n\n        const results = await db.collection(collectionEnum.PRODUCTION_DATA).aggregate(pipeline).toArray();\n        const block_all = results.map(item => item.current_block);\n        maxBlock = await findPossibleMax(block_all, maxBlock);\n        // node.warn(block_all);\n        if (results.length === 0) {\n            return 0;\n        }\n        for (const result of results) {\n            if (result.current_block > maxBlock) {\n                continue;\n            } else if (result.current_block === maxBlock) {\n                maxBlock -= 1;\n                continue;\n            }\n            // const entry_time = moment(result.zones.blocks.entry_time);\n            const entry_time = new Date(result.zones.blocks.entry_time);\n            // node.warn(entry_time);\n            const currentTime = new Date();\n            const timeDifferenceInMinutes = (currentTime.getTime() - entry_time.getTime()) / (1000 * 60);\n            // node.warn(`timeDifferenceInMinutes:${timeDifferenceInMinutes}`);\n            // node.warn(`timeMove:${timeMove}`);\n            if (timeDifferenceInMinutes > timeMove) {\n                // node.warn(`Zone: ${zone} ,Time difference is greater than ${timeMove} minutes`);\n                return result.current_block;\n            } else {\n                return 0;\n            }\n        }\n        return 0;\n    } catch (error) {\n        node.error(error);\n        node.error(\"compare date time zone2 error message\", error);\n    }\n}\nglobal.set('compareDateTime', compareDateTime);\n\nconst createIndexArray = async (startIndex, endIndex, value) => {\n    const indexArray = [];\n    for (let i = startIndex; i <= endIndex; i++) {\n        indexArray.push({ index: i - startIndex + 1, address: i, value });\n    }\n    return indexArray;\n};\nglobal.set('createIndexArray', createIndexArray);\n\nconst createFloatIndexArray = async (startIndex, endIndex, value) => {\n    const indexArray = [];\n    for (let i = startIndex; i <= endIndex; i += 2) {\n        indexArray.push({ index: (i - startIndex) / 2 + 1, address: i, value });\n    }\n    return indexArray;\n};\nglobal.set('createFloatIndexArray', createFloatIndexArray);\n\n//save QR \nconst saveQrCode = async (payload) => {\n    const newQrData = await getQrData(payload);\n    await db.collection(collectionEnum.QR_DATA).insertOne(newQrData);\n    return newQrData;\n}\nglobal.set('saveQrCode', saveQrCode);\n\nasync function getQrData(payload) {\n    const qrCodeData = payload.qr_code_data;\n    const location = payload.location;\n    const splitPayload = qrCodeData.split(\";\");\n    const newQrData = {\n        qr_code: qrCodeData,\n        location: location,\n        data: {\n            house_code: splitPayload[0],\n            owner_name: splitPayload[1],\n            total_units: splitPayload[2],\n            units_number: splitPayload[3],\n            type: splitPayload[4],\n            mj_plan_date: new Date(),\n            installation_date: splitPayload[5],\n            house_type: splitPayload[6],\n            unit_type: splitPayload[7],\n            size: splitPayload[8],\n            remark_b: splitPayload[9],\n            remark_r: splitPayload[10],\n        },\n        created_at: new Date(),\n        updated_at: null,\n    };\n    return newQrData;\n}\nglobal.set('getQrData', getQrData);\n\n\nconst calculateCT = async (startDate, endDate) => {\n    const dateList = [];\n    let currentDate = moment(startDate);\n\n    while (currentDate.isSameOrBefore(endDate, 'day')) {\n        dateList.push(currentDate.format('YYYY-MM-DD'));\n        currentDate.add(1, 'day');\n    }\n    const results = await db.collection(collectionEnum.HISTORY_WORK_SCHEDULE)\n        .find({\n            \"date\": { $in: dateList },\n            \"is_active\": true\n        })\n        .toArray();\n\n    // node.warn(results);\n\n    const workingDays = results.map((item) => item.date);\n\n    // // คำนวณวันที่ทำงาน\n    const workingDates = [];\n    let currentDateLoop = moment(startDate); // เริ่ม loop ที่ startDate ใหม่\n\n    while (currentDateLoop.isSameOrBefore(endDate, 'day')) {\n        const formattedDate = currentDateLoop.format(\"YYYY-MM-DD\");\n\n        if (workingDays.includes(formattedDate)) {\n            workingDates.push(formattedDate);\n        }\n        currentDateLoop.add(1, 'day');\n    }\n\n    node.warn(`วันที่ทำงาน:${workingDates.length}`);\n    return workingDates.length\n}\nglobal.set('calculateCT', calculateCT);\n\nconst calculateTotalWorkMinutes = async (startTime, endTime) => {\n    // node.warn(`calculateTotalWorkMinutes..........`);\n    // node.warn(`startTime:${startTime}`);\n    // node.warn(`endTime:${endTime}`);\n    // const startTime = moment(\"2023-09-09T16:55\");\n    // const endTime = moment(\"2023-09-10T08:12\");\n    try {\n        const dateList = [];\n        let currentDate = moment(startTime);\n\n        while (currentDate.isSameOrBefore(endTime, 'day')) {\n            dateList.push(currentDate.format('YYYY-MM-DD'));\n            currentDate.add(1, 'day');\n        }\n\n        // node.warn(dateList);\n        const result = await db.collection(collectionEnum.HISTORY_WORK_SCHEDULE)\n            .find({\n                \"date\": { $in: dateList },\n                \"is_active\": true\n            })\n            .toArray();\n\n        let totalWorkHours = 0;\n        // node.warn(result);\n        for (const dayData of result) {\n            const schedule = dayData.schedule;\n            const date = moment(dayData.date);\n            let workStart, workEnd;\n\n            for (const key in schedule) {\n                const workPeriod = schedule[key];\n                workStart = date.clone().set({\n                    'hour': workPeriod.start.hour,\n                    'minute': workPeriod.start.minute\n                });\n                workEnd = date.clone().set({\n                    'hour': workPeriod.end.hour,\n                    'minute': workPeriod.end.minute\n                });\n                if (workStart.isBefore(endTime) && workEnd.isAfter(startTime)) {\n                    if (workStart.isBefore(startTime)) {\n                        workStart = startTime.clone();\n                    }\n                    if (workEnd.isAfter(endTime)) {\n                        workEnd = endTime.clone();\n                    }\n                    totalWorkHours += workEnd.diff(workStart, 'hours', true);\n                }\n            }\n        }\n        const totalWorkMinutes = totalWorkHours * 60;\n        // node.warn(`เวลาที่ใช้ไปทั้งหมด: ${totalWorkMinutes.toFixed(2)} นาที`);\n        return totalWorkMinutes.toFixed(2);\n\n    } catch (error) {\n        node.error(error);\n    }\n}\nglobal.set('calculateTotalWorkMinutes', calculateTotalWorkMinutes);\n\nconst getTimeMove = async (zone) => {\n    switch (zone) {\n        case 1:\n            return zoneMoveTime.zone1MoveTime\n        case 2:\n            return zoneMoveTime.zone2MoveTime\n        case 3:\n            return zoneMoveTime.zone3MoveTime\n        case 4:\n            return zoneMoveTime.zone4MoveTime\n        case 5:\n            return zoneMoveTime.zone5MoveTime\n        case 6:\n            return zoneMoveTime.zone6MoveTime\n        case 7:\n            return zoneMoveTime.zone7MoveTime\n        case 8:\n            return zoneMoveTime.zone8MoveTime\n        case 9:\n            return zoneMoveTime.zone9MoveTime\n        case 10:\n            return zoneMoveTime.zone10MoveTime\n        case 11:\n            return zoneMoveTime.zone11MoveTime\n        case 12:\n            return zoneMoveTime.zone12MoveTime\n\n    }\n}\n\nconst getmaxBlockPerZone = async (zone) => {\n    let temp;\n    switch (zone) {\n        case 1:\n            return maxBlockPerZone.ZONE_1_1;\n        case 2:\n            return maxBlockPerZone.ZONE_2;\n        case 3:\n            return maxBlockPerZone.ZONE_3;\n        case 4:\n            return maxBlockPerZone.ZONE_4;\n        case 5:\n            return maxBlockPerZone.ZONE_5;\n        case 6:\n            return maxBlockPerZone.ZONE_6;\n        case 7:\n            return maxBlockPerZone.ZONE_7;\n        case 8:\n            return {\n                \"8N\": maxBlockPerZone.ZONE_8_N,\n                \"8BC\": maxBlockPerZone.ZONE_8_BC,\n                \"8R\": maxBlockPerZone.ZONE_8_R,\n            };\n        case 9:\n            return maxBlockPerZone.ZONE_9;\n        case 10:\n            return maxBlockPerZone.ZONE_10;\n        case 11:\n            return maxBlockPerZone.ZONE_11;\n        case 12:\n            return maxBlockPerZone.ZONE_12;\n        default:\n            return [null, null];\n    }\n}\n\n\nconst logModbus = async (value, address) => {\n    try {\n        const newData = {\n            value,\n            address,\n            created_at: new Date(),\n            updated_at: null\n        }\n        await db.collection(collectionEnum.LOG_MODBUS).insertOne(newData);\n    } catch (e) {\n        node.error(e)\n        node.warn(`log modbus fail value:${value} , address:${address}`);\n    }\n}\nglobal.set('logModbus', logModbus);\n// const getTempLastTimeInBlock = async (zone) => {\n//     let temp;\n//     switch (zone) {\n//         case 2:\n//             return await splitTemp(global.get(\"temp_time_zone_2\"));\n//         case 3:\n//             return await splitTemp(global.get(\"temp_time_zone_3\"));\n//         case 4:\n//             return await splitTemp(global.get(\"temp_time_zone_4\"));\n//         case 5:\n//             return await splitTemp(global.get(\"temp_time_zone_5\"));\n//         case 6:\n//             return await splitTemp(global.get(\"temp_time_zone_6\"));\n//         case 7:\n//             return await splitTemp(global.get(\"temp_time_zone_7\"));\n//         case 8:\n//             return await splitTemp(global.get(\"temp_time_zone_8\"));\n//         case 9:\n//             return await splitTemp(global.get(\"temp_time_zone_9\"));\n//         case 10:\n//             return await splitTemp(global.get(\"temp_time_zone_10\"));\n//         case 11:\n//             return await splitTemp(global.get(\"temp_time_zone_11\"));\n//         case 12:\n//             return await splitTemp(global.get(\"temp_time_zone_12\"));\n//         default:\n//             return [null, null];\n//     }\n// }\n\n// const splitTemp = async (temp) => {\n//     if (temp === undefined || temp === null) {\n//         return [null, null];\n//     }\n//     temp = temp.split(',');\n//     return [temp[0], temp[1]];\n// }\n\n// const setTempLastTimeInBlock = async (zone, entry_time, current_block) => {\n//     switch (zone) {\n//         case 2:\n//             return global.set(\"temp_time_zone_2\", `${entry_time},${current_block}`);\n//         case 3:\n//             return global.set(\"temp_time_zone_3\", `${entry_time},${current_block}`);\n//         case 4:\n//             return global.set(\"temp_time_zone_4\", `${entry_time},${current_block}`);\n//         case 5:\n//             return global.set(\"temp_time_zone_5\", `${entry_time},${current_block}`);\n//         case 6:\n//             return global.set(\"temp_time_zone_6\", `${entry_time},${current_block}`);\n//         case 7:\n//             return global.set(\"temp_time_zone_7\", `${entry_time},${current_block}`);\n//         case 8:\n//             return global.set(\"temp_time_zone_8\", `${entry_time},${current_block}`);\n//         case 9:\n//             return global.set(\"temp_time_zone_9\", `${entry_time},${current_block}`);\n//         case 10:\n//             return global.set(\"temp_time_zone_10\", `${entry_time},${current_block}`);\n//         case 11:\n//             return global.set(\"temp_time_zone_11\", `${entry_time},${current_block}`);\n//         case 12:\n//             return global.set(\"temp_time_zone_12\", `${entry_time},${current_block}`);\n//     }\n// }\n\nconst findPossibleMax = async (data, max) => {\n    let possibleMax = max;\n    while (data.includes(possibleMax)) {\n        possibleMax--;\n    }\n    return possibleMax;\n};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 680,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "3356d20f9807a13c",
        "type": "function",
        "z": "3b1fe48eb8c3d4ed",
        "name": "setMaxBlockPerZone",
        "func": "const maxBlockPerZone = {\n    ZONE_1_1: 7,\n    ZONE_1_2: 7,\n    ZONE_2: 16,\n    ZONE_3: 13,\n    ZONE_4: 20,\n    ZONE_5: 5,\n    ZONE_6: 4,\n    ZONE_7: 17,\n    ZONE_8_N: 31,\n    ZONE_8_BC: 31,\n    ZONE_8_R: 31,\n    ZONE_9: 9,\n    ZONE_10: 5,\n    ZONE_11: 3,\n    ZONE_12: 9,\n};\n\nglobal.set('maxBlockPerZone', maxBlockPerZone);\n\n\n// const maxBlockPerZone = {\n//     ZONE_1_1: 7,\n//     ZONE_1_2: 7,\n//     ZONE_2: 16,\n//     ZONE_3: 13,\n//     ZONE_4: 20,\n//     ZONE_5: 5,\n//     ZONE_6: 4,\n//     ZONE_7: 17,\n//     ZONE_8_N: 31,\n//     ZONE_8_BC: 31,\n//     ZONE_8_R: 31,\n//     ZONE_9: 9,\n//     ZONE_10: 5,\n//     ZONE_11: 3,\n//     ZONE_12: 9,\n// };\n\n// const maxBlockPerZone = {\n//     ZONE_1_1: 99,\n//     ZONE_1_2: 99,\n//     ZONE_2: 99,\n//     ZONE_3: 99,\n//     ZONE_4: 99,\n//     ZONE_5: 99,\n//     ZONE_6: 99,\n//     ZONE_7: 99,\n//     ZONE_8_N: 99,\n//     ZONE_8_BC: 99,\n//     ZONE_8_R: 99,\n//     ZONE_9: 99,\n//     ZONE_10: 99,\n//     ZONE_11: 99,\n//     ZONE_12: 99,\n// };",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "99cc2f2ed389e041",
        "type": "change",
        "z": "3b1fe48eb8c3d4ed",
        "name": "Delete global.context",
        "rules": [
            {
                "t": "delete",
                "p": "temp_time_zone_1_1",
                "pt": "global"
            },
            {
                "t": "delete",
                "p": "temp_time_zone_1_2",
                "pt": "global"
            },
            {
                "t": "delete",
                "p": "temp_time_zone_3",
                "pt": "global"
            },
            {
                "t": "delete",
                "p": "temp_time_zone_4",
                "pt": "global"
            },
            {
                "t": "delete",
                "p": "temp_time_zone_5",
                "pt": "global"
            },
            {
                "t": "delete",
                "p": "temp_time_zone_6",
                "pt": "global"
            },
            {
                "t": "delete",
                "p": "temp_time_zone_7",
                "pt": "global"
            },
            {
                "t": "delete",
                "p": "temp_time_zone_8",
                "pt": "global"
            },
            {
                "t": "delete",
                "p": "temp_time_zone_9",
                "pt": "global"
            },
            {
                "t": "delete",
                "p": "temp_time_zone_10",
                "pt": "global"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 480,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "4289359003408f16",
        "type": "catch",
        "z": "3b1fe48eb8c3d4ed",
        "name": "",
        "scope": null,
        "uncaught": false,
        "x": 280,
        "y": 360,
        "wires": [
            [
                "57ccca9cbbdb644c"
            ]
        ]
    },
    {
        "id": "57ccca9cbbdb644c",
        "type": "function",
        "z": "3b1fe48eb8c3d4ed",
        "name": "msg",
        "func": "node.warn(msg);\nnode.warn(JSON.stringify(msg));",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 360,
        "wires": [
            []
        ]
    },
    {
        "id": "064c8dc8f81d3dd6",
        "type": "inject",
        "z": "3b1fe48eb8c3d4ed",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "*/5 0-7 * * *",
        "once": true,
        "onceDelay": "2",
        "topic": "",
        "payload": "morning",
        "payloadType": "str",
        "x": 240,
        "y": 460,
        "wires": [
            [
                "b4fabc0b352cf02e"
            ]
        ]
    },
    {
        "id": "b4fabc0b352cf02e",
        "type": "function",
        "z": "3b1fe48eb8c3d4ed",
        "name": "Set work schedule",
        "func": "const payload = msg.payload;\nconst db = global.get(\"connetion_mongo\");\nconst collectionEnum = global.get(\"CollectionEnum\");\nconst moment = global.get('moment_timezone');\n// const moment = global.get('moment');\n// const timezone = 'Asia/Bangkok';\n\n// moment.tz.setDefault(timezone);\n// global.set('moment_timezone', moment);\n\nconst dayName = moment().format('dddd');\nconst result = await db.collection(collectionEnum.WORK_SCHEDULE).findOne({\n    day: dayName,\n});\n// node.warn(result);\nif (payload === 'morning') {\n    const timeMorningStart = moment().hours(result.morning.start.hour).minutes(result.morning.start.minute).seconds(0);\n    const timeMorningEnd = moment().hours(result.morning.end.hour).minutes(result.morning.end.minute).seconds(0);\n    global.set('timeMorningStart', timeMorningStart);\n    global.set('timeMorningEnd', timeMorningEnd);\n\n    node.warn(`Set work schedule ${payload}!!!`);\n} else if (payload === 'afternoon') {\n    const timeAfternoonStart = moment().hours(result.afternoon.start.hour).minutes(result.afternoon.start.minute).seconds(0);\n    const timeAfternoonEnd = moment().hours(result.afternoon.end.hour).minutes(result.afternoon.end.minute).seconds(0);\n    global.set('timeAfternoonStart', timeAfternoonStart);\n    global.set('timeAfternoonEnd', timeAfternoonEnd);\n\n    node.warn(\"Set work schedule afternoon!!!\");\n} else if (payload === 'overtime') {\n    const timeOvertimeStart = moment().hours(result.overtime.start.hour).minutes(result.overtime.start.minute).seconds(0);\n    const timeOvertimeEnd = moment().hours(result.overtime.end.hour).minutes(result.overtime.end.minute).seconds(0);\n    const overtimeStatus = result.overtime.is_active;\n    global.set('timeOvertimeStart', timeOvertimeStart);\n    global.set('timeOvertimeEnd', timeOvertimeEnd);\n    global.set('timeOvertimeStatus', overtimeStatus);\n\n    node.warn(\"Set work schedule overtime!!!\");\n}\nawait saveDataHistorySchedule(result);\n\nasync function saveDataHistorySchedule(result) {\n    // node.warn(result);\n    const workSchdule = await db.collection(collectionEnum.HISTORY_WORK_SCHEDULE).findOne({ date: moment().format('YYYY-MM-DD') });\n    if (workSchdule){\n        workSchdule.updated_at = new Date();\n        // Update the existing document\n        db.collection(collectionEnum.HISTORY_WORK_SCHEDULE).updateOne({\n            date: moment().format('YYYY-MM-DD')\n        }, {\n            $set: {\n                updated_at: new Date(),\n                schedule: {\n                    morning: result.morning,\n                    afternoon: result.afternoon,\n                    overtime: result.overtime,\n                },\n                is_active: result.is_active,\n            }\n        });\n    } else {\n        const data = {\n            date: moment().format('YYYY-MM-DD'),\n            created_at: new Date(),\n            updated_at: null,\n            is_active: result.is_active,\n            schedule: {\n                morning: result.morning,\n                afternoon: result.afternoon,\n                overtime: result.overtime,\n            }\n        }\n\n        try {\n            await db.collection(collectionEnum.HISTORY_WORK_SCHEDULE).insertOne(data);\n        } catch (error) {\n            if (error.code === 11000) {\n                delete data.created_at;\n                data.updated_at = new Date();\n                // Update the existing document\n                db.collection(collectionEnum.HISTORY_WORK_SCHEDULE).updateOne({\n                    date: moment().format('YYYY-MM-DD')\n                }, {\n                    $set: {\n                        updated_at: new Date(),\n                        schedule: {\n                            morning: result.morning,\n                            afternoon: result.afternoon,\n                            overtime: result.overtime,\n                        },\n                        is_active: result.is_active,\n                    }\n                });\n            } else {\n                node.error(\"insert history schedule message error\", error);\n            }\n        };\n    }\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 460,
        "wires": [
            []
        ]
    },
    {
        "id": "67870722db06d489",
        "type": "inject",
        "z": "3b1fe48eb8c3d4ed",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "*/5 11-12 * * *",
        "once": true,
        "onceDelay": "2",
        "topic": "",
        "payload": "afternoon",
        "payloadType": "str",
        "x": 250,
        "y": 500,
        "wires": [
            [
                "b4fabc0b352cf02e"
            ]
        ]
    },
    {
        "id": "65c7b28eea6c9d8b",
        "type": "inject",
        "z": "3b1fe48eb8c3d4ed",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "*/5 13-17 * * *",
        "once": true,
        "onceDelay": "2",
        "topic": "",
        "payload": "overtime",
        "payloadType": "str",
        "x": 240,
        "y": 540,
        "wires": [
            [
                "b4fabc0b352cf02e"
            ]
        ]
    },
    {
        "id": "89018b8cf2ecac50",
        "type": "function",
        "z": "3b1fe48eb8c3d4ed",
        "name": "Vesion 1.0",
        "func": "node.warn(`strat production analysis version 1.0`);",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "d6fb4dd65e2f5cc5",
        "type": "inject",
        "z": "3b1fe48eb8c3d4ed",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 890,
        "y": 100,
        "wires": [
            [
                "6d354dada4919095"
            ]
        ]
    },
    {
        "id": "6d354dada4919095",
        "type": "function",
        "z": "3b1fe48eb8c3d4ed",
        "name": "Init collection",
        "func": "const db = global.get(\"connetion_mongo\");\nconst collectionEnum = global.get(\"CollectionEnum\");\n\n// List of collections to create\nconst collectionsToCreate = [\n    collectionEnum.HOUSE_PRODUCTION_RECORDS,\n    collectionEnum.JWT_TOKEN,\n    collectionEnum.PART_PRODUCTION_RECORDS,\n    collectionEnum.PRODUCTION_DATA,\n    collectionEnum.QR_DATA,\n    collectionEnum.USERS,\n    collectionEnum.WORK_SCHEDULE,\n    collectionEnum.ZONE1_PRODUCTION_DATA,\n    collectionEnum.HISTORY_WORK_SCHEDULE,\n    collectionEnum.LOG_INSTALLATION_DATE,\n    collectionEnum.LOG_MODBUS,\n    collectionEnum.LOG_CROSS_ZONE\n];\n\n// Loop through the list and create collections\nfor (const collectionName of collectionsToCreate) {\n    await createCollection(collectionName);\n}\n\nasync function createCollection(collectionName) {\n    try {\n        // ตรวจสอบว่าคอลเล็กชันมีอยู่แล้วหรือไม่\n        const collections = await db.collections();\n        const collectionExists = collections.some((collection) => collection.collectionName === collectionName);\n\n        if (!collectionExists) {\n            await db.createCollection(collectionName);\n            node.warn(`Collection ${collectionName} created successfully.`);\n        } else {\n            node.warn(`Collection ${collectionName} already exists. Skipping creation.`);\n        }\n    } catch (error) {\n        console.error(`Error creating collection ${collectionName}: ${error}`);\n    }\n}\n\n// await db.createCollection(collectionEnum.HOUSE_PRODUCTION_RECORDS);\n// await db.createCollection(collectionEnum.JWT_TOKEN);//jwt_tokens\n// await db.createCollection(collectionEnum.PART_PRODUCTION_RECORDS);\n// await db.createCollection(collectionEnum.PRODUCTION_DATA);\n// await db.createCollection(collectionEnum.QR_DATA);\n// await db.createCollection(collectionEnum.USERS);//users\n// await db.createCollection(collectionEnum.WORK_SCHEDULE);\n// await db.createCollection(collectionEnum.ZONE1_PRODUCTION_DATA);\n// await db.createCollection(collectionEnum.HISTORY_WORK_SCHEDULE);\n// await db.createCollection(collectionEnum.LOG_INSTALLATION_DATE);\n// await db.createCollection(collectionEnum.LOG_MODBUS);\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1090,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "ad6c7feb9d382add",
        "type": "comment",
        "z": "3b1fe48eb8c3d4ed",
        "name": "Init collection",
        "info": "",
        "x": 890,
        "y": 60,
        "wires": []
    },
    {
        "id": "d81ee04e044e1f1b",
        "type": "inject",
        "z": "3b1fe48eb8c3d4ed",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "10",
        "topic": "",
        "x": 210,
        "y": 800,
        "wires": [
            [
                "aaa66cae8e61f673"
            ]
        ]
    },
    {
        "id": "5892f0d73d9b6b51",
        "type": "comment",
        "z": "3b1fe48eb8c3d4ed",
        "name": "(Manual) set Time Move Item line A ",
        "info": "",
        "x": 280,
        "y": 760,
        "wires": []
    },
    {
        "id": "68051ac814a76f24",
        "type": "comment",
        "z": "3b1fe48eb8c3d4ed",
        "name": "set Time Move Item line B",
        "info": "",
        "x": 270,
        "y": 620,
        "wires": []
    },
    {
        "id": "264cef219857d797",
        "type": "function",
        "z": "3b1fe48eb8c3d4ed",
        "name": "Calculate speed ",
        "func": "const zoneMoveTime = global.get('ZoneMoveTime');\nconst buf = Buffer.from(msg.payload.buffer);\nconst bufValue601 = buf.readFloatBE();\nconst bufValue603 = buf.readFloatBE(4);\nconst bufValue605 = buf.readFloatBE(8);\n\n// const speedA = parseFloat(bufValue601.toFixed(4));\nconst speedB = parseFloat(bufValue601.toFixed(4));\nconst speedC = parseFloat(bufValue603.toFixed(4));\n\n// const speedB = 2260;\n// const speedC = 2260;\n\n\n// node.warn(`speedA:${speedA}`);\n// node.warn(`speedB:${speedB}`);\n// node.warn(`speedC:${speedC}`);\n\nconst speedBMinute = speedB ? speedB / 60 : 9999;\nconst speedCMinute = speedC ? speedC / 60 : 9999;\n// node.warn(`speedBMinute:${parseFloat(speedBMinute.toFixed(2))}`);\n// node.warn(`speedCMinute:${parseFloat(speedCMinute.toFixed(2))}`);\nsetSpeedBLine(parseFloat(speedBMinute.toFixed(2)));\nsetSpeedCLine(parseFloat(speedCMinute.toFixed(2)));\n\n\n\n\nfunction setSpeedBLine(speed) {\n    zoneMoveTime['zone3MoveTime'] = speed;\n    zoneMoveTime['zone5MoveTime'] = speed;\n    zoneMoveTime['zone6MoveTime'] = speed;\n    zoneMoveTime['zone7MoveTime'] = speed;\n}\n\n\nfunction setSpeedCLine(speed) {\n    zoneMoveTime['zone9MoveTime'] = speed;\n    zoneMoveTime['zone10MoveTime'] = speed;\n    zoneMoveTime['zone11MoveTime'] = speed;\n    zoneMoveTime['zone12MoveTime'] = speed;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 880,
        "y": 660,
        "wires": [
            [
                "3a3ef55178a8d1fd"
            ]
        ]
    },
    {
        "id": "a62aa24bb8a670ae",
        "type": "function",
        "z": "3b1fe48eb8c3d4ed",
        "name": "Address 600 - 604",
        "func": "// const fc = 3;\n// const sa = 600;          //start address base0\n// const addresses = 8;   //Number of word address\n\n// msg.payload = { value: msg.payload, 'fc': fc, 'unitid': 1, 'address': sa, 'quantity': addresses };\n// return msg;\n\n\nconst fc = 3;\nconst sa = 601;          //start address base0\nconst addresses = 8;   //Number of word address\n\nmsg.payload = { value: msg.payload, 'fc': fc, 'unitid': 1, 'address': sa, 'quantity': addresses };\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 660,
        "wires": [
            [
                "81ea17e81a86281c"
            ]
        ]
    },
    {
        "id": "81ea17e81a86281c",
        "type": "modbus-flex-getter",
        "z": "3b1fe48eb8c3d4ed",
        "name": "",
        "showStatusActivities": false,
        "showErrors": false,
        "showWarnings": true,
        "logIOActivities": false,
        "server": "7ab982fca0f94f9e",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 660,
        "y": 660,
        "wires": [
            [],
            [
                "264cef219857d797"
            ]
        ]
    },
    {
        "id": "3a3ef55178a8d1fd",
        "type": "function",
        "z": "3b1fe48eb8c3d4ed",
        "name": "",
        "func": "node.status({fill:\"blue\",shape:\"ring\",text:\"D1\" + \":\" + msg.value + \"  D2\" + \":\" + msg.value2 + \"  D3\" + \":\" + msg.value3 + \"  D4\" + \":\" + msg.value4 + \"  D5\" + \":\" + msg.value5 + \"  D6\" + \":\" + msg.value6});  \nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1060,
        "y": 660,
        "wires": [
            []
        ]
    },
    {
        "id": "6158d98ea3e430ec",
        "type": "inject",
        "z": "3b1fe48eb8c3d4ed",
        "name": "",
        "props": [
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 210,
        "y": 1140,
        "wires": [
            [
                "14a05ca5f7085a24",
                "6ae9adc41548fe9a",
                "45691879075af838"
            ]
        ]
    },
    {
        "id": "14a05ca5f7085a24",
        "type": "function",
        "z": "3b1fe48eb8c3d4ed",
        "name": "Float Write",
        "func": "var fc=16;\nvar sa=600;    //Modbus ADRRESS do want to write\nvar addresses=2;     //Number of ADRRESS do want to write\nvar value=600.66;    //Value do want to command\n\nvar buf=Buffer.alloc(4);\nbuf.writeFloatBE(value);\n//buf.writeFloatBE(16001.5);\nvar values=[(buf[0]*256+buf[1]),(buf[2]*256)+buf[3]]\nmsg.payload={\"value\":values , 'fc': fc, 'unitid': 1, 'address': sa , 'quantity': addresses };\n\nnode.status({fill:\"blue\",shape:\"ring\",text:msg.topic + \":\" + value}); \nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 1140,
        "wires": [
            [
                "1f9e5b19c2ac3593"
            ]
        ]
    },
    {
        "id": "1f9e5b19c2ac3593",
        "type": "modbus-flex-write",
        "z": "3b1fe48eb8c3d4ed",
        "name": "",
        "showStatusActivities": false,
        "showErrors": false,
        "showWarnings": true,
        "server": "51a1a8e59174b5dc",
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 650,
        "y": 1140,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "6ae9adc41548fe9a",
        "type": "function",
        "z": "3b1fe48eb8c3d4ed",
        "name": "Float Write",
        "func": "var fc=16;\nvar sa=602;    //Modbus ADRRESS do want to write\nvar addresses=2;     //Number of ADRRESS do want to write\nvar value=601.66;    //Value do want to command\n\nvar buf=Buffer.alloc(4);\nbuf.writeFloatBE(value);\n//buf.writeFloatBE(16001.5);\nvar values=[(buf[0]*256+buf[1]),(buf[2]*256)+buf[3]]\nmsg.payload={\"value\":values , 'fc': fc, 'unitid': 1, 'address': sa , 'quantity': addresses };\n\nnode.status({fill:\"blue\",shape:\"ring\",text:msg.topic + \":\" + value}); \nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 1180,
        "wires": [
            [
                "1f9e5b19c2ac3593"
            ]
        ]
    },
    {
        "id": "45691879075af838",
        "type": "function",
        "z": "3b1fe48eb8c3d4ed",
        "name": "Float Write",
        "func": "var fc=16;\nvar sa=604;    //Modbus ADRRESS do want to write\nvar addresses=2;     //Number of ADRRESS do want to write\nvar value=603.66;    //Value do want to command\n\nvar buf=Buffer.alloc(4);\nbuf.writeFloatBE(value);\n//buf.writeFloatBE(16001.5);\nvar values=[(buf[0]*256+buf[1]),(buf[2]*256)+buf[3]]\nmsg.payload={\"value\":values , 'fc': fc, 'unitid': 1, 'address': sa , 'quantity': addresses };\n\nnode.status({fill:\"blue\",shape:\"ring\",text:msg.topic + \":\" + value}); \nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 1220,
        "wires": [
            [
                "1f9e5b19c2ac3593"
            ]
        ]
    },
    {
        "id": "ddd6433225ee1360",
        "type": "inject",
        "z": "3b1fe48eb8c3d4ed",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "3",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 230,
        "y": 660,
        "wires": [
            [
                "a62aa24bb8a670ae"
            ]
        ]
    },
    {
        "id": "c1e306047672432d",
        "type": "function",
        "z": "3b1fe48eb8c3d4ed",
        "name": "setMoveTime",
        "func": "const ZoneMoveTime = {\n    zone1MoveTime: 9999,\n    zone2MoveTime: 9999,\n    zone3MoveTime: 9999,\n    zone4MoveTime: 9999,\n    zone5MoveTime: 9999,\n    zone6MoveTime: 9999,\n    zone7MoveTime: 9999,\n    zone8MoveTime: 9999,\n    zone9MoveTime: 9999,\n    zone10MoveTime: 9999,\n    zone11MoveTime: 9999,\n    zone12MoveTime: 9999,\n};\n\nglobal.set('ZoneMoveTime', ZoneMoveTime);",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 300,
        "wires": [
            []
        ]
    },
    {
        "id": "4515ab2e9ba1ad23",
        "type": "modbus-flex-server",
        "z": "3b1fe48eb8c3d4ed",
        "d": true,
        "name": "",
        "logEnabled": false,
        "serverAddress": "192.168.150.45",
        "serverPort": 11502,
        "responseDelay": 100,
        "unitId": 1,
        "delayUnit": "ms",
        "coilsBufferSize": 20000,
        "registersBufferSize": 20000,
        "minAddress": 0,
        "splitAddress": 10000,
        "funcGetCoil": "function getFlexCoil(addr, unitID) {\n\tif (unitID === node.unitId && \n\t\taddr >= node.minAddress && \n\t\taddr <= node.splitAddress) { \n\n\t\treturn node.coils.readUInt8(addr * node.bufferFactor) \n\t}  \n}",
        "funcGetDiscreteInput": "function getFlexDiscreteInput(addr, unitID) {\n\taddr += node.splitAddress\n\tif (unitID === node.unitId && \n\t\taddr >= node.splitAddress && \n\t\taddr <= node.splitAddress * 2) { \n\n\t\treturn node.coils.readUInt8(addr * node.bufferFactor) \n\t}  \n}",
        "funcGetInputRegister": "function getFlexInputRegister(addr, unitID) { \n\tif (unitID === node.unitId && \n\t\taddr >= node.minAddress && \n\t\taddr <= node.splitAddress) { \n\n\t\treturn node.registers.readUInt16BE(addr * node.bufferFactor)  \n\t} \n}",
        "funcGetHoldingRegister": "function getFlexHoldingRegsiter(addr, unitID) { \n\taddr += node.splitAddress\n\tif (unitID === node.unitId && \n\t\taddr >= node.splitAddress && \n\t\taddr <= node.splitAddress * 2) { \n\n\t\treturn node.registers.readUInt16BE(addr * node.bufferFactor)  \n\t} \n}",
        "funcSetCoil": "function setFlexCoil(addr, value, unitID) { \n\tif (unitID === node.unitId && \n\t\taddr >= node.minAddress && \n\t\taddr <= node.splitAddress) { \n\n\t\tnode.coils.writeUInt8(value, addr * node.bufferFactor)  \n\t} \n}",
        "funcSetRegister": "function setFlexRegister(addr, value, unitID) { \n\taddr += node.splitAddress\n\tif (unitID === node.unitId && \n\t\taddr >= node.splitAddress && \n\t\taddr <= node.splitAddress * 2) { \n\n\t\tnode.registers.writeUInt16BE(value, addr * node.bufferFactor)  \n\t} \n}",
        "showErrors": false,
        "x": 860,
        "y": 380,
        "wires": [
            [],
            [],
            [],
            [],
            []
        ]
    },
    {
        "id": "af3878ab999552ab",
        "type": "comment",
        "z": "3b1fe48eb8c3d4ed",
        "name": "Modbus flex server",
        "info": "",
        "x": 850,
        "y": 320,
        "wires": []
    },
    {
        "id": "87f8d7bcee33040d",
        "type": "inject",
        "z": "3b1fe48eb8c3d4ed",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "10",
        "topic": "",
        "x": 690,
        "y": 720,
        "wires": [
            []
        ]
    },
    {
        "id": "4f769f30d176c0a0",
        "type": "inject",
        "z": "3b1fe48eb8c3d4ed",
        "name": "Reset OT 02.00",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "00 02 * * *",
        "once": false,
        "onceDelay": "2",
        "topic": "",
        "payload": "overtime",
        "payloadType": "str",
        "x": 260,
        "y": 580,
        "wires": [
            [
                "640204fd96496289"
            ]
        ]
    },
    {
        "id": "640204fd96496289",
        "type": "function",
        "z": "3b1fe48eb8c3d4ed",
        "name": "Set work schedule",
        "func": "const payload = msg.payload;\nconst db = global.get(\"connetion_mongo\");\nconst collectionEnum = global.get(\"CollectionEnum\");\n\nawait db.collection(collectionEnum.WORK_SCHEDULE).updateMany({}, { $set: { \"overtime.is_active\": false } })\n    .then(result => {\n        node.warn(`${result.modifiedCount} documents updated.`);\n    })\n    .catch(error => {\n        node.warn(error);\n    });",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 580,
        "wires": [
            []
        ]
    },
    {
        "id": "e36c5ac822d4095e",
        "type": "inject",
        "z": "3b1fe48eb8c3d4ed",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "10",
        "topic": "",
        "x": 210,
        "y": 840,
        "wires": [
            [
                "aaa66cae8e61f673"
            ]
        ]
    },
    {
        "id": "4d09cb5f11720c81",
        "type": "function",
        "z": "3b1fe48eb8c3d4ed",
        "name": "Global Function Cross zone",
        "func": "const db = global.get(\"connetion_mongo\");\nconst zoneEnum = global.get(\"ZoneEnum\");\nconst collectionEnum = global.get(\"CollectionEnum\");\nconst moment = global.get('moment_timezone');\nconst logger = global.get('loggerInfo');\nconst calculateTotalWorkMinutes = global.get('calculateTotalWorkMinutes');\n\n\nasync function endCrossZone(result, currentZone, keyUpdate) {\n    try {\n        logger(result?.qr_data_detail?.qr_code, `endZone: ${currentZone}`)\n        for (const zone of result.zones) {\n            if (zone.zone_number === currentZone) {\n                zone.exit_time = new Date();\n                zone.blocks[result.current_block - 1].exit_time = new Date()\n                if (currentZone === zoneEnum.ZONE_12.index) {\n                    zone.is_active = false;\n                }\n                await db.collection(collectionEnum.PRODUCTION_DATA).updateOne(\n                    { _id: result._id, \"zones.zone_number\": zone.zone_number },\n                    { $set: { \"zones.$\": zone } }\n                );\n                logger(result?.qr_data_detail?.qr_code, `Update zone ${currentZone} success!`)\n                await updatePartProductionZone(result, zone.entry_time, zone.exit_time, keyUpdate)\n            }\n        }\n        logger(result?.qr_data_detail?.qr_code, `endZone: ${currentZone} success!`)\n    } catch (error) {\n        node.error(error);\n    }\n}\nglobal.set('endCrossZone', endCrossZone);\n\nasync function updatePartProductionZone(result, entry_time, exit_time, keyUpdate) {\n    try {\n        logger(result?.qr_data_detail?.qr_code, `updatePartProductionZone keyUpdate:${keyUpdate}`)\n        const entryTime = moment(entry_time);\n        const exitTime = moment(exit_time);\n        const timeDifferenceMinutes = await calculateTotalWorkMinutes(entryTime, exitTime);\n        await db.collection(collectionEnum.PART_PRODUCTION_RECORDS).updateOne(\n            { qr_code: result.qr_data_detail.qr_code },\n            { $set: { [keyUpdate]: timeDifferenceMinutes } }\n        );\n        logger(result?.qr_data_detail?.qr_code, \"Update part production record success!\")\n    } catch (error) {\n        node.error(error);\n    }\n}\nglobal.set('updatePartProductionZone', updatePartProductionZone);\n\nasync function addCrossZone(result, zoneIndex, zoneValue, keyUpdate) {\n    try {\n        logger(result?.qr_data_detail?.qr_code, `addCrossZone: ${zoneIndex}`)\n        const blockNumber = await findBlockEmpty();\n        const newZone = {\n            zone_number: zoneIndex,\n            zone_name: zoneValue,\n            entry_time: new Date(),\n            exit_time: new Date(),\n            blocks: [{\n                block_number: blockNumber,\n                entry_time: new Date(),\n                exit_time: new Date(),\n            }]\n        };\n\n        result.zones.push(newZone);\n        result.current_zone = zoneIndex;\n        result.current_block = blockNumber;\n        const updateData = {\n            $set: {\n                zones: result.zones,\n                current_zone: zoneIndex,\n                current_block: blockNumber\n            }\n        };\n\n        if (zoneIndex === zoneEnum.ZONE_12.index) {\n            updateData.$set.is_active = false;\n            updateData.$set.exit_time = new Date();\n        }\n\n        await db.collection(collectionEnum.PRODUCTION_DATA).updateOne(\n            { _id: result._id },\n            updateData\n        );\n\n        logger(result?.qr_data_detail?.qr_code, `Update new zone ${zoneIndex} success!`)\n        await updatePartProductionZone(result, newZone.entry_time, newZone.exit_time, keyUpdate);\n        logger(result?.qr_data_detail?.qr_code, `addCrossZone success!`)\n    } catch (error) {\n        node.error(error);\n    }\n}\nglobal.set('addCrossZone', addCrossZone);\n\nasync function findBlockEmpty(zoneIndex, unitType) {\n    const maxBlockByPass = 99;\n    for (let index = 1; index < maxBlockByPass; index++) {\n        let query = \"\";\n        if (zoneIndex === zoneEnum.ZONE_8.index) {\n            query = {\n                \"is_active\": true,\n                \"current_zone\": zoneIndex,\n                \"current_block\": index,\n                \"unit_type\": unitType\n            }\n        } else {\n            query = {\n                \"is_active\": true,\n                \"current_zone\": zoneIndex,\n                \"current_block\": index,\n            }\n        }\n        const results = await db.collection(collectionEnum.PRODUCTION_DATA).find(query).toArray();\n        if (results.length === 0) {\n            return index;\n        }\n    }\n}\nglobal.set('findBlockEmpty', findBlockEmpty);\n\nasync function saveLogCrossZone(qr_code, from_zone, to_zone) {\n    await db.collection(collectionEnum.LOG_CROSS_ZONE).insertOne({\n        created_date: new Date(),\n        qr_code: qr_code,\n        from_zone: from_zone,\n        to_zone: to_zone\n    })\n}\nglobal.set('saveLogCrossZone', saveLogCrossZone);\n\nasync function newObjectInZone(result, zoneIndex, zoneValue, type) {\n    try {\n        logger(result?.qr_data_detail?.qr_code, `newObjectInZone: ${zoneIndex}`)\n        const unitType = await validateUnitType(type);\n        const blockNumber = await findBlockEmpty(unitType);\n        const newZone = {\n            zone_number: zoneIndex,\n            zone_name: zoneValue,\n            entry_time: new Date(),\n            exit_time: null,\n            blocks: [{\n                block_number: blockNumber,\n                entry_time: new Date(),\n                exit_time: null\n            }]\n        };\n\n        result.zones.push(newZone);\n        result.current_zone = zoneIndex;\n        result.current_block = blockNumber;\n\n\n        if (zoneIndex === zoneEnum.ZONE_12.index) {\n            await db.collection(collectionEnum.PRODUCTION_DATA).updateOne(\n                { _id: result._id },\n                {\n                    $set: {\n                        zones: result.zones,\n                        current_zone: zoneIndex,\n                        current_block: blockNumber,\n                        is_active: true\n                    }\n                }\n            );\n        } else {\n            await db.collection(collectionEnum.PRODUCTION_DATA).updateOne(\n                { _id: result._id },\n                {\n                    $set: {\n                        zones: result.zones,\n                        current_zone: zoneIndex,\n                        current_block: blockNumber\n                    }\n                }\n            );\n        }\n        logger(result?.qr_data_detail?.qr_code, `Update new zone ${zoneIndex} success!`)\n        logger(result?.qr_data_detail?.qr_code, `newObjectInZone: ${zoneIndex} success!`)\n    } catch (error) {\n        node.error(error);\n    }\n}\nglobal.set('newObjectInZone', newObjectInZone);\n\nasync function validateUnitType(unit_type) {\n    switch (unit_type.toUpperCase()) {\n        case 'N':\n            return 'N';\n        case 'B':\n        case 'C':\n            return 'B,C';\n        case 'R':\n            return 'R';\n        default:\n            // กรณีที่ไม่ตรงเงื่อนไขใดเลย\n            return 'N';\n    }\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 200,
        "wires": [
            []
        ]
    },
    {
        "id": "7fe7151e4afdcf53",
        "type": "modbus-server",
        "z": "3b1fe48eb8c3d4ed",
        "name": "",
        "logEnabled": false,
        "hostname": "192.168.150.45",
        "serverPort": "11502",
        "responseDelay": 100,
        "delayUnit": "ms",
        "coilsBufferSize": 10000,
        "holdingBufferSize": 10000,
        "inputBufferSize": 10000,
        "discreteBufferSize": 10000,
        "showErrors": false,
        "x": 840,
        "y": 500,
        "wires": [
            [],
            [],
            [],
            [],
            []
        ]
    },
    {
        "id": "a6404e1d6887a9f2",
        "type": "http in",
        "z": "3f82c49c8d750693",
        "name": "Register",
        "url": "/api/register",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 140,
        "y": 80,
        "wires": [
            [
                "46fec8a755dd57f5"
            ]
        ]
    },
    {
        "id": "96770e6669d9f189",
        "type": "http response",
        "z": "3f82c49c8d750693",
        "name": "Response",
        "statusCode": "",
        "headers": {},
        "x": 720,
        "y": 80,
        "wires": []
    },
    {
        "id": "46fec8a755dd57f5",
        "type": "function",
        "z": "3f82c49c8d750693",
        "name": "Register",
        "func": "const db = global.get(\"connetion_mongo\");\nconst jwt = global.get(\"jwt\");\nconst dotenv = global.get(\"env\").config().parsed;\nconst bcrypt = global.get(\"bcrypt\");\n\nconst payload = msg.payload;\nconst username = payload.username;\nconst password = payload.password;\nconst email = payload.email;\n\nconst token = msg.req.headers.authorization;\nconst isValidToken = await validateJWT(token.replace(\"Bearer\", \"\").trim());\n\nif (!isValidToken) {\n    msg.statusCode = 400;\n    msg.payload = {\n        \"code\": \"ERR_0004\",\n        \"message\": \"Accesss token หมดอายุหรือไม่ถูกต้อง\",\n        \"data\": null\n    };\n    node.warn(msg);\n    return msg;\n}\n\nif (!username || !password || !email) {\n    msg.statusCode = 400;\n    msg.payload = {\n        \"code\": \"ERR_0002\",\n        \"message\": \"ข้อมูลไม่สมบูรณ์ กรุณาระบุชื่อผู้ใช้ รหัสผ่าน และอีเมล์\",\n        \"data\": null\n    };\n    return msg;\n} else {\n    // Register to mongodb\n    const user = await findUserByUsernameAndEmail(username, email);\n    if (user) {\n        node.warn(\"User duplicate:\" + user.username);\n        msg.statusCode = 400;\n        msg.payload = {\n            \"code\": \"ERR_0001\",\n            \"message\": \"มีข้อมูลอยู่ในระบบแล้ว\",\n            \"data\": null\n        };\n        return msg;\n    } else {\n        const hashedPassword = await hasPassword(username + password);\n        saveUser(username, hashedPassword, email)\n    }\n    msg.statusCode = 200;\n    msg.payload = {\n        \"code\": \"INFO_0000\",\n        \"message\": \"ระบบดำเนินการสำเร็จ\"\n    }\n    return msg;\n}\n\n\n// Function to find user by username and email\nasync function findUserByUsernameAndEmail(username, email) {\n    try {\n        // Query for user with the given username and email\n        const query = { $and: [{ username: username }, { email: email }] };\n        const user = await db.collection('users').findOne(query);\n        return user;\n    } catch (error) {\n        node.warn(\"Error finding user:\" + error);\n        console.error(\"Error finding user:\", error);\n        throw error;\n    }\n}\n\n// Function to hash the password\nfunction hasPassword(password) {\n    return new Promise((resolve, reject) => {\n        bcrypt.hash(password, 10, (error, hash) => {\n            if (error) {\n                reject(error);\n            } else {\n                resolve(hash);\n            }\n        });\n    });\n}\n\n\nfunction saveUser(username, hashedPassword, email) {\n    const newUser = {\n        username: username,\n        password: hashedPassword,\n        email: email,\n        role: 'admin',\n        created_at: new Date(),\n        updated_at: null,\n\n    };\n    db.collection('users').insertOne(newUser);\n}\n\n\nfunction removeBearerPrefix(jwt) {\n    if (jwt.startsWith('Bearer ')) {\n        return jwt.substring(7);\n    }\n    return jwt;\n}\n\n\n// Function to validate JWT\nasync function validateJWT(token) {\n    try {\n        // node.warn(token);\n        // node.warn(token);\n        // Verify the token using the secret key\n        const payload = await jwt.verify(token, dotenv.SECRETKEY);\n        // node.warn(payload)\n        // Check if the token has expired\n        const now = Date.now() / 1000; // Convert current time to seconds\n        if (payload.exp < now) {\n            return false;\n        }\n        // If the token is valid and has not expired, return the payload\n        return true;\n    } catch (error) {\n        console.error(\"error: \", error);\n        node.warn(\"error: \" + error);\n        // If there's an error verifying the token, return an error message\n        return false;\n    }\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 80,
        "wires": [
            [
                "96770e6669d9f189"
            ]
        ]
    },
    {
        "id": "5c90a37b94ab3d88",
        "type": "http in",
        "z": "3f82c49c8d750693",
        "name": "Login",
        "url": "/api/login",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 130,
        "y": 120,
        "wires": [
            [
                "9ca5c8621296b5ef"
            ]
        ]
    },
    {
        "id": "5bdc871a381c0deb",
        "type": "http response",
        "z": "3f82c49c8d750693",
        "name": "Response",
        "statusCode": "",
        "headers": {},
        "x": 720,
        "y": 120,
        "wires": []
    },
    {
        "id": "9ca5c8621296b5ef",
        "type": "function",
        "z": "3f82c49c8d750693",
        "name": "Login",
        "func": "const db = global.get(\"connetion_mongo\");\nconst jwt = global.get(\"jwt\");\nconst dotenv = global.get(\"env\").config().parsed;\nconst bcrypt = global.get(\"bcrypt\");\n\nconst payload = msg.payload;\nconst username = payload.username;\nconst password = payload.password;\n\n\nif (!username || !password) {\n    return setResponseError();\n} else {\n    // Register to mongodb\n    const user = await getUserDetail(username);\n    if (user) {\n        // node.warn(JSON.stringify(user));\n        const isMatch = await checkPassword(username + password, user.password);\n        if (isMatch) {\n            const payload = {\n                username: user.username,\n                email: user.email,\n            }\n            const jwt_object = generateJWT(payload);\n            saveToken(jwt_object, user)\n            msg.payload = {\n                \"code\": \"INFO_0000\",\n                \"message\": {\n                    access_token: jwt_object.token,\n                    refresh_token: jwt_object.refreshToken,\n                    token_type: \"Bearer\",\n                    expires_in: jwt_object.exp,\n                }\n            }\n        } else {\n            return setResponseError();\n        }\n    } else {\n        node.warn(\"User not found:\" + username);\n        return setResponseError();\n    }\n    msg.statusCode = 201;\n\n    return msg;\n}\n\n\n\nasync function getUserDetail(username) {\n    try {\n        const query = { username: username };\n        const user = await db.collection('users').findOne(query);\n        return user;\n    } catch (error) {\n        node.warn(\"Error getUserDetail:\" + error);\n        console.error(\"Error getUserDetail:\", error);\n        throw error;\n    }\n}\n\n// Function to generate JWT\nfunction generateJWT(payload) {\n    try {\n        // Generate the token with the payload and secret key\n        const token = jwt.sign(payload, dotenv.SECRETKEY, { expiresIn: parseInt(dotenv.EXPIRES_IN) });\n        // Generate the refresh token with the payload and a different secret key\n        const refreshToken = jwt.sign(payload, dotenv.REFRESH_SECRET_KEY, { expiresIn: dotenv.REFRESH_TOKEN_EXPIRES_IN });\n        // Get the expiration time and issued at time from the decoded token\n        const decodedToken = jwt.decode(token);\n        const exp = decodedToken.exp;\n        const iat = decodedToken.iat;\n\n        return {\n            token: token,\n            refreshToken: refreshToken,\n            exp: exp,\n            iat: iat\n        };\n    } catch (error) {\n        node.warn(\"Error generating JWT:\" + error);\n        console.error(\"Error generating JWT:\", error);\n        throw error;\n    }\n}\n\n// Function to compare password with hashed password\nfunction checkPassword(password, hashedPassword) {\n    return new Promise((resolve, reject) => {\n        bcrypt.compare(password, hashedPassword, (error, isMatch) => {\n            if (error) {\n                reject(error);\n            } else {\n                resolve(isMatch);\n            }\n        });\n    });\n}\n\nfunction setResponseError() {\n    msg.statusCode = 400;\n    msg.payload = {\n        \"code\": \"ERR_0003\",\n        \"message\": \"ไม่สามารถเข้าใช้งานระบบได้ กรุณาตรวจสอบชื่อผู้ใช้งาน และรหัสผ่านให้ถูกต้อง\",\n        \"data\": null\n    };\n    return msg;\n}\n\nfunction saveToken(payload, user) {\n    const newToken = {\n        user_id: user._id,\n        token: payload.token,\n        created_at: new Date(),\n        updated_at: null,\n        expires_at: payload.exp.toString(),\n    };\n    db.collection('jwt_tokens').insertOne(newToken);\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 120,
        "wires": [
            [
                "5bdc871a381c0deb"
            ]
        ]
    },
    {
        "id": "c6c28a76fb4b27de",
        "type": "http in",
        "z": "3f82c49c8d750693",
        "name": "Scan QR",
        "url": "/api/scan-qr",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 140,
        "y": 200,
        "wires": [
            [
                "b6ae1190d1553fe1"
            ]
        ]
    },
    {
        "id": "4ad24ea68f77f4c4",
        "type": "http response",
        "z": "3f82c49c8d750693",
        "name": "Response",
        "statusCode": "",
        "headers": {},
        "x": 900,
        "y": 200,
        "wires": []
    },
    {
        "id": "b6ae1190d1553fe1",
        "type": "function",
        "z": "3f82c49c8d750693",
        "name": "Scan QR",
        "func": "const db = global.get(\"connetion_mongo\");\nconst jwt = global.get(\"jwt\");\nconst dotenv = global.get(\"env\").config().parsed;\nconst bcrypt = global.get(\"bcrypt\");\nconst collectionEnum = global.get(\"CollectionEnum\");\nconst collectionQR = db.collection(collectionEnum.QR_DATA);\nconst qrLocationEnum = global.get('QrLocationEnum');\nconst getQrData = global.get('getQrData');\nconst payload = msg.payload;\n\nnode.log(`Request body:${JSON.stringify(msg.req.body)}`)\nconst token = msg.req.headers.authorization;\n// const token = msg.req.headers.authorization;\ntry {\n    if (await validateJWT(token.replace(\"Bearer\", \"\").trim())) {\n        msg.tempPayload = msg.payload;\n        if (! await validateExistQR(payload)) {\n            msg.statusCode = 400;\n            msg.payload = {\n                \"code\": \"ERR_0001\",\n                \"message\": \"มีข้อมูลอยู่ในระบบแล้ว\",\n                \"data\": null\n            };\n            // node.warn(msg);\n            return msg;\n        }\n        if (! await validateLocation(msg.payload.location)) {\n            msg.statusCode = 400;\n            msg.payload = {\n                \"code\": \"ERR_0005\",\n                \"message\": \"Location ไม่ถูกต้อง\",\n                \"data\": null\n            };\n            // node.warn(msg);\n            return msg;\n        }\n        const res = await getQrData(payload);\n        if (!validateFormatQR(res)) {\n            msg.statusCode = 400;\n            msg.payload = {\n                \"code\": \"ERR_0008\",\n                \"message\": \"format QR ไม่ถูกต้อง\",\n                \"data\": null\n            };\n            // node.warn(msg);\n            return msg;\n        }\n        // node.warn(res)\n        msg.qrData = res;\n        msg.statusCode = 200;\n        msg.payload = {\n            \"code\": \"INFO_0000\",\n            \"message\": \"ระบบดำเนินการสำเร็จ\"\n        }\n        // node.warn(msg);\n        return msg;\n    } else {\n        msg.statusCode = 400;\n        msg.payload = {\n            \"code\": \"ERR_0004\",\n            \"message\": \"Accesss token หมดอายุหรือไม่ถูกต้อง\",\n            \"data\": null\n        };\n        node.warn(msg);\n        return msg;\n    }\n\n} catch (error) {\n    node.warn(error);\n    msg.statusCode = 400;\n    msg.payload = {\n        \"code\": \"ERR_0004\",\n        \"message\": \"Accesss token หมดอายุหรือไม่ถูกต้อง\",\n        \"data\": null\n    };\n    node.warn(msg);\n    return msg;\n};\n\nfunction removeBearerPrefix(jwt) {\n    if (jwt.startsWith('Bearer ')) {\n        return jwt.substring(7);\n    }\n    return jwt;\n}\n\n\n// Function to validate JWT\nasync function validateJWT(token) {\n    try {\n        // node.warn(token);\n        // node.warn(token);\n        // Verify the token using the secret key\n        const payload = await jwt.verify(token, dotenv.SECRETKEY);\n        // node.warn(payload)\n        // Check if the token has expired\n        const now = Date.now() / 1000; // Convert current time to seconds\n        if (payload.exp < now) {\n            return false;\n        }\n        // If the token is valid and has not expired, return the payload\n        return true;\n    } catch (error) {\n        console.error(\"error: \", error);\n        node.warn(\"error: \" + error);\n        // If there's an error verifying the token, return an error message\n        return false;\n    }\n}\n\nasync function validateExistQR(payload) {\n    const query = {\n        qr_code: payload.qr_code_data,\n        location: payload.location\n    }\n\n    const result = await collectionQR.find(query).toArray();\n    if (result.length !== 0) {\n        return false;\n    }\n    return true;\n}\n\nfunction validateFormatQR(qr) {\n    const { data } = qr ?? {};\n\n    return (\n        data?.house_code &&\n        data?.owner_name &&\n        data?.total_units &&\n        data?.units_number &&\n        data?.type &&\n        data?.installation_date &&\n        data?.house_type &&\n        data?.unit_type\n    );\n}\n\nasync function validateLocation(location) {\n    for (const key in qrLocationEnum) {\n        if (qrLocationEnum.hasOwnProperty(key)) {\n            if (qrLocationEnum[key].value === location) {\n                return true;\n            }\n        }\n    }\n    return false;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 200,
        "wires": [
            [
                "90fcaa591a43d87d"
            ]
        ]
    },
    {
        "id": "5d2874e314d3e417",
        "type": "catch",
        "z": "3f82c49c8d750693",
        "name": "",
        "scope": null,
        "uncaught": false,
        "x": 140,
        "y": 40,
        "wires": [
            [
                "875b344fa73fd7c5"
            ]
        ]
    },
    {
        "id": "6bbb661e9309af17",
        "type": "http response",
        "z": "3f82c49c8d750693",
        "name": "response except",
        "statusCode": "",
        "headers": {},
        "x": 750,
        "y": 40,
        "wires": []
    },
    {
        "id": "875b344fa73fd7c5",
        "type": "function",
        "z": "3f82c49c8d750693",
        "name": "handle error!",
        "func": "msg.statusCode = 500;\nmsg.payload = {\n    \"code\": \"ERR_9999\",\n    \"message\": \"ระบบไม่สามารถดำเนินการได้\",\n    \"data\": msg.error.message\n};\nnode.warn(msg);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 40,
        "wires": [
            [
                "6bbb661e9309af17"
            ]
        ]
    },
    {
        "id": "90fcaa591a43d87d",
        "type": "subflow:0e235a2eb9e7e79b",
        "z": "3f82c49c8d750693",
        "name": "",
        "x": 510,
        "y": 200,
        "wires": [
            [
                "9cb7c9667c4e8fc5"
            ]
        ]
    },
    {
        "id": "d80f7e32519e3d55",
        "type": "http in",
        "z": "3f82c49c8d750693",
        "name": "Authentication",
        "url": "/api/auth",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 150,
        "y": 160,
        "wires": [
            [
                "57d887a61da03e8e"
            ]
        ]
    },
    {
        "id": "d0cc319538fb699f",
        "type": "http response",
        "z": "3f82c49c8d750693",
        "name": "Response",
        "statusCode": "",
        "headers": {},
        "x": 720,
        "y": 160,
        "wires": []
    },
    {
        "id": "57d887a61da03e8e",
        "type": "function",
        "z": "3f82c49c8d750693",
        "name": "Validate token",
        "func": "const db = global.get(\"connetion_mongo\");\nconst jwt = global.get(\"jwt\");\nconst dotenv = global.get(\"env\").config().parsed;\nconst bcrypt = global.get(\"bcrypt\");\nconst collectionEnum = global.get(\"CollectionEnum\");\nconst collectionQR = db.collection(collectionEnum.QR_DATA);\nconst qrLocationEnum = global.get('QrLocationEnum');\n\nconst payload = msg.payload;\n\nconst token = msg.req.headers.authorization;\n\ntry {\n    if (await validateJWT(token.replace(\"Bearer\", \"\").trim())) {\n        msg.statusCode = 200;\n        msg.payload = {\n            \"code\": \"INFO_0000\",\n            \"message\": \"ระบบดำเนินการสำเร็จ\"\n        }\n        return msg;\n    } else {\n\n        msg.statusCode = 400;\n        msg.payload = {\n            \"code\": \"ERR_0004\",\n            \"message\": \"Accesss token หมดอายุหรือไม่ถูกต้อง\",\n            \"data\": null\n        };\n        node.warn(msg);\n        return msg;\n    }\n\n} catch (error) {\n    node.warn(error);\n    msg.statusCode = 400;\n    msg.payload = {\n        \"code\": \"ERR_0004\",\n        \"message\": \"Accesss token หมดอายุหรือไม่ถูกต้อง\",\n        \"data\": null\n    };\n    node.warn(msg);\n    return msg;\n};\n\nfunction removeBearerPrefix(jwt) {\n    if (jwt.startsWith('Bearer ')) {\n        return jwt.substring(7);\n    }\n    return jwt;\n}\n\n\n// Function to validate JWT\nasync function validateJWT(token) {\n    try {\n        // node.warn(token);\n        // node.warn(token);\n        // Verify the token using the secret key\n        const payload = await jwt.verify(token, dotenv.SECRETKEY);\n        // node.warn(payload)\n        // Check if the token has expired\n        const now = Date.now() / 1000; // Convert current time to seconds\n        if (payload.exp < now) {\n            return false;\n        }\n        // If the token is valid and has not expired, return the payload\n        return true;\n    } catch (error) {\n        console.error(\"error: \", error);\n        node.warn(\"error: \" + error);\n        // If there's an error verifying the token, return an error message\n        return false;\n    }\n}\n\nasync function validateJWTRefreshToken(token) {\n    try {\n        // node.warn(token);\n        // node.warn(token);\n        // Verify the token using the secret key\n        const payload = await jwt.verify(token, dotenv.REFRESH_SECRET_KEY);\n        // node.warn(payload)\n        // Check if the token has expired\n        const now = Date.now() / 1000; // Convert current time to seconds\n        if (payload.exp < now) {\n            return false;\n        }\n        // If the token is valid and has not expired, return the payload\n        return true;\n    } catch (error) {\n        console.error(\"error: \", error);\n        node.warn(\"error: \" + error);\n        // If there's an error verifying the token, return an error message\n        return false;\n    }\n}\n\nfunction generateJWT(payload) {\n    try {\n        // Generate the token with the payload and secret key\n        const token = jwt.sign(payload, dotenv.SECRETKEY, { expiresIn: parseInt(dotenv.EXPIRES_IN) });\n        // Generate the refresh token with the payload and a different secret key\n        const refreshToken = jwt.sign(payload, dotenv.REFRESH_SECRET_KEY, { expiresIn: dotenv.REFRESH_TOKEN_EXPIRES_IN });\n        // Get the expiration time and issued at time from the decoded token\n        const decodedToken = jwt.decode(token);\n        const exp = decodedToken.exp;\n        const iat = decodedToken.iat;\n\n        return {\n            token: token,\n            refreshToken: refreshToken,\n            exp: exp,\n            iat: iat\n        };\n    } catch (error) {\n        node.warn(\"Error generating JWT:\" + error);\n        console.error(\"Error generating JWT:\", error);\n        throw error;\n    }\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 160,
        "wires": [
            [
                "d0cc319538fb699f"
            ]
        ]
    },
    {
        "id": "e2fa501be43aaa0d",
        "type": "http in",
        "z": "3f82c49c8d750693",
        "name": "House report",
        "url": "/api/report/house",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 150,
        "y": 480,
        "wires": [
            [
                "bbcd838117cb5ea6"
            ]
        ]
    },
    {
        "id": "09a63ff4a1dc0259",
        "type": "http response",
        "z": "3f82c49c8d750693",
        "name": "Response",
        "statusCode": "",
        "headers": {},
        "x": 560,
        "y": 480,
        "wires": []
    },
    {
        "id": "bbcd838117cb5ea6",
        "type": "function",
        "z": "3f82c49c8d750693",
        "name": "House Report",
        "func": "const db = global.get(\"connetion_mongo\");\nconst moment = global.get('moment_timezone');\nconst jwt = global.get(\"jwt\");\nconst dotenv = global.get(\"env\").config().parsed;\nconst bcrypt = global.get(\"bcrypt\");\nconst collectionEnum = global.get(\"CollectionEnum\");\nconst collectionQR = db.collection(collectionEnum.QR_DATA);\nconst qrLocationEnum = global.get('QrLocationEnum');\n\nconst payload = msg.payload;\nconst token = msg.req.headers.authorization;\n\n\nlet startDate = msg.req.query.startDate;\nlet endDate = msg.req.query.endDate;\n// const startOfDay = moment(searchDate, 'YYYY/MM/DD').startOf('day');\n// const endOfDay = moment(searchDate, 'YYYY/MM/DD').endOf('day');\nstartDate = moment(startDate, 'YYYY/MM/DDTHH:mm:ss')\nendDate = moment(endDate, 'YYYY/MM/DDTHH:mm:ss')\n\ntry {\n    if (await validateJWT(token.replace(\"Bearer\", \"\").trim())) {\n\n        const report = await db.collection(collectionEnum.HOUSE_PRODUCTION_RECORDS).find(\n            {\n                record_date_time: {\n                    $gte: startDate.toDate(),\n                    $lte: endDate.toDate(),\n                },\n            }\n        ).toArray();\n        // node.warn(report);\n        const response = report.map((item) => {\n            return{\n                key: item._id,\n                recordDateTime: moment(item.record_date_time).format('YYYY-MM-DD HH:mm:ss'),\n                houseName: item.house_name,\n                houseCode: item.house_code,\n                totalUnit: item.total_unit,\n                mjDate: moment(item.mj_date).format('YYYY-MM-DD HH:mm:ss'),\n                mjDateTime: item.mj_date_time,\n                installationDate: item.installation_date ? item.installation_date.replace(/(\\d{2})(\\d{2})(\\d{4})/, \"$3-$2-$1\") : \"\",\n                allPartFinish: moment(item.all_part_finish_date_time).format('YYYY-MM-DD HH:mm:ss'),\n                duration: item.duration,\n            }\n        })\n\n        msg.statusCode = 200;\n        msg.payload = {\n            data: response\n        }\n        return msg;\n    } else {\n        msg.statusCode = 400;\n        msg.payload = {\n            \"code\": \"ERR_0004\",\n            \"message\": \"Accesss token หมดอายุหรือไม่ถูกต้อง\",\n            \"data\": null\n        };\n        // node.warn(msg);\n        return msg;\n    }\n\n} catch (error) {\n    node.warn(error);\n    msg.statusCode = 400;\n    msg.payload = {\n        \"code\": \"ERR_0004\",\n        \"message\": \"Accesss token หมดอายุหรือไม่ถูกต้อง\",\n        \"data\": null\n    };\n    // node.warn(msg);\n    return msg;\n};\n\nfunction removeBearerPrefix(jwt) {\n    if (jwt.startsWith('Bearer ')) {\n        return jwt.substring(7);\n    }\n    return jwt;\n}\n\n\n// Function to validate JWT\nasync function validateJWT(token) {\n    try {\n        // node.warn(token);\n        // node.warn(token);\n        // Verify the token using the secret key\n        const payload = await jwt.verify(token, dotenv.SECRETKEY);\n        // node.warn(payload)\n        // Check if the token has expired\n        const now = Date.now() / 1000; // Convert current time to seconds\n        if (payload.exp < now) {\n            return false;\n        }\n        // If the token is valid and has not expired, return the payload\n        return true;\n    } catch (error) {\n        console.error(\"error: \", error);\n        node.warn(\"error: \" + error);\n        // If there's an error verifying the token, return an error message\n        return false;\n    }\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 480,
        "wires": [
            [
                "09a63ff4a1dc0259"
            ]
        ]
    },
    {
        "id": "024b23e8a9e9e896",
        "type": "http in",
        "z": "3f82c49c8d750693",
        "name": "Part report",
        "url": "/api/report/part",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 140,
        "y": 520,
        "wires": [
            [
                "646b01beb68d09e2"
            ]
        ]
    },
    {
        "id": "4c484eec3b95515f",
        "type": "http response",
        "z": "3f82c49c8d750693",
        "name": "Response",
        "statusCode": "",
        "headers": {},
        "x": 560,
        "y": 520,
        "wires": []
    },
    {
        "id": "646b01beb68d09e2",
        "type": "function",
        "z": "3f82c49c8d750693",
        "name": "Part Report",
        "func": "const db = global.get(\"connetion_mongo\");\nconst moment = global.get('moment_timezone');\nconst jwt = global.get(\"jwt\");\nconst dotenv = global.get(\"env\").config().parsed;\nconst bcrypt = global.get(\"bcrypt\");\nconst collectionEnum = global.get(\"CollectionEnum\");\nconst collectionQR = db.collection(collectionEnum.QR_DATA);\nconst qrLocationEnum = global.get('QrLocationEnum');\n\nconst payload = msg.payload;\nconst token = msg.req.headers.authorization;\n\nlet startDate = msg.req.query.startDate;\nlet endDate = msg.req.query.endDate;\n// const startOfDay = moment(searchDate, 'YYYY/MM/DD').startOf('day');\n// const endOfDay = moment(searchDate, 'YYYY/MM/DD').endOf('day');\nstartDate = moment(startDate, 'YYYY/MM/DDTHH:mm:ss')\nendDate = moment(endDate, 'YYYY/MM/DDTHH:mm:ss')\n// node.warn(startDate.toDate());\n// node.warn(endDate.toDate());\n\ntry {\n    if (await validateJWT(token.replace(\"Bearer\", \"\").trim())) {\n        const report = await db.collection(collectionEnum.PART_PRODUCTION_RECORDS)\n            .find({\n                record_date_time: {\n                    $gte: startDate.toDate(),\n                    $lte: endDate.toDate(),\n                },\n            })\n            .sort({ entry_time: -1 }) // 1 for ascending order, -1 for descending order\n            .toArray();\n\n        const response = report.map((item) => {\n            // node.warn(item);\n            return {\n                key: item._id,\n                record_date_time: moment(item.record_date_time).format('YYYY-MM-DD HH:mm:ss'),\n                house_name: item.house_name,\n                house_code: item.house_code,\n                part_order: item.units_number,\n                type: item.type,\n                type_unit: item.type_unit,\n                unit_size: item.unit_size,\n                area_for_b: item.area_for_b,\n                type_stair_for_r: item.type_stair_for_r,\n                house_type: item.house_type,\n                total_unit: item.total_unit,\n                mj_date: moment(item.mj_date).format('YYYY-MM-DD HH:mm:ss'),\n                // mj_date_time: \"\",\n                installation_date: item.installation_date ? item.installation_date.replace(/(\\d{2})(\\d{2})(\\d{4})/, \"$3-$2-$1\") : \"\",\n                part_finish_date_time: item.part_finish_date_time ? moment(item.part_finish_date_time).format('YYYY-MM-DD HH:mm:ss') : \"\",\n                weight: item.weight,\n                ct_mj: item.ct_min_at_mj,\n                ct_buffer: item.ct_min_at_buffer,\n                ct_bypass1: item.ct_min_at_bypass1,\n                ct_ew: item.ct_min_at_ew,\n                ct_ee_in: item.ct_min_at_ee_in,\n                ct_iwpt: item.ct_min_at_iwpt,\n                ct_bypass2: item.ct_min_at_bypass2,\n                ct_door: item.ct_min_at_door,\n                ct_windows: item.ct_min_at_window,\n                ct_scaffold: item.ct_min_at_scaffold,\n                ct_loading: item.ct_min_at_loading,\n                ct_weight: item.ct_min_at_weight,\n                ct_sum: item.ct\n            }\n        })\n        // node.warn(response);\n        msg.statusCode = 200;\n        msg.payload = {\n            data: response\n        }\n        return msg;\n    } else {\n        msg.statusCode = 400;\n        msg.payload = {\n            \"code\": \"ERR_0004\",\n            \"message\": \"Accesss token หมดอายุหรือไม่ถูกต้อง\",\n            \"data\": null\n        };\n        // node.warn(msg);\n        return msg;\n    }\n\n} catch (error) {\n    node.warn(error);\n    msg.statusCode = 400;\n    msg.payload = {\n        \"code\": \"ERR_0004\",\n        \"message\": \"Accesss token หมดอายุหรือไม่ถูกต้อง\",\n        \"data\": null\n    };\n    // node.warn(msg);\n    return msg;\n};\n\nfunction removeBearerPrefix(jwt) {\n    if (jwt.startsWith('Bearer ')) {\n        return jwt.substring(7);\n    }\n    return jwt;\n}\n\n\n// Function to validate JWT\nasync function validateJWT(token) {\n    try {\n        // node.warn(token);\n        // node.warn(token);\n        // Verify the token using the secret key\n        const payload = await jwt.verify(token, dotenv.SECRETKEY);\n        // node.warn(payload)\n        // Check if the token has expired\n        const now = Date.now() / 1000; // Convert current time to seconds\n        if (payload.exp < now) {\n            return false;\n        }\n        // If the token is valid and has not expired, return the payload\n        return true;\n    } catch (error) {\n        console.error(\"error: \", error);\n        node.warn(\"error: \" + error);\n        // If there's an error verifying the token, return an error message\n        return false;\n    }\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 520,
        "wires": [
            [
                "4c484eec3b95515f"
            ]
        ]
    },
    {
        "id": "8c1e65659a5f6d86",
        "type": "http in",
        "z": "3f82c49c8d750693",
        "name": "Get Schdules",
        "url": "/api/schedules",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 150,
        "y": 705,
        "wires": [
            [
                "57621a8836aaf8f0"
            ]
        ]
    },
    {
        "id": "306d0d37297bf377",
        "type": "http response",
        "z": "3f82c49c8d750693",
        "name": "Response",
        "statusCode": "",
        "headers": {},
        "x": 560,
        "y": 705,
        "wires": []
    },
    {
        "id": "57621a8836aaf8f0",
        "type": "function",
        "z": "3f82c49c8d750693",
        "name": "Get Schdules",
        "func": "const db = global.get(\"connetion_mongo\");\nconst jwt = global.get(\"jwt\");\nconst dotenv = global.get(\"env\").config().parsed;\nconst bcrypt = global.get(\"bcrypt\");\nconst collectionEnum = global.get(\"CollectionEnum\");\nconst collectionQR = db.collection(collectionEnum.QR_DATA);\nconst qrLocationEnum = global.get('QrLocationEnum');\n\nconst payload = msg.payload;\n\nconst token = msg.req.headers.authorization;\n\ntry {\n    if (await validateJWT(token.replace(\"Bearer\", \"\").trim())) {\n\n        const report = await db.collection(collectionEnum.WORK_SCHEDULE).find().sort({ index: 1 }).toArray();\n        msg.statusCode = 200;\n        // node.warn(report);\n\n        const response = report.map((item) => {\n            return{\n                key: item.index,\n                day: item.day,\n                status: item.is_active,\n                hhMorningStart: item.morning.start.hour,\n                mmMorningStart: item.morning.start.minute,\n                hhMorningEnd: item.morning.end.hour,\n                mmMorningEnd: item.morning.end.minute,\n                hhAfternoonStart: item.afternoon.start.hour,\n                mmAfternoonStart: item.afternoon.start.minute,\n                hhAfternoonEnd: item.afternoon.end.hour,\n                mmAfternoonEnd: item.afternoon.end.minute,\n                statusOT: item.overtime.is_active,\n                hhOTStart: item.overtime.start.hour,\n                mmOTStart: item.overtime.start.minute,\n                hhOTEnd: item.overtime.end.hour,\n                mmOTEnd: item.overtime.end.minute,\n                edit: 'Edit',\n            }\n        })\n        // node.warn(response);\n        msg.payload = {\n            data: response\n        }\n        return msg;\n    } else {\n        msg.statusCode = 400;\n        msg.payload = {\n            \"code\": \"ERR_0004\",\n            \"message\": \"Accesss token หมดอายุหรือไม่ถูกต้อง\",\n            \"data\": null\n        };\n        node.warn(msg);\n        return msg;\n    }\n\n} catch (error) {\n    node.warn(error);\n    msg.statusCode = 400;\n    msg.payload = {\n        \"code\": \"ERR_0004\",\n        \"message\": \"Accesss token หมดอายุหรือไม่ถูกต้อง\",\n        \"data\": null\n    };\n    node.warn(msg);\n    return msg;\n};\n\nfunction removeBearerPrefix(jwt) {\n    if (jwt.startsWith('Bearer ')) {\n        return jwt.substring(7);\n    }\n    return jwt;\n}\n\n\n// Function to validate JWT\nasync function validateJWT(token) {\n    try {\n        // node.warn(token);\n        // node.warn(token);\n        // Verify the token using the secret key\n        const payload = await jwt.verify(token, dotenv.SECRETKEY);\n        // node.warn(payload)\n        // Check if the token has expired\n        const now = Date.now() / 1000; // Convert current time to seconds\n        if (payload.exp < now) {\n            return false;\n        }\n        // If the token is valid and has not expired, return the payload\n        return true;\n    } catch (error) {\n        console.error(\"error: \", error);\n        node.warn(\"error: \" + error);\n        // If there's an error verifying the token, return an error message\n        return false;\n    }\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 705,
        "wires": [
            [
                "306d0d37297bf377"
            ]
        ]
    },
    {
        "id": "893e9a4bbaee1ca8",
        "type": "http response",
        "z": "3f82c49c8d750693",
        "name": "Response",
        "statusCode": "",
        "headers": {},
        "x": 560,
        "y": 740,
        "wires": []
    },
    {
        "id": "2357dee3936ea52b",
        "type": "function",
        "z": "3f82c49c8d750693",
        "name": "Get Schdule",
        "func": "const db = global.get(\"connetion_mongo\");\nconst jwt = global.get(\"jwt\");\nconst dotenv = global.get(\"env\").config().parsed;\nconst bcrypt = global.get(\"bcrypt\");\nconst collectionEnum = global.get(\"CollectionEnum\");\nconst collectionQR = db.collection(collectionEnum.QR_DATA);\nconst qrLocationEnum = global.get('QrLocationEnum');\n\nconst payload = msg.payload;\nconst token = msg.req.headers.authorization;\n\n\nconst query = msg.req.query;\n// node.warn(query.index);\n\ntry {\n    if (await validateJWT(token.replace(\"Bearer\", \"\").trim())) {\n        let response = {};\n        const report = await db.collection(collectionEnum.WORK_SCHEDULE).findOne({ index: parseInt(query.index) });\n        msg.statusCode = 200;\n        // node.warn(report);\n        if (report) {\n            response = {\n                key: report.index,\n                day: report.day,\n                status: report.is_active,\n                hhMorningStart: report.morning.start.hour,\n                mmMorningStart: report.morning.start.minute,\n                hhMorningEnd: report.morning.end.hour,\n                mmMorningEnd: report.morning.end.minute,\n                hhAfternoonStart: report.afternoon.start.hour,\n                mmAfternoonStart: report.afternoon.start.minute,\n                hhAfternoonEnd: report.afternoon.end.hour,\n                mmAfternoonEnd: report.afternoon.end.minute,\n                statusOT: report.overtime.is_active,\n                hhOTStart: report.overtime.start.hour,\n                mmOTStart: report.overtime.start.minute,\n                hhOTEnd: report.overtime.end.hour,\n                mmOTEnd: report.overtime.end.minute,\n            }\n        }\n\n\n        msg.payload = {\n            data: response\n        }\n        return msg;\n    } else {\n        msg.statusCode = 400;\n        msg.payload = {\n            \"code\": \"ERR_0004\",\n            \"message\": \"Accesss token หมดอายุหรือไม่ถูกต้อง\",\n            \"data\": null\n        };\n        node.warn(msg);\n        return msg;\n    }\n\n} catch (error) {\n    node.warn(error);\n    msg.statusCode = 400;\n    msg.payload = {\n        \"code\": \"ERR_0004\",\n        \"message\": \"Accesss token หมดอายุหรือไม่ถูกต้อง\",\n        \"data\": null\n    };\n    node.warn(msg);\n    return msg;\n};\n\nfunction removeBearerPrefix(jwt) {\n    if (jwt.startsWith('Bearer ')) {\n        return jwt.substring(7);\n    }\n    return jwt;\n}\n\n\n// Function to validate JWT\nasync function validateJWT(token) {\n    try {\n        // node.warn(token);\n        // node.warn(token);\n        // Verify the token using the secret key\n        const payload = await jwt.verify(token, dotenv.SECRETKEY);\n        // node.warn(payload)\n        // Check if the token has expired\n        const now = Date.now() / 1000; // Convert current time to seconds\n        if (payload.exp < now) {\n            return false;\n        }\n        // If the token is valid and has not expired, return the payload\n        return true;\n    } catch (error) {\n        console.error(\"error: \", error);\n        node.warn(\"error: \" + error);\n        // If there's an error verifying the token, return an error message\n        return false;\n    }\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 740,
        "wires": [
            [
                "893e9a4bbaee1ca8"
            ]
        ]
    },
    {
        "id": "201f421556057817",
        "type": "http in",
        "z": "3f82c49c8d750693",
        "name": "Get Schdule",
        "url": "/api/schedule/",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 150,
        "y": 740,
        "wires": [
            [
                "2357dee3936ea52b"
            ]
        ]
    },
    {
        "id": "87c0d8251ea0e9e1",
        "type": "http response",
        "z": "3f82c49c8d750693",
        "name": "Response",
        "statusCode": "",
        "headers": {},
        "x": 560,
        "y": 780,
        "wires": []
    },
    {
        "id": "e01623f8f7cd25dd",
        "type": "function",
        "z": "3f82c49c8d750693",
        "name": "Edit Schdule",
        "func": "const db = global.get(\"connetion_mongo\");\nconst jwt = global.get(\"jwt\");\nconst dotenv = global.get(\"env\").config().parsed;\nconst bcrypt = global.get(\"bcrypt\");\nconst collectionEnum = global.get(\"CollectionEnum\");\nconst collectionQR = db.collection(collectionEnum.QR_DATA);\nconst qrLocationEnum = global.get('QrLocationEnum');\n\n\nconst token = msg.req.headers.authorization;\n\n// node.warn(query.index);\n\ntry {\n    if (await validateJWT(token.replace(\"Bearer\", \"\").trim())) {\n        const body = msg.req.body;\n        node.warn(body);\n        let response = {};\n        // const report = await db.collection(collectionEnum.WORK_SCHEDULE).find({ index: parseInt(body.index) }).toArray();\n        const isActive = body.data?.status === 'active' ? true : body.data?.status === 'inactive' ? false : false;\n        const isActiveOT = body.data?.statusOT === 'active' ? true : body.data?.statusOT === 'inactive' ? false : false;\n        await db.collection(collectionEnum.WORK_SCHEDULE).updateOne(\n            { index: parseInt(body.index) },\n            {\n                $set: {\n                    \"is_active\": isActive,\n                    \"overtime.is_active\": isActiveOT,\n                    \"morning.start.hour\": body.data?.hhMorningStart ? Number(body.data?.hhMorningStart) : 0,\n                    \"morning.start.minute\": body.data?.mmMorningStart ? Number(body.data?.mmMorningStart): 0,\n                    \"morning.end.hour\": body.data?.hhMorningEnd ? Number(body.data?.hhMorningEnd): 0,\n                    \"morning.end.minute\": body.data?.mmMorningEnd ? Number(body.data?.mmMorningEnd): 0,\n                    \"afternoon.start.hour\": body.data?.hhAfternoonStart ? Number(body.data?.hhAfternoonStart): 0,\n                    \"afternoon.start.minute\": body.data?.mmAfternoonStart ? Number(body.data?.mmAfternoonStart): 0,\n                    \"afternoon.end.hour\": body.data?.hhAfternoonEnd ? Number(body.data?.hhAfternoonEnd): 0,\n                    \"afternoon.end.minute\": body.data?.mmAfternoonEnd ? Number(body.data?.mmAfternoonEnd): 0,\n                    \"overtime.start.hour\": body.data?.hhOTStart ? Number(body.data?.hhOTStart): 0,\n                    \"overtime.start.minute\": body.data?.mmOTStart ? Number(body.data?.mmOTStart): 0,\n                    \"overtime.end.hour\": body.data?.hhOTEnd ? Number(body.data?.hhOTEnd): 0,\n                    \"overtime.end.minute\": body.data?.mmOTEnd ? Number(body.data?.mmOTEnd): 0\n                }\n            }\n        ).then((result) => {\n            node.warn(\"Update worke shedule success!\");\n        }).catch((error) => {\n            node.warn(error);\n        });\n\n\n        msg.statusCode = 200;\n        msg.payload = {\n            data: response\n        }\n        return msg;\n    } else {\n        msg.statusCode = 400;\n        msg.payload = {\n            \"code\": \"ERR_0004\",\n            \"message\": \"Accesss token หมดอายุหรือไม่ถูกต้อง\",\n            \"data\": null\n        };\n        node.warn(msg);\n        return msg;\n    }\n\n} catch (error) {\n    node.warn(error);\n    msg.statusCode = 400;\n    msg.payload = {\n        \"code\": \"ERR_0004\",\n        \"message\": \"Accesss token หมดอายุหรือไม่ถูกต้อง\",\n        \"data\": null\n    };\n    node.warn(msg);\n    return msg;\n};\n\nfunction removeBearerPrefix(jwt) {\n    if (jwt.startsWith('Bearer ')) {\n        return jwt.substring(7);\n    }\n    return jwt;\n}\n\n\n// Function to validate JWT\nasync function validateJWT(token) {\n    try {\n        // node.warn(token);\n        // node.warn(token);\n        // Verify the token using the secret key\n        const payload = await jwt.verify(token, dotenv.SECRETKEY);\n        // node.warn(payload)\n        // Check if the token has expired\n        const now = Date.now() / 1000; // Convert current time to seconds\n        if (payload.exp < now) {\n            return false;\n        }\n        // If the token is valid and has not expired, return the payload\n        return true;\n    } catch (error) {\n        console.error(\"error: \", error);\n        node.warn(\"error: \" + error);\n        // If there's an error verifying the token, return an error message\n        return false;\n    }\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 780,
        "wires": [
            [
                "87c0d8251ea0e9e1"
            ]
        ]
    },
    {
        "id": "6693fcf52c79b76e",
        "type": "http in",
        "z": "3f82c49c8d750693",
        "name": "Edit Schdule",
        "url": "/api/schedule/edit",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 150,
        "y": 780,
        "wires": [
            [
                "e01623f8f7cd25dd"
            ]
        ]
    },
    {
        "id": "10e9466ab9a28620",
        "type": "comment",
        "z": "3f82c49c8d750693",
        "name": "Export excel",
        "info": "",
        "x": 150,
        "y": 820,
        "wires": []
    },
    {
        "id": "d650a074b115a456",
        "type": "http in",
        "z": "3f82c49c8d750693",
        "name": "House export excel",
        "url": "/api/export/house",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 170,
        "y": 860,
        "wires": [
            [
                "892d9c964df03f55"
            ]
        ]
    },
    {
        "id": "e68360a283725a02",
        "type": "http response",
        "z": "3f82c49c8d750693",
        "name": "Response",
        "statusCode": "",
        "headers": {},
        "x": 560,
        "y": 860,
        "wires": []
    },
    {
        "id": "892d9c964df03f55",
        "type": "function",
        "z": "3f82c49c8d750693",
        "name": "House export",
        "func": "const db = global.get(\"connetion_mongo\");\nconst moment = global.get('moment_timezone');\nconst jwt = global.get(\"jwt\");\nconst dotenv = global.get(\"env\").config().parsed;\nconst bcrypt = global.get(\"bcrypt\");\nconst collectionEnum = global.get(\"CollectionEnum\");\nconst collectionQR = db.collection(collectionEnum.QR_DATA);\nconst qrLocationEnum = global.get('QrLocationEnum');\nconst XLSX = global.get(\"xlsx\");\nconst payload = msg.payload;\nconst token = msg.req.headers.authorization;\n\n\nlet startDate = msg.req.query.startDate;\nlet endDate = msg.req.query.endDate;\n// const startOfDay = moment(searchDate, 'YYYY/MM/DD').startOf('day');\n// const endOfDay = moment(searchDate, 'YYYY/MM/DD').endOf('day');\nstartDate = moment(startDate, 'YYYY/MM/DDTHH:mm:ss')\nendDate = moment(endDate, 'YYYY/MM/DDTHH:mm:ss')\n\ntry {\n    if (await validateJWT(token.replace(\"Bearer\", \"\").trim())) {\n\n        const report = await db.collection(collectionEnum.HOUSE_PRODUCTION_RECORDS).find(\n            {\n                record_date_time: {\n                    $gte: startDate.toDate(),\n                    $lte: endDate.toDate(),\n                },\n            }\n        ).toArray();\n        \n        // msg.headers = {};\n        // msg.headers['Content-Disposition'] = 'attachment; filename=data.xlsx';\n        // msg.headers['Content-Type'] = 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet';\n        msg.statusCode = 200;\n        msg.payload = {\n            data: report.map(({ _id, ...rest }) => rest)\n        }\n        return msg;\n\n    } else {\n        msg.statusCode = 400;\n        msg.payload = {\n            \"code\": \"ERR_0004\",\n            \"message\": \"Accesss token หมดอายุหรือไม่ถูกต้อง\",\n            \"data\": null\n        };\n        node.warn(msg);\n        return msg;\n    }\n\n} catch (error) {\n    node.warn(error);\n    msg.statusCode = 400;\n    msg.payload = {\n        \"code\": \"ERR_0004\",\n        \"message\": \"Accesss token หมดอายุหรือไม่ถูกต้อง\",\n        \"data\": null\n    };\n    node.warn(msg);\n    return msg;\n};\n\nfunction removeBearerPrefix(jwt) {\n    if (jwt.startsWith('Bearer ')) {\n        return jwt.substring(7);\n    }\n    return jwt;\n}\n\n\n// Function to validate JWT\nasync function validateJWT(token) {\n    try {\n        // node.warn(token);\n        // node.warn(token);\n        // Verify the token using the secret key\n        const payload = await jwt.verify(token, dotenv.SECRETKEY);\n        // node.warn(payload)\n        // Check if the token has expired\n        const now = Date.now() / 1000; // Convert current time to seconds\n        if (payload.exp < now) {\n            return false;\n        }\n        // If the token is valid and has not expired, return the payload\n        return true;\n    } catch (error) {\n        console.error(\"error: \", error);\n        node.warn(\"error: \" + error);\n        // If there's an error verifying the token, return an error message\n        return false;\n    }\n}\n\nfunction exportToExcel(data) {\n\n    // แปลง JSON เป็น Excel\n    const dataForExcel = data.map(item => [\n        item._id,\n        item.record_date_time,\n        item.entry_time,\n        item.house_name,\n        item.house_code,\n        item.total_unit,\n        item.mj_date,\n        item.mj_date_time,\n        item.installation_date,\n        item.all_part_finish_date_time,\n        item.duration\n    ]);\n\n    const workbook = XLSX.utils.book_new();\n    const worksheet = XLSX.utils.aoa_to_sheet(dataForExcel);\n    XLSX.utils.book_append_sheet(workbook, worksheet, 'data');\n    return XLSX.write(workbook, { type: 'buffer', bookType: 'xlsx' });\n    // data = data.map(({ _id, ...rest }) => rest); // remove id\n    // const ws = XLSX.utils.json_to_sheet(data);\n    // const wb = XLSX.utils.book_new();\n    // XLSX.utils.book_append_sheet(wb, ws, 'Sheet1');\n    // const excelBuffer = XLSX.write(wb, { bookType: 'xlsx', type: 'buffer' });\n    // XLSX.writeFile(wb, \"fileName\" + '.xlsx');\n    // return excelBuffer;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 860,
        "wires": [
            [
                "e68360a283725a02"
            ]
        ]
    },
    {
        "id": "85fc2ad044675496",
        "type": "http in",
        "z": "3f82c49c8d750693",
        "name": "Part export excel",
        "url": "/api/export/part",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 160,
        "y": 900,
        "wires": [
            [
                "5d483d0185b292ec"
            ]
        ]
    },
    {
        "id": "5074c4f77c76dae2",
        "type": "http response",
        "z": "3f82c49c8d750693",
        "name": "Response",
        "statusCode": "",
        "headers": {},
        "x": 560,
        "y": 900,
        "wires": []
    },
    {
        "id": "5d483d0185b292ec",
        "type": "function",
        "z": "3f82c49c8d750693",
        "name": "Part export",
        "func": "const db = global.get(\"connetion_mongo\");\nconst moment = global.get('moment_timezone');\nconst jwt = global.get(\"jwt\");\nconst dotenv = global.get(\"env\").config().parsed;\nconst bcrypt = global.get(\"bcrypt\");\nconst collectionEnum = global.get(\"CollectionEnum\");\nconst collectionQR = db.collection(collectionEnum.QR_DATA);\nconst qrLocationEnum = global.get('QrLocationEnum');\n\nconst payload = msg.payload;\nconst token = msg.req.headers.authorization;\n\nlet startDate = msg.req.query.startDate;\nlet endDate = msg.req.query.endDate;\n// const startOfDay = moment(searchDate, 'YYYY/MM/DD').startOf('day');\n// const endOfDay = moment(searchDate, 'YYYY/MM/DD').endOf('day');\nstartDate = moment(startDate, 'YYYY/MM/DDTHH:mm:ss')\nendDate = moment(endDate, 'YYYY/MM/DDTHH:mm:ss')\nnode.warn(startDate.toDate());\nnode.warn(endDate.toDate());\n\ntry {\n    if (await validateJWT(token.replace(\"Bearer\", \"\").trim())) {\n        const report = await db.collection(collectionEnum.PART_PRODUCTION_RECORDS).find(\n            {\n                record_date_time: {\n                    $gte: startDate.toDate(),\n                    $lte: endDate.toDate(),\n                },\n            }\n        ).toArray();\n        const response = report.map((item) => {\n            return {\n                key: item._id,\n                record_date_time: moment(item.record_date_time).format('YYYY-MM-DD HH:mm:ss'),\n                house_name: item.house_name,\n                house_code: item.house_code,\n                part_order: item.units_number,\n                type: item.type,\n                total_unit: item.total_unit,\n                mj_date: item.mj_date,\n                mj_date_time: \"\",\n                installation_date: item.installation_date,\n                part_finish_date_time: moment(item.all_part_finish_date_time).format('YYYY-MM-DD HH:mm:ss'),\n                weight: item.weight,\n                ct_mj: item.ct_min_at_mj,\n                ct_buffer: item.ct_min_at_buffer,\n                ct_bypass1: item.ct_min_at_bypass1,\n                ct_ew: item.ct_min_at_ew,\n                ct_ee_in: item.ct_min_at_ee_in,\n                ct_iwpt: item.ct_min_at_iwpt,\n                ct_bypass2: item.ct_min_at_bypass2,\n                ct_door: item.ct_min_at_door,\n                ct_windows: item.ct_min_at_window,\n                ct_scaffold: item.ct_min_at_scaffold,\n                ct_loading: item.ct_min_at_loading,\n                ct_weight: item.ct_min_at_weight,\n            }\n        })\n\n        msg.statusCode = 200;\n        msg.payload = {\n            data: response\n        }\n        return msg;\n    } else {\n        msg.statusCode = 400;\n        msg.payload = {\n            \"code\": \"ERR_0004\",\n            \"message\": \"Accesss token หมดอายุหรือไม่ถูกต้อง\",\n            \"data\": null\n        };\n        node.warn(msg);\n        return msg;\n    }\n\n} catch (error) {\n    node.warn(error);\n    msg.statusCode = 400;\n    msg.payload = {\n        \"code\": \"ERR_0004\",\n        \"message\": \"Accesss token หมดอายุหรือไม่ถูกต้อง\",\n        \"data\": null\n    };\n    node.warn(msg);\n    return msg;\n};\n\nfunction removeBearerPrefix(jwt) {\n    if (jwt.startsWith('Bearer ')) {\n        return jwt.substring(7);\n    }\n    return jwt;\n}\n\n\n// Function to validate JWT\nasync function validateJWT(token) {\n    try {\n        // node.warn(token);\n        // node.warn(token);\n        // Verify the token using the secret key\n        const payload = await jwt.verify(token, dotenv.SECRETKEY);\n        // node.warn(payload)\n        // Check if the token has expired\n        const now = Date.now() / 1000; // Convert current time to seconds\n        if (payload.exp < now) {\n            return false;\n        }\n        // If the token is valid and has not expired, return the payload\n        return true;\n    } catch (error) {\n        console.error(\"error: \", error);\n        node.warn(\"error: \" + error);\n        // If there's an error verifying the token, return an error message\n        return false;\n    }\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 900,
        "wires": [
            [
                "5074c4f77c76dae2"
            ]
        ]
    },
    {
        "id": "fb79c89b7f852cd7",
        "type": "function",
        "z": "3f82c49c8d750693",
        "name": "House export",
        "func": "const db = global.get(\"connetion_mongo\");\nconst moment = global.get('moment_timezone');\nconst jwt = global.get(\"jwt\");\nconst dotenv = global.get(\"env\").config().parsed;\nconst bcrypt = global.get(\"bcrypt\");\nconst collectionEnum = global.get(\"CollectionEnum\");\nconst collectionQR = db.collection(collectionEnum.QR_DATA);\nconst qrLocationEnum = global.get('QrLocationEnum');\nconst XLSX = global.get('xlsx');\n\ntry {\n    if (true) {\n\n        const report = await db.collection(collectionEnum.HOUSE_PRODUCTION_RECORDS).find(\n            // {\n            //     record_date_time: {\n            //         $gte: startDate.toDate(),\n            //         $lte: endDate.toDate(),\n            //     },\n            // }\n        ).toArray();\n\n        msg.statusCode = 200;\n        msg.payload = {\n            data: exportToExcel(report)\n        }\n        return msg;\n    } else {\n        msg.statusCode = 400;\n        msg.payload = {\n            \"code\": \"ERR_0004\",\n            \"message\": \"Accesss token หมดอายุหรือไม่ถูกต้อง\",\n            \"data\": null\n        };\n        node.warn(msg);\n        return msg;\n    }\n\n} catch (error) {\n    node.warn(error);\n    msg.statusCode = 400;\n    msg.payload = {\n        \"code\": \"ERR_0004\",\n        \"message\": \"Accesss token หมดอายุหรือไม่ถูกต้อง\",\n        \"data\": null\n    };\n    node.warn(msg);\n    return msg;\n};\n\nfunction removeBearerPrefix(jwt) {\n    if (jwt.startsWith('Bearer ')) {\n        return jwt.substring(7);\n    }\n    return jwt;\n}\n\n\n// Function to validate JWT\nasync function validateJWT(token) {\n    try {\n        // node.warn(token);\n        // node.warn(token);\n        // Verify the token using the secret key\n        const payload = await jwt.verify(token, dotenv.SECRETKEY);\n        // node.warn(payload)\n        // Check if the token has expired\n        const now = Date.now() / 1000; // Convert current time to seconds\n        if (payload.exp < now) {\n            return false;\n        }\n        // If the token is valid and has not expired, return the payload\n        return true;\n    } catch (error) {\n        console.error(\"error: \", error);\n        node.warn(\"error: \" + error);\n        // If there's an error verifying the token, return an error message\n        return false;\n    }\n}\n\nfunction exportToExcel(data) {\n    data = data.map(({ _id, ...rest }) => rest); // remove id\n    const ws = XLSX.utils.json_to_sheet(data);\n    const wb = XLSX.utils.book_new();\n    XLSX.utils.book_append_sheet(wb, ws, 'Sheet1');\n    const excelBuffer = XLSX.write(wb, { bookType: 'xlsx', type: 'buffer' });\n    return excelBuffer;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 1100,
        "wires": [
            []
        ]
    },
    {
        "id": "272d6e86a9b8c35d",
        "type": "inject",
        "z": "3f82c49c8d750693",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 180,
        "y": 1100,
        "wires": [
            [
                "fb79c89b7f852cd7"
            ]
        ]
    },
    {
        "id": "b3b62eb3b8c77699",
        "type": "comment",
        "z": "3f82c49c8d750693",
        "name": "Schdule",
        "info": "",
        "x": 140,
        "y": 660,
        "wires": []
    },
    {
        "id": "601192c7710408a4",
        "type": "comment",
        "z": "3f82c49c8d750693",
        "name": "Report",
        "info": "",
        "x": 130,
        "y": 440,
        "wires": []
    },
    {
        "id": "4f0fcfa0dfc50cad",
        "type": "http in",
        "z": "3f82c49c8d750693",
        "name": "Weigth report",
        "url": "/api/report/weigth",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 150,
        "y": 560,
        "wires": [
            [
                "f08d74c5ab922ef7"
            ]
        ]
    },
    {
        "id": "09a35d242c46c97c",
        "type": "http response",
        "z": "3f82c49c8d750693",
        "name": "Response",
        "statusCode": "",
        "headers": {},
        "x": 560,
        "y": 560,
        "wires": []
    },
    {
        "id": "f08d74c5ab922ef7",
        "type": "function",
        "z": "3f82c49c8d750693",
        "name": "Weigth Report",
        "func": "const db = global.get(\"connetion_mongo\");\nconst moment = global.get('moment_timezone');\nconst jwt = global.get(\"jwt\");\nconst dotenv = global.get(\"env\").config().parsed;\nconst bcrypt = global.get(\"bcrypt\");\nconst collectionEnum = global.get(\"CollectionEnum\");\nconst collectionQR = db.collection(collectionEnum.QR_DATA);\nconst qrLocationEnum = global.get('QrLocationEnum');\n\nconst token = msg.req.headers.authorization;\nconst payload = msg.payload;\nlet houseCode = payload.houseCode;\nlet houseName = payload.houseName;\n\nnode.warn(`start weigth report...`);\nnode.warn(`houseCode:${houseCode}`);\nnode.warn(`houseName:${houseName}`);\ntry {\n    let response = [];\n    if (await validateJWT(token.replace(\"Bearer\", \"\").trim())) {\n        const matchCondition = {\n            $or: []\n        };\n\n        if (houseName && houseName.length > 0) {\n            matchCondition.$or.push({\n                house_name: {\n                    $in: houseName\n                }\n            });\n        }\n\n        if (houseCode && houseCode.length > 0) {\n            matchCondition.$or.push({\n                house_code: {\n                    $in: houseCode\n                }\n            });\n        }\n\n        if (matchCondition.$or.length > 0) {\n            const result = await db.collection(collectionEnum.PART_PRODUCTION_RECORDS).aggregate([\n                {\n                    $match: matchCondition\n                },\n                {\n                    $project: {\n                        _id: 0, \n                        house_name: 1,\n                        house_code: 1,\n                        units_number: 1,\n                        weight: 1, \n                        ct_min_at_weight: 1, \n                        total_unit: 1 \n                    }\n                }\n            ]).toArray();\n            // ใช้ Map เพื่อแยกข้อมูลตาม house_code\n            const separatedData = new Map();\n            for (const item of result) {\n                const { house_code } = item;\n\n                if (!separatedData.has(house_code)) {\n                    separatedData.set(house_code, []);\n                }\n\n                separatedData.get(house_code).push(item);\n            }\n\n            // แปลงข้อมูลใน Map เป็นอาร์เรย์\n            const separatedArray = [...separatedData.values()];\n\n            for (const parts of separatedArray){\n                let weights = [];\n                let total_weight_time = 0;\n                const newPart = {\n                    house_name: parts[0].house_name,\n                    house_code: parts[0].house_code,\n                    total_unit: parts[0].total_unit,\n                    total_weight_time: 0,\n                    weight_avg: 0,\n                    weight_max: 0,\n                    weight_min: 0,\n                    parts: []\n                }\n                for (const part of parts){\n                    if (part.weight){\n                        weights.push(part.weight);\n                    }\n                    if (part.ct_min_at_weight){\n                        total_weight_time += part.ct_min_at_weight;\n                    }\n                    newPart.parts.push(part)\n                }\n                newPart.total_weight_time = total_weight_time;\n                if (weights.length > 0){\n                    newPart.weight_avg = weights.reduce((acc, val) => acc + val, 0) / newPart.total_unit;\n                    newPart.weight_max = Math.max(...weights);\n                    newPart.weight_min = Math.min(...weights);\n                }\n                response.push(newPart)\n                // console.log(newPart)\n            }\n            console.log(`response:${JSON.stringify(response)}`);\n        }\n        msg.statusCode = 200;\n        msg.payload = {\n            data: response\n        }\n        return msg;\n    } else {\n        msg.statusCode = 400;\n        msg.payload = {\n            \"code\": \"ERR_0004\",\n            \"message\": \"Accesss token หมดอายุหรือไม่ถูกต้อง\",\n            \"data\": null\n        };\n        // node.warn(msg);\n        return msg;\n    }\n\n} catch (error) {\n    node.warn(error);\n    msg.statusCode = 400;\n    msg.payload = {\n        \"code\": \"ERR_0004\",\n        \"message\": \"Accesss token หมดอายุหรือไม่ถูกต้อง\",\n        \"data\": null\n    };\n    // node.warn(msg);\n    return msg;\n};\n\nfunction removeBearerPrefix(jwt) {\n    if (jwt.startsWith('Bearer ')) {\n        return jwt.substring(7);\n    }\n    return jwt;\n}\n\n\n// Function to validate JWT\nasync function validateJWT(token) {\n    try {\n        // node.warn(token);\n        // node.warn(token);\n        // Verify the token using the secret key\n        const payload = await jwt.verify(token, dotenv.SECRETKEY);\n        // node.warn(payload)\n        // Check if the token has expired\n        const now = Date.now() / 1000; // Convert current time to seconds\n        if (payload.exp < now) {\n            return false;\n        }\n        // If the token is valid and has not expired, return the payload\n        return true;\n    } catch (error) {\n        console.error(\"error: \", error);\n        node.warn(\"error: \" + error);\n        // If there's an error verifying the token, return an error message\n        return false;\n    }\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 560,
        "wires": [
            [
                "09a35d242c46c97c"
            ]
        ]
    },
    {
        "id": "4beb985289727d6c",
        "type": "comment",
        "z": "3f82c49c8d750693",
        "name": "Update installation date",
        "info": "",
        "x": 180,
        "y": 280,
        "wires": []
    },
    {
        "id": "762f7694de0bed75",
        "type": "http in",
        "z": "3f82c49c8d750693",
        "name": "Update installation date",
        "url": "/api/update/install-date",
        "method": "put",
        "upload": false,
        "swaggerDoc": "",
        "x": 180,
        "y": 320,
        "wires": [
            [
                "879378cc0791c197"
            ]
        ]
    },
    {
        "id": "8a16dca622adb014",
        "type": "http response",
        "z": "3f82c49c8d750693",
        "name": "Response",
        "statusCode": "",
        "headers": {},
        "x": 740,
        "y": 320,
        "wires": []
    },
    {
        "id": "879378cc0791c197",
        "type": "function",
        "z": "3f82c49c8d750693",
        "name": "Change installation date",
        "func": "const db = global.get(\"connetion_mongo\");\nconst moment = global.get('moment_timezone');\nconst jwt = global.get(\"jwt\");\nconst dotenv = global.get(\"env\").config().parsed;\nconst bcrypt = global.get(\"bcrypt\");\nconst collectionEnum = global.get(\"CollectionEnum\");\nconst collectionQR = db.collection(collectionEnum.QR_DATA);\nconst qrLocationEnum = global.get('QrLocationEnum');\n\nconst payload = msg.payload;\nconst token = msg.req.headers.authorization;\nconst house_code = payload.house_code;\nconst installation_date = payload.installation_date;\n\n// node.warn(`house_code:${house_code}`);\n// node.warn(`installation_date:${installation_date}`);\ntry {\n    if (await validateJWT(token.replace(\"Bearer\", \"\").trim())) {\n        let response = [];\n        const result = await db.collection(collectionEnum.HOUSE_PRODUCTION_RECORDS).findOne(\n            {\n                house_code: house_code\n            }\n        );\n        node.warn(result)\n        if (!result) {\n            await saveLog(msg, \"ไม่พบข้อมูล hose_code\", \"ERR_0006\");\n            msg.statusCode = 400;\n            msg.payload = {\n                \"code\": \"ERR_0006\",\n                \"message\": \"ไม่พบข้อมูล hose_code\",\n                \"data\": null\n            };\n            node.warn(msg);\n            return msg;\n        } else {\n            if (result.duration !== null) {\n                await saveLog(msg, \"ไม่สามารถแก้ไข installation date ได้\", \"ERR_0007\");\n                msg.statusCode = 400;\n                msg.payload = {\n                    \"code\": \"ERR_0007\",\n                    \"message\": \"ไม่สามารถแก้ไข installation date ได้\",\n                    \"data\": null\n                };\n                node.warn(msg);\n                return msg;\n            } else {\n                await db.collection(collectionEnum.HOUSE_PRODUCTION_RECORDS).updateOne(\n                    { house_code: house_code },\n                    {\n                        $set: {\n                            \"installation_date\": installation_date\n                        }\n                    }\n                ).then((result) => {\n                    response = result;\n                    node.warn(`Update installation_date:${installation_date} house_code:${house_code} success!`);\n                }).catch((error) => {\n                    node.warn(error);\n                });\n            }\n        }\n        node.warn(`Date::${new Date()}, Function Update Installation date, House code :${house_code}, New date ${installation_date}`);\n        await saveLog(msg, \"ระบบดำเนินการสำเร็จ\", \"INFO_0000\");\n        msg.statusCode = 200;\n        msg.payload = {\n            \"code\": \"INFO_0000\",\n            \"message\": \"ระบบดำเนินการสำเร็จ\"\n        }\n        return msg;\n    } else {\n        msg.statusCode = 401;\n        msg.payload = {\n            \"code\": \"ERR_0004\",\n            \"message\": \"Accesss token หมดอายุหรือไม่ถูกต้อง\",\n            \"data\": null\n        };\n        node.warn(msg);\n        return msg;\n    }\n\n} catch (error) {\n    node.warn(error);\n    msg.statusCode = 401;\n    msg.payload = {\n        \"code\": \"ERR_0004\",\n        \"message\": \"Accesss token หมดอายุหรือไม่ถูกต้อง\",\n        \"data\": null\n    };\n    node.warn(msg);\n    return msg;\n};\n\nfunction removeBearerPrefix(jwt) {\n    if (jwt.startsWith('Bearer ')) {\n        return jwt.substring(7);\n    }\n    return jwt;\n}\n\n\n// Function to validate JWT\nasync function validateJWT(token) {\n    try {\n        // node.warn(token);\n        // node.warn(token);\n        // Verify the token using the secret key\n        const payload = await jwt.verify(token, dotenv.SECRETKEY);\n        // node.warn(payload)\n        // Check if the token has expired\n        const now = Date.now() / 1000; // Convert current time to seconds\n        if (payload.exp < now) {\n            return false;\n        }\n        // If the token is valid and has not expired, return the payload\n        return true;\n    } catch (error) {\n        console.error(\"error: \", error);\n        node.warn(\"error: \" + error);\n        // If there's an error verifying the token, return an error message\n        return false;\n    }\n}\n\nasync function saveLog(msg, reponseMsg, resposeCode) {\n    const payload = msg.payload;\n    const token = msg.req.headers.authorization;\n    const house_code = payload.house_code;\n    const installation_date = payload.installation_date;\n    const user = await getUser(token);\n    const newLog = {\n        created_date: new Date(),\n        created_by: user,\n        request: payload,\n        massgae: `Function Update Installation date, House code :${house_code}, New date ${installation_date}`,\n        response_msg: reponseMsg,\n        response_code: resposeCode\n    }\n    await db.collection(collectionEnum.LOG_INSTALLATION_DATE).insertOne(newLog);\n\n}\n\nasync function getUser(token) {\n    try {\n        const result = await db.collection(collectionEnum.JWT_TOKEN).aggregate([\n            {\n                $match: {\n                    \"token\": token\n                }\n            },\n            {\n                $lookup: {\n                    from: \"users\",\n                    localField: \"user_id\",\n                    foreignField: \"_id\",\n                    as: \"user_info\"\n                }\n            },\n            {\n                $unwind: \"$user_info\"\n            },\n            {\n                $project: {\n                    \"username\": \"$user_info.username\"\n                }\n            }\n        ]).toArray();\n        return result[0];\n    } catch (e) {\n        node.warn(e);\n        return 'System'\n    }\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 320,
        "wires": [
            [
                "8a16dca622adb014"
            ]
        ]
    },
    {
        "id": "75ab34c36a65c91a",
        "type": "http in",
        "z": "3f82c49c8d750693",
        "name": "Get log update installation date",
        "url": "/api/update/install-date",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 210,
        "y": 360,
        "wires": [
            [
                "9b86b579c0c356bc"
            ]
        ]
    },
    {
        "id": "b70a89a59aad3d24",
        "type": "http response",
        "z": "3f82c49c8d750693",
        "name": "Response",
        "statusCode": "",
        "headers": {},
        "x": 740,
        "y": 360,
        "wires": []
    },
    {
        "id": "9b86b579c0c356bc",
        "type": "function",
        "z": "3f82c49c8d750693",
        "name": "Get log installation date",
        "func": "const db = global.get(\"connetion_mongo\");\nconst moment = global.get('moment_timezone');\nconst jwt = global.get(\"jwt\");\nconst dotenv = global.get(\"env\").config().parsed;\nconst bcrypt = global.get(\"bcrypt\");\nconst collectionEnum = global.get(\"CollectionEnum\");\nconst collectionQR = db.collection(collectionEnum.QR_DATA);\nconst qrLocationEnum = global.get('QrLocationEnum');\n\n\nconst token = msg.req.headers.authorization;\nlet startDate = msg.req.query.startDate;\nlet endDate = msg.req.query.endDate;\n// const startOfDay = moment(searchDate, 'YYYY/MM/DD').startOf('day');\n// const endOfDay = moment(searchDate, 'YYYY/MM/DD').endOf('day');\nstartDate = moment(startDate, 'YYYY/MM/DDTHH:mm:ss')\nendDate = moment(endDate, 'YYYY/MM/DDTHH:mm:ss')\ntry {\n    if (await validateJWT(token.replace(\"Bearer\", \"\").trim())) {\n        const result = await db.collection(collectionEnum.LOG_INSTALLATION_DATE)\n            .find({\n                created_date: {\n                    $gte: startDate.toDate(),\n                    $lte: endDate.toDate(),\n                },\n            }).toArray();\n        const count = await db.collection(collectionEnum.LOG_INSTALLATION_DATE).countDocuments();\n        const transfromResult = result.map((item) => ({\n            created_date: moment(item.created_date).format('YYYY/MM/DDTHH:mm:ss'),\n            request: item.request,\n            response_msg: item.response_msg\n        }));\n        // node.warn(result);\n        msg.payload = transfromResult;\n        return msg\n    } else {\n        msg.statusCode = 401;\n        msg.payload = {\n            \"code\": \"ERR_0004\",\n            \"message\": \"Accesss token หมดอายุหรือไม่ถูกต้อง\",\n            \"data\": null\n        };\n        node.warn(msg);\n        return msg;\n    }\n\n} catch (error) {\n    node.warn(error);\n    msg.statusCode = 401;\n    msg.payload = {\n        \"code\": \"ERR_0004\",\n        \"message\": \"Accesss token หมดอายุหรือไม่ถูกต้อง\",\n        \"data\": null\n    };\n    node.warn(msg);\n    return msg;\n};\n\nfunction removeBearerPrefix(jwt) {\n    if (jwt.startsWith('Bearer ')) {\n        return jwt.substring(7);\n    }\n    return jwt;\n}\n\n\n// Function to validate JWT\nasync function validateJWT(token) {\n    try {\n        // node.warn(token);\n        // node.warn(token);\n        // Verify the token using the secret key\n        const payload = await jwt.verify(token, dotenv.SECRETKEY);\n        // node.warn(payload)\n        // Check if the token has expired\n        const now = Date.now() / 1000; // Convert current time to seconds\n        if (payload.exp < now) {\n            return false;\n        }\n        // If the token is valid and has not expired, return the payload\n        return true;\n    } catch (error) {\n        console.error(\"error: \", error);\n        node.warn(\"error: \" + error);\n        // If there's an error verifying the token, return an error message\n        return false;\n    }\n}\n\nasync function saveLog(msg, reponseMsg, resposeCode) {\n    const payload = msg.payload;\n    const token = msg.req.headers.authorization;\n    const house_code = payload.house_code;\n    const installation_date = payload.installation_date;\n    const user = await getUser(token);\n    const newLog = {\n        created_date: new Date(),\n        created_by: user,\n        request: payload,\n        massgae: `Function Update Installation date, House code :${house_code}, New date ${installation_date}`,\n        response_msg: reponseMsg,\n        response_code: resposeCode\n    }\n    await db.collection(collectionEnum.LOG_INSTALLATION_DATE).insertOne(newLog);\n\n}\n\nasync function getUser(token) {\n    try {\n        const result = await db.collection(collectionEnum.JWT_TOKEN).aggregate([\n            {\n                $match: {\n                    \"token\": token\n                }\n            },\n            {\n                $lookup: {\n                    from: \"users\",\n                    localField: \"user_id\",\n                    foreignField: \"_id\",\n                    as: \"user_info\"\n                }\n            },\n            {\n                $unwind: \"$user_info\"\n            },\n            {\n                $project: {\n                    \"username\": \"$user_info.username\"\n                }\n            }\n        ]).toArray();\n        return result[0];\n    } catch (e) {\n        node.warn(e);\n        return 'System'\n    }\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 360,
        "wires": [
            [
                "b70a89a59aad3d24"
            ]
        ]
    },
    {
        "id": "9cb7c9667c4e8fc5",
        "type": "function",
        "z": "3f82c49c8d750693",
        "name": "log response",
        "func": "const ipAddress = msg.req.connection.remoteAddress;\nnode.log(`_msgid:${msg._msgid}|ipAddress:${ipAddress}|Request body:${JSON.stringify(msg.req.body)}`)\nnode.log(`_msgid:${msg._msgid}|ipAddress:${ipAddress}|Respose body:${JSON.stringify(msg.payload)}`)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 200,
        "wires": [
            [
                "4ad24ea68f77f4c4"
            ]
        ]
    },
    {
        "id": "d584af857d92c886",
        "type": "comment",
        "z": "3f82c49c8d750693",
        "name": "Cross Zone",
        "info": "",
        "x": 150,
        "y": 960,
        "wires": []
    },
    {
        "id": "d7ca33b5dabd838f",
        "type": "http in",
        "z": "3f82c49c8d750693",
        "name": "Get Cross Zone",
        "url": "/api/cross-zone",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 160,
        "y": 1000,
        "wires": [
            [
                "0c7810e4a06ec99a"
            ]
        ]
    },
    {
        "id": "90e6d5f00f32fc26",
        "type": "http response",
        "z": "3f82c49c8d750693",
        "name": "Response",
        "statusCode": "",
        "headers": {},
        "x": 560,
        "y": 1000,
        "wires": []
    },
    {
        "id": "0c7810e4a06ec99a",
        "type": "function",
        "z": "3f82c49c8d750693",
        "name": "Cross Zone",
        "func": "const db = global.get(\"connetion_mongo\");\nconst moment = global.get('moment_timezone');\nconst jwt = global.get(\"jwt\");\nconst dotenv = global.get(\"env\").config().parsed;\nconst bcrypt = global.get(\"bcrypt\");\nconst collectionEnum = global.get(\"CollectionEnum\");\nconst collectionQR = db.collection(collectionEnum.QR_DATA);\nconst qrLocationEnum = global.get('QrLocationEnum');\n\n\nconst token = msg.req.headers.authorization;\nlet startDate = msg.req.query.startDate;\nlet endDate = msg.req.query.endDate;\nstartDate = moment(startDate, 'YYYY/MM/DDTHH:mm:ss')\nendDate = moment(endDate, 'YYYY/MM/DDTHH:mm:ss')\ntry {\n    if (await validateJWT(token.replace(\"Bearer\", \"\").trim())) {\n        const result = await db.collection(collectionEnum.LOG_CROSS_ZONE)\n            .find({\n                created_date: {\n                    $gte: startDate.toDate(),\n                    $lte: endDate.toDate(),\n                },\n            }).toArray();\n        // node.warn(result);\n        const transfromResult = result.map((item) => {\n            const qr_code = item.qr_code.split(';');\n            return {\n                created_date: moment(item.created_date).format('YYYY/MM/DDTHH:mm:ss'),\n                house_code: qr_code[0],\n                house_name: qr_code[1],\n                unit_number: qr_code[3],\n                from_zone: `zone ${item.from_zone}`,\n                to_zone: `zone ${item.to_zone}`,\n            };\n        });\n        // node.warn(result);\n        msg.payload = transfromResult;\n        return msg\n    } else {\n        msg.statusCode = 401;\n        msg.payload = {\n            \"code\": \"ERR_0004\",\n            \"message\": \"Accesss token หมดอายุหรือไม่ถูกต้อง\",\n            \"data\": null\n        };\n        node.warn(msg);\n        return msg;\n    }\n\n} catch (error) {\n    node.warn(error);\n    msg.statusCode = 401;\n    msg.payload = {\n        \"code\": \"ERR_0004\",\n        \"message\": \"Accesss token หมดอายุหรือไม่ถูกต้อง\",\n        \"data\": null\n    };\n    node.warn(msg);\n    return msg;\n};\n\nfunction removeBearerPrefix(jwt) {\n    if (jwt.startsWith('Bearer ')) {\n        return jwt.substring(7);\n    }\n    return jwt;\n}\n\n\n// Function to validate JWT\nasync function validateJWT(token) {\n    try {\n        // node.warn(token);\n        // node.warn(token);\n        // Verify the token using the secret key\n        const payload = await jwt.verify(token, dotenv.SECRETKEY);\n        // node.warn(payload)\n        // Check if the token has expired\n        const now = Date.now() / 1000; // Convert current time to seconds\n        if (payload.exp < now) {\n            return false;\n        }\n        // If the token is valid and has not expired, return the payload\n        return true;\n    } catch (error) {\n        console.error(\"error: \", error);\n        node.warn(\"error: \" + error);\n        // If there's an error verifying the token, return an error message\n        return false;\n    }\n}\n\nasync function saveLog(msg, reponseMsg, resposeCode) {\n    const payload = msg.payload;\n    const token = msg.req.headers.authorization;\n    const house_code = payload.house_code;\n    const installation_date = payload.installation_date;\n    const user = await getUser(token);\n    const newLog = {\n        created_date: new Date(),\n        created_by: user,\n        request: payload,\n        massgae: `Function Update Installation date, House code :${house_code}, New date ${installation_date}`,\n        response_msg: reponseMsg,\n        response_code: resposeCode\n    }\n    await db.collection(collectionEnum.LOG_INSTALLATION_DATE).insertOne(newLog);\n\n}\n\nasync function getUser(token) {\n    try {\n        const result = await db.collection(collectionEnum.JWT_TOKEN).aggregate([\n            {\n                $match: {\n                    \"token\": token\n                }\n            },\n            {\n                $lookup: {\n                    from: \"users\",\n                    localField: \"user_id\",\n                    foreignField: \"_id\",\n                    as: \"user_info\"\n                }\n            },\n            {\n                $unwind: \"$user_info\"\n            },\n            {\n                $project: {\n                    \"username\": \"$user_info.username\"\n                }\n            }\n        ]).toArray();\n        return result[0];\n    } catch (e) {\n        node.warn(e);\n        return 'System'\n    }\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 1000,
        "wires": [
            [
                "90e6d5f00f32fc26"
            ]
        ]
    },
    {
        "id": "97ba56669b53eed7",
        "type": "inject",
        "z": "c50d486d4200cd31",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "10",
        "crontab": "",
        "once": true,
        "onceDelay": "10",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 330,
        "y": 400,
        "wires": [
            [
                "d6e004ab2dd3020a"
            ]
        ]
    },
    {
        "id": "b05997d8c39d11bd",
        "type": "function",
        "z": "c50d486d4200cd31",
        "name": "zone2",
        "func": "const listProductionData = msg.payload;\nconst listDataZone2 = listProductionData.filter(item => item.current_zone === 2);\nconst dotenv = global.get(\"env\").config().parsed;\nconst endPointUrl = global.get('endPointUrl');\nconst tagObj = []\nfor (let index = 0; index < 16; index++) {\n    const matchingData = listDataZone2.find(data => data.current_block === (index + 1));\n    let unit_type = matchingData?.qr_data_detail.data?.type === \"N\" ? \"\" : `-${matchingData?.qr_data_detail.data?.type}`;\n    const newObj = {\n        \"status\": true,\n        \"label\": `ST2_${index + 1}`,\n        \"value\": 1,\n        \"text\": matchingData ? `${matchingData?.qr_data_detail.data?.unit_type}-${matchingData?.qr_data_detail.data?.units_number.toString().padStart(2, '0')}${unit_type}` : \" \"\n    };\n    tagObj.push(newObj);\n}\n// node.warn(tagObj);\nconst payload = {\n    \"siteID\": dotenv.SIDE_ID,\n    \"deviceID\": 500,\n    \"date\": \"\",\n    \"offset\": -420,\n    \"connection\": \"REST\",\n    \"tagObj\": tagObj\n}\nmsg.method = \"POST\";\nmsg.url = endPointUrl;\nmsg.payload = payload;\nnode.send(msg);",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 400,
        "wires": [
            [
                "9237c7da5297518f"
            ]
        ]
    },
    {
        "id": "d6e004ab2dd3020a",
        "type": "function",
        "z": "c50d486d4200cd31",
        "name": "Query Data",
        "func": "const db = global.get(\"connetion_mongo\");\nconst collectionEnum = global.get(\"CollectionEnum\");\nconst zoneEnum = global.get('ZoneEnum');\n\ntry {\n    const payload = await db.collection(collectionEnum.PRODUCTION_DATA)\n        .find({ \"is_active\": true })\n        .sort({ \"current_zone\": 1 }) // 1 คือการเรียงลำดับจากน้อยไปมาก (ascending)\n        .toArray();\n    \n    msg.payload = payload;\n    return msg\n} catch (error) {\n    node.warn(error);\n};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 400,
        "wires": [
            [
                "b05997d8c39d11bd",
                "baf48381585345fb",
                "0b7897186f786f38",
                "a5c9cfa06a499c33",
                "ddcbb031997bde45",
                "bcc4477d1ed7db74",
                "f3e3ee94447853af",
                "ddc20f696c1ac11a",
                "b8eedd80fe79dc8e",
                "d8e75ee7fa4187c5",
                "5334f915d7ff8760",
                "d1602b401aaa2f27",
                "eed9961a2b5fcab8"
            ]
        ]
    },
    {
        "id": "a832f45910e87543",
        "type": "inject",
        "z": "c50d486d4200cd31",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "10",
        "crontab": "",
        "once": true,
        "onceDelay": "10",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 330,
        "y": 100,
        "wires": [
            [
                "2fb2806df0c1af8a",
                "5aca04af7ec1d78a"
            ]
        ]
    },
    {
        "id": "2fb2806df0c1af8a",
        "type": "function",
        "z": "c50d486d4200cd31",
        "name": "House Status",
        "func": "const dotenv = global.get(\"env\").config().parsed;\nconst moment = global.get('moment_timezone');\nconst db = global.get(\"connetion_mongo\");\nconst endPointUrl = global.get('endPointUrl');\nconst collectionEnum = global.get(\"CollectionEnum\");\n\n//เพิ่มเงื่อนไขถ้า house ไหน finish แล้วให้นำวัน (Inst date + 2) แล้วน้อยกว่าวันปัจจุบันให้เอาออก\nconst results = await db.collection(collectionEnum.HOUSE_PRODUCTION_RECORDS)\n    .find({ \"is_active\": true })\n    .sort({ \"mj_date\": 1 }) // 1 คือการเรียงลำดับจากน้อยไปมาก (ascending)\n    .toArray();\n\nconst resultsLength = results.length;\nfor (let index = 0; index < 15; index++) {\n    const dateNow = moment().startOf('day');\n    const houseRecords = results[index];\n    let mjDate = \"\";\n    if (houseRecords?.mj_date !== undefined){\n        mjDate = moment(houseRecords?.mj_date);\n    }\n    const instDate = moment(houseRecords?.installation_date, \"DDMMYYYY\").startOf('day');\n    // node.warn(`instDate:${instDate}`);\n    // node.warn(`dateNow:${dateNow}`);\n    //calculate CT\n    // node.warn(`deviceID:${514 + index}`);\n    const payload = {\n        \"siteID\": dotenv.SIDE_ID,\n        \"deviceID\": 514 + index,\n        \"date\": \"\",\n        \"offset\": -420,\n        \"connection\": \"REST\",\n        \"tagObj\": [\n            {\n                \"status\": true,\n                \"label\": `Unit${index + 1}`,\n                \"value\": houseRecords?.total_unit ? Number(houseRecords?.total_unit) : 0,\n                \"text\": houseRecords?.total_unit ? Number(houseRecords?.total_unit) : \"\"\n            },\n            {\n                \"status\": true,\n                \"label\": `Assy${index + 1}`,\n                \"value\": houseRecords?.assy ? Number(houseRecords?.assy) : 0,\n                \"text\": houseRecords?.assy ? Number(houseRecords?.assy) : \"\"\n            },\n            {\n                \"status\": true,\n                \"label\": `Finish${index + 1}`,\n                \"value\": houseRecords?.unit_finish ? Number(houseRecords?.unit_finish) : 0,\n                \"text\": houseRecords?.unit_finish ? Number(houseRecords?.unit_finish) : \"\"\n            },\n            {\n                \"status\": true,\n                \"label\": `House_Name${index + 1}`,\n                \"value\": 0,\n                \"text\": houseRecords?.house_name ? houseRecords?.house_name : \"\"\n            },\n            {\n                \"status\": true,\n                \"label\": `Color${index + 1}`,\n                \"value\": houseRecords?.color ? houseRecords?.color : 0, \n                \"text\": houseRecords?.color ? houseRecords?.color : \"\"\n            },\n            {\n                \"status\": true,\n                \"label\": `MJ${index + 1}`,\n                \"value\": 0,\n                \"text\": mjDate ? mjDate.format('ddd, DD-MMM') : \"\"\n            },\n            {\n                \"status\": true,\n                \"label\": `Inst${index + 1}`,\n                \"value\": 0,\n                \"text\": mjDate ? instDate.format('ddd, DD-MMM') : \"\"\n            },\n            {\n                \"status\": true,\n                \"label\": `Remain${index + 1}`,\n                \"value\": 0,\n                \"text\": dateNow ? instDate.diff(dateNow, 'days') : \"\"\n            },\n            {\n                \"status\": true,\n                \"label\": `CT${index + 1}`,\n                \"value\": 0,\n                \"text\": houseRecords?.ct ? houseRecords.ct : \"\"\n            },\n            {\n                \"status\": true,\n                \"label\": `Arrow${index + 1}`,\n                \"value\": resultsLength === (index + 1) ? 1 : 0,\n                \"text\": resultsLength === (index + 1) ? 1 : \"\"\n            },\n        ]\n    }\n    msg.method = \"POST\";\n    msg.url = endPointUrl;\n    msg.payload = payload;\n    node.send(msg);\n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 100,
        "wires": [
            [
                "8b5c5ca9ed61abe7"
            ]
        ]
    },
    {
        "id": "c4aa979c0ba1679f",
        "type": "comment",
        "z": "c50d486d4200cd31",
        "name": "API House Status",
        "info": "",
        "x": 320,
        "y": 60,
        "wires": []
    },
    {
        "id": "80a5f5fb4644121a",
        "type": "comment",
        "z": "c50d486d4200cd31",
        "name": "API Bathtoom station",
        "info": "",
        "x": 340,
        "y": 160,
        "wires": []
    },
    {
        "id": "4fddf97cf87a43b9",
        "type": "comment",
        "z": "c50d486d4200cd31",
        "name": "API Stair station",
        "info": "",
        "x": 320,
        "y": 240,
        "wires": []
    },
    {
        "id": "6bcfd8fe19668822",
        "type": "comment",
        "z": "c50d486d4200cd31",
        "name": "API Send data in line production",
        "info": "",
        "x": 370,
        "y": 360,
        "wires": []
    },
    {
        "id": "f8919195fecdf853",
        "type": "function",
        "z": "c50d486d4200cd31",
        "d": true,
        "g": "6cca8702023da790",
        "name": "House Status",
        "func": "node.warn(msg);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 580,
        "y": 1100,
        "wires": [
            [
                "8ec2ee2ff6b50781"
            ]
        ]
    },
    {
        "id": "8ec2ee2ff6b50781",
        "type": "http response",
        "z": "c50d486d4200cd31",
        "d": true,
        "g": "6cca8702023da790",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 790,
        "y": 1100,
        "wires": []
    },
    {
        "id": "c834aa8dd89f7db9",
        "type": "http in",
        "z": "c50d486d4200cd31",
        "d": true,
        "g": "6cca8702023da790",
        "name": "",
        "url": "/api/interfaces/update",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 320,
        "y": 1100,
        "wires": [
            [
                "f8919195fecdf853"
            ]
        ]
    },
    {
        "id": "8b5c5ca9ed61abe7",
        "type": "http request",
        "z": "c50d486d4200cd31",
        "name": "",
        "method": "use",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 750,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "24a34f37e093d1aa",
        "type": "function",
        "z": "c50d486d4200cd31",
        "name": "House Status",
        "func": "node.warn(msg);",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 760,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "1248bb36875d2124",
        "type": "inject",
        "z": "c50d486d4200cd31",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "10",
        "crontab": "",
        "once": true,
        "onceDelay": "10",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 330,
        "y": 200,
        "wires": [
            [
                "dd33b27d36d66e36"
            ]
        ]
    },
    {
        "id": "dd33b27d36d66e36",
        "type": "function",
        "z": "c50d486d4200cd31",
        "name": "Bathtoom station",
        "func": "const dotenv = global.get(\"env\").config().parsed;\nconst endPointUrl = global.get('endPointUrl');\nconst moment = global.get('moment_timezone');\nconst db = global.get(\"connetion_mongo\");\nconst collectionEnum = global.get(\"CollectionEnum\");\n\nconst results = await db.collection(collectionEnum.PRODUCTION_DATA)\n    .find({ \"is_active\": true, \"current_zone\": 8, \"unit_type\": \"B,C\" })\n    .toArray();\n\n// node.warn(results);\nconst resultsLength = results.length;\nfor (let index = 0; index < 26; index++) {\n    const dateNow = moment();\n    const productionData = results[index];\n    const dataQR = productionData?.qr_data_detail?.data\n    const zone8Detail = productionData?.zones.filter((item) => item.zone_number === 8)\n    \n    let instDate = moment(dataQR?.installation_date, \"DDMMYYYY\");\n    if (dataQR?.installation_date) {\n        instDate.subtract(2, 'days');\n    } else {\n        instDate = \"\"\n    }\n    // node.warn(instDate);\n\n    const entry_time = zone8Detail ? moment(zone8Detail[0]?.entry_time) : null;\n    // node.warn(`deviceID:${529 + index}`);\n    const payload = {\n        \"siteID\": dotenv.SIDE_ID,\n        \"deviceID\": 529 + index,\n        \"date\": \"\",\n        \"offset\": -420,\n        \"connection\": \"REST\",\n        \"tagObj\": [\n            {\n                \"status\": true,\n                \"label\": `House_Name_B${index + 1}`,\n                \"value\": 1,\n                \"text\": dataQR?.owner_name ? dataQR?.owner_name : \"\"\n            },\n            {\n                \"status\": true,\n                \"label\": `Unit_No_B${index + 1}`,\n                \"value\": 1,\n                \"text\": dataQR?.units_number ? Number(dataQR?.units_number) : \"\"\n            },\n            {\n                \"status\": true,\n                \"label\": `Type_Unit${index + 1}`,\n                \"value\": 1,\n                \"text\": dataQR?.unit_type ? dataQR?.unit_type : \"\"\n            },\n            {\n                \"status\": true,\n                \"label\": `BR_m2${index + 1}`,\n                \"value\": ``,\n                \"text\": dataQR?.remark_b ? Number(dataQR?.remark_b) : \"\"\n            },\n            {\n                \"status\": true,\n                \"label\": `Day_IN_B${index + 1}`,\n                \"value\": 1,\n                \"text\": entry_time ? entry_time.format('DD-MMM-YY') : \"\"\n            },\n            {\n                \"status\": true,\n                \"label\": `Time_IN_B${index + 1}`,\n                \"value\": 1,\n                \"text\": entry_time ? entry_time.format('HH:mm') : \"\"\n            },\n            {\n                \"status\": true,\n                \"label\": `Load_Date_B${index + 1}`,\n                \"value\": 1,\n                \"text\": dataQR?.installation_date ? instDate.format('ddd, DD-MM-YY') : \"\"\n            },\n            {\n                \"status\": true,\n                \"label\": `Remain_B${index + 1}`,\n                \"value\": 1,\n                \"text\": dataQR?.installation_date ? dateNow.diff(instDate, 'days') : \"\"\n            },\n            {\n                \"status\": true,\n                \"label\": `Count_min_B${index + 1}`,\n                \"value\": 1,\n                \"text\": entry_time ? dateNow.diff(entry_time, 'minutes') : \"\"\n            },\n        ]\n    }\n    msg.method = \"POST\";\n    msg.url = endPointUrl;\n    msg.payload = payload;\n    node.send(msg);\n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 200,
        "wires": [
            [
                "dd1f28ddb4b5b504"
            ]
        ]
    },
    {
        "id": "dd1f28ddb4b5b504",
        "type": "http request",
        "z": "c50d486d4200cd31",
        "name": "",
        "method": "use",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 750,
        "y": 200,
        "wires": [
            []
        ]
    },
    {
        "id": "35c2c2ef06d10c6d",
        "type": "function",
        "z": "c50d486d4200cd31",
        "name": "Bathtoom station",
        "func": "node.warn(msg);",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 950,
        "y": 200,
        "wires": [
            []
        ]
    },
    {
        "id": "7b1fdb519763b966",
        "type": "inject",
        "z": "c50d486d4200cd31",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "10",
        "crontab": "",
        "once": true,
        "onceDelay": "10",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 330,
        "y": 280,
        "wires": [
            [
                "ecb226c930230b0d"
            ]
        ]
    },
    {
        "id": "ecb226c930230b0d",
        "type": "function",
        "z": "c50d486d4200cd31",
        "name": "Stair station",
        "func": "const dotenv = global.get(\"env\").config().parsed;\nconst endPointUrl = global.get('endPointUrl');\nconst moment = global.get('moment_timezone');\nconst db = global.get(\"connetion_mongo\");\nconst collectionEnum = global.get(\"CollectionEnum\");\n\nconst results = await db.collection(collectionEnum.PRODUCTION_DATA)\n    .find({ \"is_active\": true, \"current_zone\": 8, \"unit_type\": \"R\" })\n    .toArray();\n\n// node.warn(results);\nconst resultsLength = results.length;\nfor (let index = 0; index < 4; index++) {\n    const dateNow = moment();\n    const productionData = results[index];\n    const dataQR = productionData?.qr_data_detail?.data\n    const zone8Detail = productionData?.zones.filter((item) => item.zone_number === 8)\n    let instDate = moment(dataQR?.installation_date, \"DDMMYYYY\");\n    if (dataQR?.installation_date) {\n        instDate = instDate.subtract(2, 'days');\n    } else {\n        instDate = null;\n    }\n    // node.warn(instDate);\n    const entry_time = zone8Detail ? moment(zone8Detail[0]?.entry_time) : null;\n    // node.warn(`deviceID:${555 + index}`);\n    const payload = {\n        \"siteID\": dotenv.SIDE_ID,\n        \"deviceID\": 555 + index,\n        \"date\": \"\",\n        \"offset\": -420,\n        \"connection\": \"REST\",\n        \"tagObj\": [\n            {\n                \"status\": true,\n                \"label\": `House_Name_S${index + 1}`,\n                \"value\": 1,\n                \"text\": dataQR?.owner_name ? dataQR?.owner_name : \"\"\n            },\n            {\n                \"status\": true,\n                \"label\": `Unit_No_S${index + 1}`,\n                \"value\": 1,\n                \"text\": dataQR?.units_number ? Number(dataQR?.units_number) : \"\"\n            },\n            {\n                \"status\": true,\n                \"label\": `Type_Stair${index + 1}`,\n                \"value\": 1,\n                \"text\": dataQR?.unit_type ? dataQR?.unit_type : \"\"\n            },\n            // {\n            //     \"status\": true,\n            //     \"label\": `BR_m2${index + 1}`,\n            //     \"value\": dataQR?.remark_b ? Number(dataQR?.remark_b) : 0,\n            //     \"text\": \"\"\n            // },\n            {\n                \"status\": true,\n                \"label\": `Day_IN_S${index + 1}`,\n                \"value\": 1,\n                \"text\": entry_time ? entry_time.format('DD-MMM-YY') : \"\"\n            },\n            {\n                \"status\": true,\n                \"label\": `Time_IN_S${index + 1}`,\n                \"value\": 1,\n                \"text\": entry_time ? entry_time.format('HH:mm') : \"\"\n            },\n            {\n                \"status\": true,\n                \"label\": `Load_Date_S${index + 1}`,\n                \"value\": 1,\n                \"text\": instDate ? instDate.format('ddd, DD-MM-YY') : \"\"\n            },\n            {\n                \"status\": true,\n                \"label\": `Remain_S${index + 1}`,\n                \"value\": 1,\n                \"text\": instDate ? dateNow.diff(instDate, 'days') : \"\"\n            },\n            {\n                \"status\": true,\n                \"label\": `Count_min_S${index + 1}`,\n                \"value\": 1,\n                \"text\": entry_time ? dateNow.diff(entry_time, 'minutes') : \"\"\n            },\n        ]\n    }\n    msg.method = \"POST\";\n    msg.url = endPointUrl;\n    msg.payload = payload;\n    node.send(msg);\n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 280,
        "wires": [
            [
                "3b0495d416769fd6"
            ]
        ]
    },
    {
        "id": "3b0495d416769fd6",
        "type": "http request",
        "z": "c50d486d4200cd31",
        "name": "",
        "method": "use",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 750,
        "y": 280,
        "wires": [
            []
        ]
    },
    {
        "id": "7073a500a4ad3ed4",
        "type": "function",
        "z": "c50d486d4200cd31",
        "name": "Stair station",
        "func": "node.warn(msg);",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 930,
        "y": 280,
        "wires": [
            []
        ]
    },
    {
        "id": "9237c7da5297518f",
        "type": "http request",
        "z": "c50d486d4200cd31",
        "name": "",
        "method": "use",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 930,
        "y": 400,
        "wires": [
            []
        ]
    },
    {
        "id": "baf48381585345fb",
        "type": "function",
        "z": "c50d486d4200cd31",
        "name": "zone3",
        "func": "const dotenv = global.get(\"env\").config().parsed;\nconst endPointUrl = global.get('endPointUrl');\nconst listProductionData = msg.payload;\nconst listDataZone3 = listProductionData.filter(item => item.current_zone === 3);\n\n// node.warn(listDataZone3);\nconst tagObj = []\nfor (let index = 0; index < 13; index++) {\n    const matchingData = listDataZone3.find(data => data.current_block === (index + 1));\n    let unit_type = matchingData?.qr_data_detail.data?.type === \"N\" ? \"\" : `-${matchingData?.qr_data_detail.data?.type}`;\n    const newObj = {\n        \"status\": true,\n        \"label\": `AB_${index + 1}`,\n        \"value\": 1,\n        \"text\": matchingData ? `${matchingData?.qr_data_detail.data?.unit_type}-${matchingData?.qr_data_detail.data?.units_number.toString().padStart(2, '0')}${unit_type}` : \" \"\n    };\n    tagObj.push(newObj);\n}\n// node.warn(tagObj);\nconst payload = {\n    \"siteID\": dotenv.SIDE_ID,\n    \"deviceID\": 501,\n    \"date\": \"\",\n    \"offset\": -420,\n    \"connection\": \"REST\",\n    \"tagObj\": tagObj\n}\nmsg.method = \"POST\";\nmsg.url = endPointUrl;\nmsg.payload = payload;\nnode.send(msg);",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 440,
        "wires": [
            [
                "9237c7da5297518f"
            ]
        ]
    },
    {
        "id": "0b7897186f786f38",
        "type": "function",
        "z": "c50d486d4200cd31",
        "name": "zone4",
        "func": "const dotenv = global.get(\"env\").config().parsed;\nconst endPointUrl = global.get('endPointUrl');\nconst listProductionData = msg.payload;\nconst listDataZone4 = listProductionData.filter(item => item.current_zone === 4);\n\n// node.warn(listDataZone4);\nconst tagObj = []\nfor (let index = 0; index < 20; index++) {\n    const matchingData = listDataZone4.find(data => data.current_block === (index + 1));\n    let unit_type = matchingData?.qr_data_detail.data?.type === \"N\" ? \"\" : `-${matchingData?.qr_data_detail.data?.type}`;\n    const newObj = {\n        \"status\": true,\n        \"label\": `Bypass_${index + 1}`,\n        \"value\": 1,\n        \"text\": matchingData ? `${matchingData?.qr_data_detail.data?.unit_type}-${matchingData?.qr_data_detail.data?.units_number.toString().padStart(2, '0')}${unit_type}` : \" \"\n    };\n    tagObj.push(newObj);\n}\n// node.warn(tagObj);\nconst payload = {\n    \"siteID\": dotenv.SIDE_ID,\n    \"deviceID\": 502,\n    \"date\": \"\",\n    \"offset\": -420,\n    \"connection\": \"REST\",\n    \"tagObj\": tagObj\n}\nmsg.method = \"POST\";\nmsg.url = endPointUrl;\nmsg.payload = payload;\nnode.send(msg);",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 480,
        "wires": [
            [
                "9237c7da5297518f"
            ]
        ]
    },
    {
        "id": "a5c9cfa06a499c33",
        "type": "function",
        "z": "c50d486d4200cd31",
        "name": "zone5",
        "func": "const dotenv = global.get(\"env\").config().parsed;\nconst endPointUrl = global.get('endPointUrl');\nconst listProductionData = msg.payload;\nconst listDataZone5 = listProductionData.filter(item => item.current_zone === 5);\n\n// node.warn(listDataZone5);\nconst tagObj = []\nfor (let index = 0; index < 5; index++) {\n    const matchingData = listDataZone5.find(data => data.current_block === (index + 1));\n    let unit_type = matchingData?.qr_data_detail.data?.type === \"N\" ? \"\" : `-${matchingData?.qr_data_detail.data?.type}`;\n    const newObj = {\n        \"status\": true,\n        \"label\": `EW_${index + 1}`,\n        \"value\": 1,\n        \"text\": matchingData ? `${matchingData?.qr_data_detail.data?.unit_type}-${matchingData?.qr_data_detail.data?.units_number.toString().padStart(2, '0')}${unit_type}` : \" \"\n    };\n    tagObj.push(newObj);\n}\n// node.warn(tagObj);\nconst payload = {\n    \"siteID\": dotenv.SIDE_ID,\n    \"deviceID\": 503,\n    \"date\": \"\",\n    \"offset\": -420,\n    \"connection\": \"REST\",\n    \"tagObj\": tagObj\n}\nmsg.method = \"POST\";\nmsg.url = endPointUrl;\nmsg.payload = payload;\nnode.send(msg);",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 520,
        "wires": [
            [
                "9237c7da5297518f"
            ]
        ]
    },
    {
        "id": "ddcbb031997bde45",
        "type": "function",
        "z": "c50d486d4200cd31",
        "name": "zone6",
        "func": "const dotenv = global.get(\"env\").config().parsed;\nconst endPointUrl = global.get('endPointUrl');\nconst listProductionData = msg.payload;\nconst listDataZone6 = listProductionData.filter(item => item.current_zone === 6);\n\n// node.warn(listDataZone6);\nconst tagObj = []\nfor (let index = 0; index < 4; index++) {\n    const matchingData = listDataZone6.find(data => data.current_block === (index + 1));\n    let unit_type = matchingData?.qr_data_detail.data?.type === \"N\" ? \"\" : `-${matchingData?.qr_data_detail.data?.type}`;\n    const newObj = {\n        \"status\": true,\n        \"label\": `EE_${index + 1}`,\n        \"value\": 1,\n        \"text\": matchingData ? `${matchingData?.qr_data_detail.data?.unit_type}-${matchingData?.qr_data_detail.data?.units_number.toString().padStart(2, '0')}${unit_type}` : \" \"\n    };\n    tagObj.push(newObj);\n}\n// node.warn(tagObj);\nconst payload = {\n    \"siteID\": dotenv.SIDE_ID,\n    \"deviceID\": 504,\n    \"date\": \"\",\n    \"offset\": -420,\n    \"connection\": \"REST\",\n    \"tagObj\": tagObj\n}\nmsg.method = \"POST\";\nmsg.url = endPointUrl;\nmsg.payload = payload;\nnode.send(msg);",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 560,
        "wires": [
            [
                "9237c7da5297518f"
            ]
        ]
    },
    {
        "id": "bcc4477d1ed7db74",
        "type": "function",
        "z": "c50d486d4200cd31",
        "name": "zone7",
        "func": "const dotenv = global.get(\"env\").config().parsed;\nconst listProductionData = msg.payload;\nconst listDataZone7 = listProductionData.filter(item => item.current_zone === 7);\n\n// node.warn(listDataZone7);\nconst tagObj = []\nfor (let index = 0; index < 17; index++) {\n    const matchingData = listDataZone7.find(data => data.current_block === (index + 1));\n    let unit_type = matchingData?.qr_data_detail.data?.type === \"N\" ? \"\" : `-${matchingData?.qr_data_detail.data?.type}`;\n    const newObj = {\n        \"status\": true,\n        \"label\": `IWPT_${index + 1}`,\n        \"value\": 1,\n        \"text\": matchingData ? `${matchingData?.qr_data_detail.data?.unit_type}-${matchingData?.qr_data_detail.data?.units_number.toString().padStart(2, '0')}${unit_type}` : \" \"\n    };\n    tagObj.push(newObj);\n}\n// node.warn(tagObj);\nconst payload = {\n    \"siteID\": dotenv.SIDE_ID,\n    \"deviceID\": 505,\n    \"date\": \"\",\n    \"offset\": -420,\n    \"connection\": \"REST\",\n    \"tagObj\": tagObj\n}\nmsg.method = \"POST\";\nmsg.url = dotenv.ENDPOINT_URL;\nmsg.payload = payload;\nnode.send(msg);",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 600,
        "wires": [
            [
                "9237c7da5297518f"
            ]
        ]
    },
    {
        "id": "f3e3ee94447853af",
        "type": "function",
        "z": "c50d486d4200cd31",
        "name": "zone8N",
        "func": "const dotenv = global.get(\"env\").config().parsed;\nconst listProductionData = msg.payload;\nconst listDataZone8 = listProductionData.filter(item => item.current_zone === 8 && item.unit_type === \"N\");\n\n// node.warn(listDataZone8);\nconst tagObj = []\nfor (let index = 0; index < 8; index++) {\n    const matchingData = listDataZone8.find(data => data.current_block === (index + 1));\n    let unit_type = matchingData?.qr_data_detail.data?.type === \"N\" ? \"\" : `-${matchingData?.qr_data_detail.data?.type}`;\n    const newObj = {\n        \"status\": true,\n        \"label\": `BC_${index + 1}`,\n        \"value\": 1,\n        \"text\": matchingData ? `${matchingData?.qr_data_detail.data?.unit_type}-${matchingData?.qr_data_detail.data?.units_number.toString().padStart(2, '0')}${unit_type}` : \" \"\n    };\n    tagObj.push(newObj);\n}\n// node.warn(tagObj);\nconst payload = {\n    \"siteID\": dotenv.SIDE_ID,\n    \"deviceID\": 506,\n    \"date\": \"\",\n    \"offset\": -420,\n    \"connection\": \"REST\",\n    \"tagObj\": tagObj\n}\nmsg.method = \"POST\";\nmsg.url = dotenv.ENDPOINT_URL;\nmsg.payload = payload;\nnode.send(msg);",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 740,
        "y": 640,
        "wires": [
            [
                "9237c7da5297518f"
            ]
        ]
    },
    {
        "id": "ddc20f696c1ac11a",
        "type": "function",
        "z": "c50d486d4200cd31",
        "name": "zone8BC",
        "func": "const dotenv = global.get(\"env\").config().parsed;\nconst listProductionData = msg.payload;\nconst listDataZone8 = listProductionData.filter(item => item.current_zone === 8 && item.unit_type === \"B,C\");\n\n// node.warn(listDataZone8);\nconst tagObj = []\nfor (let index = 0; index < 15; index++) {\n    const matchingData = listDataZone8.find(data => data.current_block === (index + 1));\n    let unit_type = matchingData?.qr_data_detail.data?.type === \"N\" ? \"\" : `-${matchingData?.qr_data_detail.data?.type}`;\n    const newObj = {\n        \"status\": true,\n        \"label\": `Bathroom_${index + 1}`,\n        \"value\": 1,\n        \"text\": matchingData ? `${matchingData?.qr_data_detail.data?.unit_type}-${matchingData?.qr_data_detail.data?.units_number.toString().padStart(2, '0')}${unit_type}` : \" \"\n    };\n    tagObj.push(newObj);\n}\n// node.warn(tagObj);\nconst payload = {\n    \"siteID\": dotenv.SIDE_ID,\n    \"deviceID\": 507,\n    \"date\": \"\",\n    \"offset\": -420,\n    \"connection\": \"REST\",\n    \"tagObj\": tagObj\n}\nmsg.method = \"POST\";\nmsg.url = dotenv.ENDPOINT_URL;\nmsg.payload = payload;\nnode.send(msg);\n\n\nconst tagObj2 = []\nfor (let index = 0; index < 11; index++) {\n    const matchingData = listDataZone8.find(data => data.current_block === (index + 16));\n    const newObj = {\n        \"status\": true,\n        \"label\": `Bathroom_${index + 16}`,\n        \"value\": 1,\n        \"text\": matchingData ? `${matchingData.qr_data_detail.data.unit_type}-${matchingData.qr_data_detail.data.units_number.toString().padStart(2, '0')}-${matchingData.qr_data_detail.data.type}` : \"\"\n    };\n    tagObj2.push(newObj);\n}\n// node.warn(tagObj2);\nconst payload2 = {\n    \"siteID\": \"FU5a9ce22a7182\",\n    \"deviceID\": 507,\n    \"date\": \"\",\n    \"offset\": -420,\n    \"connection\": \"REST\",\n    \"tagObj\": tagObj2\n}\nmsg.method = \"POST\";\nmsg.url = dotenv.ENDPOINT_URL;\nmsg.payload = payload2;\nnode.send(msg);",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 740,
        "y": 680,
        "wires": [
            [
                "9237c7da5297518f"
            ]
        ]
    },
    {
        "id": "b8eedd80fe79dc8e",
        "type": "function",
        "z": "c50d486d4200cd31",
        "name": "zone8R",
        "func": "const dotenv = global.get(\"env\").config().parsed;\nconst listProductionData = msg.payload;\nconst listDataZone8 = listProductionData.filter(item => item.current_zone === 8 && item.unit_type === \"R\");\n\n// node.warn(listDataZone8);\nconst tagObj = []\nfor (let index = 0; index < 4; index++) {\n    const matchingData = listDataZone8.find(data => data.current_block === (index + 1));\n    let unit_type = matchingData?.qr_data_detail.data?.type === \"N\" ? \"\" : `-${matchingData?.qr_data_detail.data?.type}`;\n    const newObj = {\n        \"status\": true,\n        \"label\": `Stair_${index + 1}`,\n        \"value\": 1,\n        \"text\": matchingData ? `${matchingData?.qr_data_detail.data?.unit_type}-${matchingData?.qr_data_detail.data?.units_number.toString().padStart(2, '0')}${unit_type}` : \" \"\n    };\n    tagObj.push(newObj);\n}\n// node.warn(tagObj);\nconst payload = {\n    \"siteID\": dotenv.SIDE_ID,\n    \"deviceID\": 509,\n    \"date\": \"\",\n    \"offset\": -420,\n    \"connection\": \"REST\",\n    \"tagObj\": tagObj\n}\nmsg.method = \"POST\";\nmsg.url = dotenv.ENDPOINT_URL;\nmsg.payload = payload;\nnode.send(msg);",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 740,
        "y": 720,
        "wires": [
            [
                "9237c7da5297518f"
            ]
        ]
    },
    {
        "id": "d8e75ee7fa4187c5",
        "type": "function",
        "z": "c50d486d4200cd31",
        "name": "zone9",
        "func": "const dotenv = global.get(\"env\").config().parsed;\nconst listProductionData = msg.payload;\nconst listDataZone9 = listProductionData.filter(item => item.current_zone === 9);\n\n// node.warn(listDataZone9);\nconst tagObj = []\nfor (let index = 0; index < 9; index++) {\n    const matchingData = listDataZone9.find(data => data.current_block === (index + 1));\n    let unit_type = matchingData?.qr_data_detail.data?.type === \"N\" ? \"\" : `-${matchingData?.qr_data_detail.data?.type}`;\n    const newObj = {\n        \"status\": true,\n        \"label\": `Door_${index + 1}`,\n        \"value\": 1,\n        \"text\": matchingData ? `${matchingData?.qr_data_detail.data?.unit_type}-${matchingData?.qr_data_detail.data?.units_number.toString().padStart(2, '0')}${unit_type}` : \" \"\n    };\n    tagObj.push(newObj);\n}\n// node.warn(tagObj);\nconst payload = {\n    \"siteID\": dotenv.SIDE_ID,\n    \"deviceID\": 510,\n    \"date\": \"\",\n    \"offset\": -420,\n    \"connection\": \"REST\",\n    \"tagObj\": tagObj\n}\nmsg.method = \"POST\";\nmsg.url = dotenv.ENDPOINT_URL;\nmsg.payload = payload;\nnode.send(msg);",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 760,
        "wires": [
            [
                "9237c7da5297518f"
            ]
        ]
    },
    {
        "id": "5334f915d7ff8760",
        "type": "function",
        "z": "c50d486d4200cd31",
        "name": "zone10",
        "func": "const dotenv = global.get(\"env\").config().parsed;\nconst listProductionData = msg.payload;\nconst listDataZone10 = listProductionData.filter(item => item.current_zone === 10);\n\n// node.warn(listDataZone10);\nconst tagObj = []\nfor (let index = 0; index < 5; index++) {\n    const matchingData = listDataZone10.find(data => data.current_block === (index + 1));\n    let unit_type = matchingData?.qr_data_detail.data?.type === \"N\" ? \"\" : `-${matchingData?.qr_data_detail.data?.type}`;\n    const newObj = {\n        \"status\": true,\n        \"label\": `Window_${index + 1}`,\n        \"value\": 1,\n        \"text\": matchingData ? `${matchingData?.qr_data_detail.data?.unit_type}-${matchingData?.qr_data_detail.data?.units_number.toString().padStart(2, '0')}${unit_type}` : \" \"\n    };\n    tagObj.push(newObj);\n}\n// node.warn(tagObj);\nconst payload = {\n    \"siteID\": dotenv.SIDE_ID,\n    \"deviceID\": 511,\n    \"date\": \"\",\n    \"offset\": -420,\n    \"connection\": \"REST\",\n    \"tagObj\": tagObj\n}\nmsg.method = \"POST\";\nmsg.url = dotenv.ENDPOINT_URL;\nmsg.payload = payload;\nnode.send(msg);",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 740,
        "y": 800,
        "wires": [
            [
                "9237c7da5297518f"
            ]
        ]
    },
    {
        "id": "d1602b401aaa2f27",
        "type": "function",
        "z": "c50d486d4200cd31",
        "name": "zone11",
        "func": "const dotenv = global.get(\"env\").config().parsed;\nconst listProductionData = msg.payload;\nconst listDataZone11 = listProductionData.filter(item => item.current_zone === 11);\n\n// node.warn(listDataZone11);\nconst tagObj = []\nfor (let index = 0; index < 3; index++) {\n    const matchingData = listDataZone11.find(data => data.current_block === (index + 1));\n    let unit_type = matchingData?.qr_data_detail.data?.type === \"N\" ? \"\" : `-${matchingData?.qr_data_detail.data?.type}`;\n    const newObj = {\n        \"status\": true,\n        \"label\": `Scaffold_${index + 1}`,\n        \"value\": 1,\n        \"text\": matchingData ? `${matchingData?.qr_data_detail.data?.unit_type}-${matchingData?.qr_data_detail.data?.units_number.toString().padStart(2, '0')}${unit_type}` : \" \"\n    };\n    tagObj.push(newObj);\n}\n// node.warn(tagObj);\nconst payload = {\n    \"siteID\": dotenv.SIDE_ID,\n    \"deviceID\": 512,\n    \"date\": \"\",\n    \"offset\": -420,\n    \"connection\": \"REST\",\n    \"tagObj\": tagObj\n}\nmsg.method = \"POST\";\nmsg.url = dotenv.ENDPOINT_URL;\nmsg.payload = payload;\nnode.send(msg);",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 740,
        "y": 840,
        "wires": [
            [
                "9237c7da5297518f"
            ]
        ]
    },
    {
        "id": "eed9961a2b5fcab8",
        "type": "function",
        "z": "c50d486d4200cd31",
        "name": "zone12",
        "func": "const dotenv = global.get(\"env\").config().parsed;\nconst listProductionData = msg.payload;\nconst listDataZone12 = listProductionData.filter(item => item.current_zone === 12);\n\n// node.warn(listDataZone12);\nconst tagObj = []\nfor (let index = 0; index < 9; index++) {\n    const matchingData = listDataZone12.find(data => data.current_block === (index + 1));\n    let unit_type = matchingData?.qr_data_detail.data?.type === \"N\" ? \"\" : `-${matchingData?.qr_data_detail.data?.type}`;\n    const newObj = {\n        \"status\": true,\n        \"label\": `Loading_${index + 1}`,\n        \"value\": 1,\n        \"text\": matchingData ? `${matchingData?.qr_data_detail.data?.unit_type}-${matchingData?.qr_data_detail.data?.units_number.toString().padStart(2, '0')}${unit_type}` : \" \"\n    };\n    tagObj.push(newObj);\n}\n// node.warn(tagObj);\nconst payload = {\n    \"siteID\": dotenv.SIDE_ID,\n    \"deviceID\": 513,\n    \"date\": \"\",\n    \"offset\": -420,\n    \"connection\": \"REST\",\n    \"tagObj\": tagObj\n}\nmsg.method = \"POST\";\nmsg.url = dotenv.ENDPOINT_URL;\nmsg.payload = payload;\nnode.send(msg);",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 740,
        "y": 880,
        "wires": [
            [
                "9237c7da5297518f"
            ]
        ]
    },
    {
        "id": "5aca04af7ec1d78a",
        "type": "function",
        "z": "c50d486d4200cd31",
        "name": "Update House Status",
        "func": "const dotenv = global.get(\"env\").config().parsed;\nconst moment = global.get('moment_timezone');\nconst db = global.get(\"connetion_mongo\");\nconst collectionEnum = global.get(\"CollectionEnum\");\n\n//เพิ่มเงื่อนไขถ้า house ไหน finish แล้วให้นำวัน (Inst date + 2) แล้วน้อยกว่าวันปัจจุบันให้เอาออก\nconst results = await db.collection(collectionEnum.HOUSE_PRODUCTION_RECORDS)\n    .find({ \"is_active\": true })\n    .sort({ \"mj_date\": 1 }) // 1 คือการเรียงลำดับจากน้อยไปมาก (ascending)\n    .toArray();\n\nconst resultsLength = results.length;\n\nresults.forEach(async function (element) {\n    const installationDate = element?.installation_date;\n    if (installationDate) {\n        const instDate = moment(installationDate, \"DDMMYYYY\").add(2, 'days');\n        const isAfterToday = instDate.isAfter(moment());\n        // node.warn(element);\n        if (!isAfterToday && element.unit_finish === element.total_unit) {\n            await db.collection(collectionEnum.HOUSE_PRODUCTION_RECORDS).updateOne(\n                { house_code: element.house_code },\n                {\n                    $set: {\n                        \"is_active\": false\n                    }\n                }\n            ).then((result) => {\n                // node.warn(`Update status house_code:${element.house_code} success!`);\n            }).catch((error) => {\n                node.warn(error);\n            });\n        } else {\n            // node.warn(\"instDate น้อยกว่าหรือเท่ากับวันปัจจุบัน\");\n        }\n    } else {\n        node.warn(\"Installation date is not available\");\n    }\n});\n// for (let index = 0; index < 15; index++) {\n//     const houseRecords = results[index];\n//     const installationDate = houseRecords?.installation_date;\n//     if (installationDate) {\n//         const instDate = moment(installationDate, \"DDMMYYYY\").add(2, 'days');\n//         const isAfterToday = instDate.isAfter(moment());\n\n//         if (!isAfterToday) {\n//             node.warn(houseRecords);\n//             await db.collection(collectionEnum.HOUSE_PRODUCTION_RECORDS).updateOne(\n//                 { house_code: houseRecords.house_code },\n//                 {\n//                     $set: {\n//                         \"is_active\": false\n//                     }\n//                 }\n//             ).then((result) => {\n//                 node.warn(`Update status house_code:${houseRecords.house_code} success!`);\n//             }).catch((error) => {\n//                 node.warn(error);\n//             });\n//         } else {\n//             // node.warn(\"instDate น้อยกว่าหรือเท่ากับวันปัจจุบัน\");\n//         }\n//     } else {\n//         node.warn(\"Installation date is not available\");\n//     }\n// }\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 560,
        "y": 60,
        "wires": [
            []
        ]
    },
    {
        "id": "71ba23bd0a92109b",
        "type": "inject",
        "z": "63022294005c57ec",
        "name": "Input Ceiling",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"event\":\"LineCeiling\",\"source\":\"factory\"}",
        "payloadType": "json",
        "x": 230,
        "y": 240,
        "wires": [
            [
                "6325504abaa24626"
            ]
        ]
    },
    {
        "id": "d5b8087aa6108034",
        "type": "inject",
        "z": "63022294005c57ec",
        "name": "Input Floor",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"event\":\"LineFloor\",\"source\":\"factory\"}",
        "payloadType": "json",
        "x": 220,
        "y": 280,
        "wires": [
            [
                "6325504abaa24626"
            ]
        ]
    },
    {
        "id": "2311e6b0aeac5a4f",
        "type": "catch",
        "z": "63022294005c57ec",
        "name": "",
        "scope": null,
        "uncaught": false,
        "x": 620,
        "y": 40,
        "wires": [
            [
                "b5da5a3ee50a1f2e"
            ]
        ]
    },
    {
        "id": "5f7d13e38e6d3b00",
        "type": "inject",
        "z": "63022294005c57ec",
        "name": "schedule Celing",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": true,
        "onceDelay": "5",
        "topic": "",
        "payload": "{\"event\":\"LineCeiling\",\"source\":\"schedule\"}",
        "payloadType": "json",
        "x": 250,
        "y": 320,
        "wires": [
            [
                "50e281b8e4cd07cb"
            ]
        ]
    },
    {
        "id": "4ecc33b499ce5d72",
        "type": "function",
        "z": "63022294005c57ec",
        "name": "Next item in block zone1 Ceiling",
        "func": "const db = global.get(\"connetion_mongo\");\nconst lineEnum = global.get(\"LineEnum\");\nconst sourceEnum = global.get(\"SourceEnum\");\nconst collectionEnum = global.get(\"CollectionEnum\");\nconst collection = db.collection(collectionEnum.ZONE1_PRODUCTION_DATA);\nconst zoneMoveTime = global.get(\"ZoneMoveTime\");\nconst preAddObjectCheckZone1 = global.get(\"preAddObjectCheckZone1\")\nconst maxBlockPerZone = global.get('maxBlockPerZone');\nconst moment = global.get('moment_timezone');\ntry {\n    const current_block = await compareDateTime(lineEnum.LINE_CEILING.index);\n    if (current_block === 0) {\n        return msg;\n    }\n    preAddObjectCheckZone1(lineEnum.LINE_CEILING.index, current_block);\n    return msg;\n} catch (error) {\n    node.warn(error);\n};\n\nasync function compareDateTime(line_number) {\n    try {\n        let maxBlock;\n        if (line_number === lineEnum.LINE_CEILING.index){\n            maxBlock = maxBlockPerZone.ZONE_1_1;\n        } else {\n            maxBlock = maxBlockPerZone.ZONE_1_2;\n        }\n         \n        const pipeline = [\n            { $match: { is_active: true, 'lines.line_number': line_number } },\n            { $unwind: \"$blocks\" },\n            { $match: { \"blocks.exit_time\": null } },\n            { $sort: { \"blocks.entry_time\": 1 } },\n            {\n                $project: {\n                    _id: \"$_id\",\n                    entry_time: \"$blocks.entry_time\",\n                    current_block: \"$current_block\"\n                }\n            }\n        ];\n        const results = await collection.aggregate(pipeline).toArray();\n        if (results.length === 0) {\n            return 0;\n        }\n        const block_all = results.map(item => item.current_block);\n        maxBlock = await findPossibleMax(block_all, maxBlock);\n        for (const result of results) {\n            if (result.current_block > maxBlock) {\n                continue;\n            } else if (result.current_block === maxBlock) {\n                maxBlock -= 1;\n                continue;\n            }\n            const blockDuration = zoneMoveTime.zone1MoveTime * 60 * 1000;\n            const elapsedTime = moment().diff(moment(result.entry_time, \"HH:mm\"), \"milliseconds\");\n            // node.warn(elapsedTime);\n            if (elapsedTime > blockDuration) {\n                node.warn(`Zone: ${1} ,Time difference is greater than ${zoneMoveTime.zone1MoveTime} minutes`);\n                return result.current_block;\n            } else {\n                return 0;\n            }\n        }\n\n    } catch (error) {\n        node.warn(error);\n    }\n}\n\nasync function findPossibleMax(data, max) {\n    let possibleMax = max;\n    while (data.includes(possibleMax)) {\n        possibleMax--;\n    }\n    return possibleMax;\n};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 910,
        "y": 320,
        "wires": [
            [
                "f5a7949955373c67"
            ]
        ]
    },
    {
        "id": "75f50b6089e6b4c6",
        "type": "inject",
        "z": "63022294005c57ec",
        "name": "schedule Floor",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": true,
        "onceDelay": "5",
        "topic": "",
        "payload": "{\"event\":\"LineFloor\",\"source\":\"schedule\"}",
        "payloadType": "json",
        "x": 240,
        "y": 360,
        "wires": [
            [
                "3ddcf89b4e6a662e"
            ]
        ]
    },
    {
        "id": "8411614c3dee51d6",
        "type": "function",
        "z": "63022294005c57ec",
        "name": "Global Function",
        "func": "const db = global.get(\"connetion_mongo\");\nconst dotenv = global.get(\"env\").config().parsed;\nconst zoneEnum = global.get(\"ZoneEnum\");\nconst lineEnum = global.get(\"LineEnum\");\nconst collectionEnum = global.get(\"CollectionEnum\");\nconst zoneMoveTime = global.get('ZoneMoveTime');\n// const maxBlockZone1 = parseInt(dotenv.MAX_BLOCK_ZONE_1);\nconst maxBlock = 99;\n// ======================= Zone other ===========================//\nconst preAddObjectCheck = async (zoneIndex, startIndex) => {\n\n    try {\n        let listNextBlocks = await findNextBlockZone(zoneIndex, startIndex);\n        for (const result of listNextBlocks) {\n            for (const zone of result.zones) {\n                if (zone.zone_number !== zoneIndex) {\n                    continue;\n                }\n                const lastBlock = zone.blocks[zone.blocks.length - 1].block_number;\n                const newBlockNumber = lastBlock + 1;\n                zone.blocks[zone.blocks.length - 1].exit_time = new Date();\n\n                // Create new block\n                const newBlock = {\n                    block_number: newBlockNumber,\n                    entry_time: new Date(),\n                    exit_time: null\n                };\n                // const newBlocks = zone.blocks.slice();\n                zone.blocks.push(newBlock);\n                await db.collection(collectionEnum.PRODUCTION_DATA).updateOne(\n                    { _id: result._id, \"zones.zone_number\": zone.zone_number },\n                    {\n                        $set: {\n                            current_block: newBlockNumber,\n                            \"zones.$.blocks\": zone.blocks\n                        }\n                    }\n                ).then((result) => {\n                    node.warn(`Update newBlock(${newBlockNumber}) zome(${zoneIndex}) success!`);\n                }).catch((error) => {\n                    node.warn(error);\n                });\n            }\n        }\n    } catch (error) {\n        node.warn(error);\n    }\n}\n\n\nasync function findNextBlockZone(zone, startIndex) {\n    let results = [];\n    for (let index = startIndex; index <= maxBlock; index++) {\n        const query = {\n            \"is_active\": true,\n            \"current_zone\": zone,\n            \"current_block\": index\n        }\n\n        const result = await db.collection(collectionEnum.PRODUCTION_DATA).find(query).toArray();\n        if (result.length === 0) {\n            // node.warn(\"Break!!\");\n            return results; // คืนค่าผลลัพธ์ที่ได้ก่อนหยุดการทำงาน\n        }\n        results.push(result[0])\n    }\n    return results;\n}\n\nglobal.set('preAddObjectCheck', preAddObjectCheck);\n\n\n// ======================= Zone1 ===========================//\nconst preAddObjectCheckZone1 = async (lineNumber, startIndex) => {\n    let listNextBlocks = await findNextBlockZone1(lineNumber, startIndex);\n    // listNextBlocks.forEach(async (result) => {\n    for (const result of listNextBlocks) {\n        const lastBlock = result.blocks[result.blocks.length - 1].block_number;\n        const newBlockNumber = lastBlock + 1;\n\n        // Update exit_time of last block\n        result.blocks[result.blocks.length - 1].exit_time = new Date();\n\n        // Create new block\n        const newBlock = {\n            block_number: newBlockNumber,\n            entry_time: new Date(),\n            exit_time: null\n        };\n\n        // Push the new block to the blocks array\n        result.blocks.push(newBlock);\n\n        // Update the document in the collection with the new blocks and current_block value\n        await db.collection(collectionEnum.ZONE1_PRODUCTION_DATA).updateOne({ _id: result._id }, {\n            $set: {\n                blocks: result.blocks,\n                current_block: newBlockNumber\n            }\n        });\n    };\n};\n\n\nasync function findNextBlockZone1(lineNumber, startIndex) {\n    let results = [];\n    for (let index = startIndex; index <= maxBlock; index++) {\n        const query = {\n            \"is_active\": true,\n            \"current_block\": index,\n            \"lines.line_number\": lineNumber\n        }\n\n        const result = await db.collection(collectionEnum.ZONE1_PRODUCTION_DATA).find(query).toArray();\n        // node.warn(result);\n        if (result.length === 0) {\n            // node.warn(\"Break!!\");\n            return results; // คืนค่าผลลัพธ์ที่ได้ก่อนหยุดการทำงาน\n        }\n        results.push(result[0])\n    }\n    return results;\n}\n\nglobal.set('preAddObjectCheckZone1', preAddObjectCheckZone1);\n\n\nconst compareDateTime = async (zone) => {\n    let maxBlockZone = maxBlock;\n    const timeMove = await getTimeMove(zone);\n    try {\n        const pipeline = [\n            { $match: { current_zone: zone, is_active: true } },\n            { $unwind: \"$zones\" },\n            { $unwind: \"$zones.blocks\" },\n            { $match: { \"zones.blocks.exit_time\": null, \"zones.zone_number\": zone } },\n            { $sort: { \"zones.blocks.entry_time\": 1 } },\n        ];\n\n        const results = await db.collection(collectionEnum.PRODUCTION_DATA).aggregate(pipeline).toArray();\n        if (results.length === 0) {\n            return 0;\n        }\n        for (const result of results) {\n            if (result.current_block === maxBlockZone) {\n                maxBlockZone -= 1;\n                continue;\n            }\n            const entry_time = new Date(result.zones.blocks.entry_time);\n            const currentTime = new Date();\n            const timeDifferenceInMinutes = (currentTime.getTime() - entry_time.getTime()) / (1000 * 60);\n            if (timeDifferenceInMinutes > timeMove) {\n                node.warn(`Zone: ${zone} ,Time difference is greater than ${timeMove} minutes`);\n                return result.current_block;\n            } else {\n                return 0;\n            }\n        }\n        return 0;\n    } catch (error) {\n        node.error(error);\n        node.error(\"compare date time zone2 error message\", error);\n    }\n}\n\nglobal.set('compareDateTime', compareDateTime);\n\n\n//save QR \nconst saveQrCode = async (payload) => {\n    const qrCodeData = payload.qr_code_data;\n    const location = payload.location;\n    const splitPayload = qrCodeData.split(\";\");\n    // node.warn(splitPayload);\n    const newQrData = {\n        qr_code: qrCodeData,\n        location: location,\n        data: {\n            house_code: splitPayload[0],\n            owner_name: splitPayload[1],\n            total_units: splitPayload[2],\n            units_number: splitPayload[3],\n            type: splitPayload[4],\n            mj_plan_date: splitPayload[5],\n            installation_date: splitPayload[6],\n            house_type: splitPayload[7],\n            size: splitPayload[8]\n        },\n        created_at: new Date(),\n        updated_at: null,\n    };\n    await db.collection(collectionEnum.QR_DATA).insertOne(newQrData);\n    return newQrData;\n}\nglobal.set('saveQrCode', saveQrCode);\n\n\nconst getTimeMove = async (zone) => {\n    switch (zone) {\n        case 1:\n            return zoneMoveTime.zone1MoveTime\n        case 2:\n            return zoneMoveTime.zone2MoveTime\n        case 3:\n            return zoneMoveTime.zone3MoveTime\n        case 4:\n            return zoneMoveTime.zone4MoveTime\n        case 5:\n            return zoneMoveTime.zone5MoveTime\n        case 6:\n            return zoneMoveTime.zone6MoveTime\n        case 7:\n            return zoneMoveTime.zone7MoveTime\n        case 8:\n            return zoneMoveTime.zone8MoveTime\n        case 9:\n            return zoneMoveTime.zone9MoveTime\n        case 10:\n            return zoneMoveTime.zone10MoveTime\n\n    }\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 40,
        "wires": [
            []
        ]
    },
    {
        "id": "b5da5a3ee50a1f2e",
        "type": "function",
        "z": "63022294005c57ec",
        "name": "msg",
        "func": "node.warn(msg);",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 770,
        "y": 40,
        "wires": [
            []
        ]
    },
    {
        "id": "db65318fee1ad4e8",
        "type": "inject",
        "z": "63022294005c57ec",
        "d": true,
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "2",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 230,
        "y": 40,
        "wires": [
            []
        ]
    },
    {
        "id": "414fa778a274ea90",
        "type": "semaphore-take",
        "z": "63022294005c57ec",
        "config": "02d76861c1ab959d",
        "name": "",
        "x": 660,
        "y": 320,
        "wires": [
            [
                "4ecc33b499ce5d72"
            ]
        ]
    },
    {
        "id": "71c37ad6ad8c18a3",
        "type": "function",
        "z": "63022294005c57ec",
        "name": "End",
        "func": "// node.warn(\"end\");\n// node.warn(\"----------------------------------------\");",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1370,
        "y": 340,
        "wires": [
            []
        ]
    },
    {
        "id": "f5a7949955373c67",
        "type": "semaphore-leave",
        "z": "63022294005c57ec",
        "config": "02d76861c1ab959d",
        "name": "",
        "x": 1190,
        "y": 320,
        "wires": [
            [
                "71c37ad6ad8c18a3"
            ]
        ]
    },
    {
        "id": "6325504abaa24626",
        "type": "subflow:0c43390420f21dec",
        "z": "63022294005c57ec",
        "name": "",
        "x": 1140,
        "y": 280,
        "wires": []
    },
    {
        "id": "1bc18ed1cffa1672",
        "type": "comment",
        "z": "63022294005c57ec",
        "name": "Schdule Zone1",
        "info": "",
        "x": 220,
        "y": 100,
        "wires": []
    },
    {
        "id": "39534d0ef0cb0ed3",
        "type": "comment",
        "z": "63022294005c57ec",
        "name": "Schdule Zone2",
        "info": "",
        "x": 220,
        "y": 420,
        "wires": []
    },
    {
        "id": "a806116a6ed427c1",
        "type": "inject",
        "z": "63022294005c57ec",
        "name": "schedule Zone2",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": true,
        "onceDelay": "5",
        "topic": "",
        "payload": "{\"event\":\"LineFloor\",\"source\":\"schedule\"}",
        "payloadType": "json",
        "x": 250,
        "y": 460,
        "wires": [
            [
                "c88bcb47086393a5"
            ]
        ]
    },
    {
        "id": "c43c7fe1bd1d25bd",
        "type": "semaphore-take",
        "z": "63022294005c57ec",
        "config": "a0d1da37e2bbfdd6",
        "name": "",
        "x": 660,
        "y": 460,
        "wires": [
            [
                "893b979f5d55ae7d"
            ]
        ]
    },
    {
        "id": "f8541df39c9d8f93",
        "type": "semaphore-leave",
        "z": "63022294005c57ec",
        "config": "a0d1da37e2bbfdd6",
        "name": "",
        "x": 1130,
        "y": 460,
        "wires": [
            [
                "696e974b401116e0"
            ]
        ]
    },
    {
        "id": "893b979f5d55ae7d",
        "type": "function",
        "z": "63022294005c57ec",
        "name": "Next item in block zone2",
        "func": "const db = global.get(\"connetion_mongo\");\nconst lineEnum = global.get(\"LineEnum\");\nconst sourceEnum = global.get(\"SourceEnum\");\nconst collectionEnum = global.get(\"CollectionEnum\");\nconst collection = db.collection(collectionEnum.PRODUCTION_DATA);\nconst zoneMoveTime = global.get(\"ZoneMoveTime\");\nconst preAddObjectCheck = global.get(\"preAddObjectCheck\");\nconst compareDateTime = global.get(\"compareDateTime\");\nconst zoneEnum = global.get('ZoneEnum');\n\ntry {\n    const current_block = await compareDateTime(zoneEnum.ZONE_2.index);\n    if (current_block === 0){\n        return msg;\n    }\n    node.warn(`current_block:${current_block}`);\n    preAddObjectCheck(zoneEnum.ZONE_2.index, current_block);\n    return msg;\n} catch (error) {\n    node.error(\"Next item in block zone 2 error message\", error);\n};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 460,
        "wires": [
            [
                "f8541df39c9d8f93"
            ]
        ]
    },
    {
        "id": "696e974b401116e0",
        "type": "function",
        "z": "63022294005c57ec",
        "name": "End",
        "func": "// node.warn(\"end\");\n// node.warn(\"----------------------------------------\");",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1310,
        "y": 460,
        "wires": [
            []
        ]
    },
    {
        "id": "9a8031362ec1c9e4",
        "type": "comment",
        "z": "63022294005c57ec",
        "name": "Schdule Zone3",
        "info": "",
        "x": 220,
        "y": 520,
        "wires": []
    },
    {
        "id": "ee606a946efb2e4c",
        "type": "inject",
        "z": "63022294005c57ec",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"event\":\"LineCeling\",\"source\":\"schedule\"}",
        "payloadType": "json",
        "x": 210,
        "y": 600,
        "wires": [
            [
                "0c1280bbc86b0b71"
            ]
        ]
    },
    {
        "id": "0c1280bbc86b0b71",
        "type": "subflow:058966f9141fa853",
        "z": "63022294005c57ec",
        "name": "",
        "x": 1120,
        "y": 600,
        "wires": []
    },
    {
        "id": "b9653502fbfab804",
        "type": "inject",
        "z": "63022294005c57ec",
        "name": "schedule Zone3",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": true,
        "onceDelay": "5",
        "topic": "",
        "payload": "{\"event\":\"LineFloor\",\"source\":\"schedule\"}",
        "payloadType": "json",
        "x": 250,
        "y": 640,
        "wires": [
            [
                "aced2e7dac037852"
            ]
        ]
    },
    {
        "id": "07e4fcd1cd7c494a",
        "type": "semaphore-take",
        "z": "63022294005c57ec",
        "config": "e8d53e32ddbbd816",
        "name": "",
        "x": 660,
        "y": 640,
        "wires": [
            [
                "58ec43d6b8f0369d"
            ]
        ]
    },
    {
        "id": "c539cff6fc2c2ff9",
        "type": "semaphore-leave",
        "z": "63022294005c57ec",
        "config": "e8d53e32ddbbd816",
        "name": "",
        "x": 1130,
        "y": 640,
        "wires": [
            [
                "d227bfb16820a6ee"
            ]
        ]
    },
    {
        "id": "58ec43d6b8f0369d",
        "type": "function",
        "z": "63022294005c57ec",
        "name": "Next item in block zone3",
        "func": "const db = global.get(\"connetion_mongo\");\nconst lineEnum = global.get(\"LineEnum\");\nconst sourceEnum = global.get(\"SourceEnum\");\nconst collectionEnum = global.get(\"CollectionEnum\");\nconst collection = db.collection(collectionEnum.PRODUCTION_DATA);\nconst zoneMoveTime = global.get(\"ZoneMoveTime\");\nconst preAddObjectCheck = global.get(\"preAddObjectCheck\");\nconst compareDateTime = global.get(\"compareDateTime\")\nconst zoneEnum = global.get('ZoneEnum');\n\ntry {\n    const current_block = await compareDateTime(zoneEnum.ZONE_3.index);\n    if (current_block === 0) {\n        return msg;\n    }\n    // node.warn(`current_block:${current_block}`);\n    preAddObjectCheck(zoneEnum.ZONE_3.index, current_block);\n    return msg;\n} catch (error) {\n    node.error(\"Next item in block zone 2 error message\", error);\n};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 640,
        "wires": [
            [
                "c539cff6fc2c2ff9"
            ]
        ]
    },
    {
        "id": "d227bfb16820a6ee",
        "type": "function",
        "z": "63022294005c57ec",
        "name": "End",
        "func": "// node.warn(\"end\");\n// node.warn(\"----------------------------------------\");",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1310,
        "y": 640,
        "wires": [
            []
        ]
    },
    {
        "id": "4cf49270e8327e3e",
        "type": "comment",
        "z": "63022294005c57ec",
        "name": "Schdule Zone5",
        "info": "",
        "x": 220,
        "y": 700,
        "wires": []
    },
    {
        "id": "7dd3e2b2d4bfb912",
        "type": "inject",
        "z": "63022294005c57ec",
        "name": "schedule Zone5",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": true,
        "onceDelay": "5",
        "topic": "",
        "payload": "{\"event\":\"LineFloor\",\"source\":\"schedule\"}",
        "payloadType": "json",
        "x": 250,
        "y": 740,
        "wires": [
            [
                "54787e778c1976d6"
            ]
        ]
    },
    {
        "id": "c590a4b980ab4fce",
        "type": "semaphore-take",
        "z": "63022294005c57ec",
        "config": "573e5368955bfbd7",
        "name": "",
        "x": 660,
        "y": 740,
        "wires": [
            [
                "5cc83224aef1baa3"
            ]
        ]
    },
    {
        "id": "af764a146c8779a7",
        "type": "semaphore-leave",
        "z": "63022294005c57ec",
        "config": "573e5368955bfbd7",
        "name": "",
        "x": 1130,
        "y": 740,
        "wires": [
            [
                "684a2225910f69c3"
            ]
        ]
    },
    {
        "id": "5cc83224aef1baa3",
        "type": "function",
        "z": "63022294005c57ec",
        "name": "Next item in block zone5",
        "func": "const db = global.get(\"connetion_mongo\");\nconst lineEnum = global.get(\"LineEnum\");\nconst sourceEnum = global.get(\"SourceEnum\");\nconst collectionEnum = global.get(\"CollectionEnum\");\nconst collection = db.collection(collectionEnum.PRODUCTION_DATA);\nconst zoneMoveTime = global.get(\"ZoneMoveTime\");\nconst preAddObjectCheck = global.get(\"preAddObjectCheck\");\nconst compareDateTime = global.get(\"compareDateTime\");\nconst zoneEnum = global.get('ZoneEnum');\nlet maxBlockZone4 = 100;\ntry {\n    const current_block = await compareDateTime(zoneEnum.ZONE_5.index);\n    if (current_block === 0) {\n        return msg;\n    }\n    node.warn(`current_block:${current_block}`);\n    preAddObjectCheck(zoneEnum.ZONE_5.index, current_block);\n    return msg;\n} catch (error) {\n    node.error(\"Next item in block zone 2 error message\", error);\n};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 740,
        "wires": [
            [
                "af764a146c8779a7"
            ]
        ]
    },
    {
        "id": "684a2225910f69c3",
        "type": "function",
        "z": "63022294005c57ec",
        "name": "End",
        "func": "// node.warn(\"end\");\n// node.warn(\"----------------------------------------\");",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1310,
        "y": 740,
        "wires": [
            []
        ]
    },
    {
        "id": "e23d7141e135bddc",
        "type": "comment",
        "z": "63022294005c57ec",
        "name": "Schdule Zone6",
        "info": "",
        "x": 220,
        "y": 800,
        "wires": []
    },
    {
        "id": "2966d0615fa71506",
        "type": "inject",
        "z": "63022294005c57ec",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"event\":\"LineCeling\",\"source\":\"schedule\"}",
        "payloadType": "json",
        "x": 210,
        "y": 880,
        "wires": [
            [
                "249b8a560fbe1513"
            ]
        ]
    },
    {
        "id": "f87d039f812c782f",
        "type": "inject",
        "z": "63022294005c57ec",
        "name": "schedule Zone6",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": true,
        "onceDelay": "5",
        "topic": "",
        "payload": "{\"event\":\"LineFloor\",\"source\":\"schedule\"}",
        "payloadType": "json",
        "x": 250,
        "y": 920,
        "wires": [
            [
                "f5b76ff5dffdd394"
            ]
        ]
    },
    {
        "id": "cb5674ddc8e4ad23",
        "type": "semaphore-take",
        "z": "63022294005c57ec",
        "config": "a8b852ed91072d2e",
        "name": "",
        "x": 660,
        "y": 920,
        "wires": [
            [
                "afea3ca9514c16b8"
            ]
        ]
    },
    {
        "id": "f7a6e95cf87c7482",
        "type": "semaphore-leave",
        "z": "63022294005c57ec",
        "config": "a8b852ed91072d2e",
        "name": "",
        "x": 1130,
        "y": 920,
        "wires": [
            [
                "682e67abaa4a7348"
            ]
        ]
    },
    {
        "id": "afea3ca9514c16b8",
        "type": "function",
        "z": "63022294005c57ec",
        "name": "Next item in block zone6",
        "func": "const db = global.get(\"connetion_mongo\");\nconst lineEnum = global.get(\"LineEnum\");\nconst sourceEnum = global.get(\"SourceEnum\");\nconst collectionEnum = global.get(\"CollectionEnum\");\nconst collection = db.collection(collectionEnum.PRODUCTION_DATA);\nconst zoneMoveTime = global.get(\"ZoneMoveTime\");\nconst preAddObjectCheck = global.get(\"preAddObjectCheck\");\nconst compareDateTime = global.get(\"compareDateTime\");\nconst zoneEnum = global.get('ZoneEnum');\nlet maxBlockZone4 = 100;\ntry {\n    const current_block = await compareDateTime(zoneEnum.ZONE_6.index);\n    if (current_block === 0) {\n        return msg;\n    }\n    // node.warn(`current_block:${current_block}`);\n    preAddObjectCheck(zoneEnum.ZONE_6.index, current_block);\n    return msg;\n} catch (error) {\n    node.error(`Next item in block zone ${zoneEnum.ZONE_6.index} error message`, error);\n};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 920,
        "wires": [
            [
                "f7a6e95cf87c7482"
            ]
        ]
    },
    {
        "id": "682e67abaa4a7348",
        "type": "function",
        "z": "63022294005c57ec",
        "name": "End",
        "func": "// node.warn(\"end\");\n// node.warn(\"----------------------------------------\");",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1330,
        "y": 920,
        "wires": [
            []
        ]
    },
    {
        "id": "249b8a560fbe1513",
        "type": "subflow:85e689ea7c76acc7",
        "z": "63022294005c57ec",
        "name": "",
        "x": 1120,
        "y": 880,
        "wires": []
    },
    {
        "id": "88737333227e699c",
        "type": "comment",
        "z": "63022294005c57ec",
        "name": "Schdule Zone7",
        "info": "",
        "x": 220,
        "y": 980,
        "wires": []
    },
    {
        "id": "6e208eb719fe9bf2",
        "type": "inject",
        "z": "63022294005c57ec",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"event\":\"LineCeling\",\"source\":\"schedule\"}",
        "payloadType": "json",
        "x": 210,
        "y": 1060,
        "wires": [
            [
                "bf7040b89e9ed008"
            ]
        ]
    },
    {
        "id": "0b830db7f4bfd266",
        "type": "inject",
        "z": "63022294005c57ec",
        "name": "schedule Zone7",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": true,
        "onceDelay": "5",
        "topic": "",
        "payload": "{\"event\":\"LineFloor\",\"source\":\"schedule\"}",
        "payloadType": "json",
        "x": 250,
        "y": 1100,
        "wires": [
            [
                "5e44dd30b56c3035"
            ]
        ]
    },
    {
        "id": "d512e9d6f8164f7e",
        "type": "semaphore-take",
        "z": "63022294005c57ec",
        "config": "23d8c85168c40d3b",
        "name": "",
        "x": 660,
        "y": 1100,
        "wires": [
            [
                "ce7f2b3888b4890b"
            ]
        ]
    },
    {
        "id": "dae2e5de118f1666",
        "type": "semaphore-leave",
        "z": "63022294005c57ec",
        "config": "23d8c85168c40d3b",
        "name": "",
        "x": 1130,
        "y": 1100,
        "wires": [
            [
                "8c154d233bb7ab1b"
            ]
        ]
    },
    {
        "id": "ce7f2b3888b4890b",
        "type": "function",
        "z": "63022294005c57ec",
        "name": "Next item in block zone7",
        "func": "const db = global.get(\"connetion_mongo\");\nconst lineEnum = global.get(\"LineEnum\");\nconst sourceEnum = global.get(\"SourceEnum\");\nconst collectionEnum = global.get(\"CollectionEnum\");\nconst collection = db.collection(collectionEnum.PRODUCTION_DATA);\nconst zoneMoveTime = global.get(\"ZoneMoveTime\");\nconst preAddObjectCheck = global.get(\"preAddObjectCheck\");\nconst compareDateTime = global.get(\"compareDateTime\");\nconst zoneEnum = global.get('ZoneEnum');\nlet maxBlockZone4 = 100;\ntry {\n    const current_block = await compareDateTime(zoneEnum.ZONE_7.index);\n    if (current_block === 0) {\n        return msg;\n    }\n    // node.warn(`current_block:${current_block}`);\n    preAddObjectCheck(zoneEnum.ZONE_7.index, current_block);\n    return msg;\n} catch (error) {\n    node.error(`Next item in block zone ${zoneEnum.ZONE_7.index} error message`, error);\n};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 1100,
        "wires": [
            [
                "dae2e5de118f1666"
            ]
        ]
    },
    {
        "id": "8c154d233bb7ab1b",
        "type": "function",
        "z": "63022294005c57ec",
        "name": "End",
        "func": "// node.warn(\"end\");\n// node.warn(\"----------------------------------------\");",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1330,
        "y": 1100,
        "wires": [
            []
        ]
    },
    {
        "id": "bf7040b89e9ed008",
        "type": "subflow:26852d784adb3c7f",
        "z": "63022294005c57ec",
        "name": "",
        "x": 1120,
        "y": 1060,
        "wires": []
    },
    {
        "id": "07a4cdab50f19d56",
        "type": "comment",
        "z": "63022294005c57ec",
        "name": "Schdule Zone9",
        "info": "",
        "x": 220,
        "y": 1160,
        "wires": []
    },
    {
        "id": "16da382663113823",
        "type": "inject",
        "z": "63022294005c57ec",
        "name": "schedule Zone9",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": true,
        "onceDelay": "5",
        "topic": "",
        "payload": "{\"event\":\"LineFloor\",\"source\":\"schedule\"}",
        "payloadType": "json",
        "x": 250,
        "y": 1200,
        "wires": [
            [
                "4d117c0bcb1766e1"
            ]
        ]
    },
    {
        "id": "5be30ee5be4c7835",
        "type": "semaphore-take",
        "z": "63022294005c57ec",
        "config": "0e291ed92d22da3d",
        "name": "",
        "x": 660,
        "y": 1200,
        "wires": [
            [
                "7c94558c5e2ed1c5"
            ]
        ]
    },
    {
        "id": "82834f99d5ab5a15",
        "type": "semaphore-leave",
        "z": "63022294005c57ec",
        "config": "0e291ed92d22da3d",
        "name": "",
        "x": 1130,
        "y": 1200,
        "wires": [
            [
                "a02f7bac399ed3cd"
            ]
        ]
    },
    {
        "id": "7c94558c5e2ed1c5",
        "type": "function",
        "z": "63022294005c57ec",
        "name": "Next item in block zone9",
        "func": "const db = global.get(\"connetion_mongo\");\nconst lineEnum = global.get(\"LineEnum\");\nconst sourceEnum = global.get(\"SourceEnum\");\nconst collectionEnum = global.get(\"CollectionEnum\");\nconst collection = db.collection(collectionEnum.PRODUCTION_DATA);\nconst zoneMoveTime = global.get(\"ZoneMoveTime\");\nconst preAddObjectCheck = global.get(\"preAddObjectCheck\");\nconst compareDateTime = global.get(\"compareDateTime\");\nconst zoneEnum = global.get('ZoneEnum');\nlet maxBlockZone4 = 100;\ntry {\n    const current_block = await compareDateTime(zoneEnum.ZONE_9.index);\n    if (current_block === 0) {\n        return msg;\n    }\n    // node.warn(`current_block:${current_block}`);\n    preAddObjectCheck(zoneEnum.ZONE_9.index, current_block);\n    return msg;\n} catch (error) {\n    node.error(`Next item in block zone ${zoneEnum.ZONE_9.index} error message`, error);\n};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 1200,
        "wires": [
            [
                "82834f99d5ab5a15"
            ]
        ]
    },
    {
        "id": "a02f7bac399ed3cd",
        "type": "function",
        "z": "63022294005c57ec",
        "name": "End",
        "func": "// node.warn(\"end\");\n// node.warn(\"----------------------------------------\");",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1330,
        "y": 1200,
        "wires": [
            []
        ]
    },
    {
        "id": "0f4e2acf23e7fc6d",
        "type": "comment",
        "z": "63022294005c57ec",
        "name": "Schdule Zone10",
        "info": "",
        "x": 220,
        "y": 1260,
        "wires": []
    },
    {
        "id": "c65ce587ea76fb1b",
        "type": "inject",
        "z": "63022294005c57ec",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"event\":\"LineCeling\",\"source\":\"schedule\"}",
        "payloadType": "json",
        "x": 210,
        "y": 1340,
        "wires": [
            [
                "191a47658a979c4e"
            ]
        ]
    },
    {
        "id": "be47748810de5b64",
        "type": "inject",
        "z": "63022294005c57ec",
        "name": "schedule Zone10",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": true,
        "onceDelay": "5",
        "topic": "",
        "payload": "{\"event\":\"LineFloor\",\"source\":\"schedule\"}",
        "payloadType": "json",
        "x": 250,
        "y": 1380,
        "wires": [
            [
                "1a9e1e3b6725553a"
            ]
        ]
    },
    {
        "id": "8a471e7e83665182",
        "type": "semaphore-take",
        "z": "63022294005c57ec",
        "config": "1f4b221281101740",
        "name": "",
        "x": 660,
        "y": 1380,
        "wires": [
            [
                "09e228d762facaf0"
            ]
        ]
    },
    {
        "id": "e48707de946f9a0f",
        "type": "semaphore-leave",
        "z": "63022294005c57ec",
        "config": "1f4b221281101740",
        "name": "",
        "x": 1130,
        "y": 1380,
        "wires": [
            [
                "f601150269e39f5d"
            ]
        ]
    },
    {
        "id": "09e228d762facaf0",
        "type": "function",
        "z": "63022294005c57ec",
        "name": "Next item in block zone10",
        "func": "const db = global.get(\"connetion_mongo\");\nconst lineEnum = global.get(\"LineEnum\");\nconst sourceEnum = global.get(\"SourceEnum\");\nconst collectionEnum = global.get(\"CollectionEnum\");\nconst collection = db.collection(collectionEnum.PRODUCTION_DATA);\nconst zoneMoveTime = global.get(\"ZoneMoveTime\");\nconst preAddObjectCheck = global.get(\"preAddObjectCheck\");\nconst compareDateTime = global.get(\"compareDateTime\");\nconst zoneEnum = global.get('ZoneEnum');\nlet maxBlockZone4 = 100;\ntry {\n    const current_block = await compareDateTime(zoneEnum.ZONE_10.index);\n    if (current_block === 0) {\n        return msg;\n    }\n    // node.warn(`current_block:${current_block}`);\n    preAddObjectCheck(zoneEnum.ZONE_10.index, current_block);\n    return msg;\n} catch (error) {\n    node.error(`Next item in block zone ${zoneEnum.ZONE_10.index} error message`, error);\n};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 1380,
        "wires": [
            [
                "e48707de946f9a0f"
            ]
        ]
    },
    {
        "id": "f601150269e39f5d",
        "type": "function",
        "z": "63022294005c57ec",
        "name": "End",
        "func": "// node.warn(\"end\");\n// node.warn(\"----------------------------------------\");",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1330,
        "y": 1380,
        "wires": [
            []
        ]
    },
    {
        "id": "191a47658a979c4e",
        "type": "subflow:c378d9efe79ee88a",
        "z": "63022294005c57ec",
        "name": "",
        "x": 1130,
        "y": 1340,
        "wires": []
    },
    {
        "id": "c0a015631c1e86b2",
        "type": "comment",
        "z": "63022294005c57ec",
        "name": "Schdule Zone11",
        "info": "",
        "x": 220,
        "y": 1440,
        "wires": []
    },
    {
        "id": "1c234c3c1473ae3b",
        "type": "inject",
        "z": "63022294005c57ec",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"event\":\"LineCeling\",\"source\":\"schedule\"}",
        "payloadType": "json",
        "x": 210,
        "y": 1520,
        "wires": [
            [
                "85b174b6babfa410"
            ]
        ]
    },
    {
        "id": "18056f222c812667",
        "type": "inject",
        "z": "63022294005c57ec",
        "name": "schedule Zone11",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": true,
        "onceDelay": "5",
        "topic": "",
        "payload": "{\"event\":\"LineFloor\",\"source\":\"schedule\"}",
        "payloadType": "json",
        "x": 250,
        "y": 1560,
        "wires": [
            [
                "f2abfa57f98ef5fc"
            ]
        ]
    },
    {
        "id": "9b0621b35d5a115e",
        "type": "semaphore-take",
        "z": "63022294005c57ec",
        "config": "7c1cf240dba9a6bc",
        "name": "",
        "x": 660,
        "y": 1560,
        "wires": [
            [
                "66191cf7255dbbe2"
            ]
        ]
    },
    {
        "id": "388552071dae8f19",
        "type": "semaphore-leave",
        "z": "63022294005c57ec",
        "config": "7c1cf240dba9a6bc",
        "name": "",
        "x": 1130,
        "y": 1560,
        "wires": [
            [
                "9520c6fd454c58d1"
            ]
        ]
    },
    {
        "id": "66191cf7255dbbe2",
        "type": "function",
        "z": "63022294005c57ec",
        "name": "Next item in block zone11",
        "func": "const db = global.get(\"connetion_mongo\");\nconst lineEnum = global.get(\"LineEnum\");\nconst sourceEnum = global.get(\"SourceEnum\");\nconst collectionEnum = global.get(\"CollectionEnum\");\nconst collection = db.collection(collectionEnum.PRODUCTION_DATA);\nconst zoneMoveTime = global.get(\"ZoneMoveTime\");\nconst preAddObjectCheck = global.get(\"preAddObjectCheck\");\nconst compareDateTime = global.get(\"compareDateTime\");\nconst zoneEnum = global.get('ZoneEnum');\nlet maxBlockZone4 = 100;\ntry {\n    const current_block = await compareDateTime(zoneEnum.ZONE_11.index);\n    if (current_block === 0) {\n        return msg;\n    }\n    // node.warn(`current_block:${current_block}`);\n    preAddObjectCheck(zoneEnum.ZONE_11.index, current_block);\n    return msg;\n} catch (error) {\n    node.error(`Next item in block zone ${zoneEnum.ZONE_11.index} error message`, error);\n};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 1560,
        "wires": [
            [
                "388552071dae8f19"
            ]
        ]
    },
    {
        "id": "9520c6fd454c58d1",
        "type": "function",
        "z": "63022294005c57ec",
        "name": "End",
        "func": "// node.warn(\"end\");\n// node.warn(\"----------------------------------------\");",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1330,
        "y": 1560,
        "wires": [
            []
        ]
    },
    {
        "id": "85b174b6babfa410",
        "type": "subflow:ffec7d5f3c1b1228",
        "z": "63022294005c57ec",
        "name": "",
        "x": 1130,
        "y": 1520,
        "wires": []
    },
    {
        "id": "207d00daa0565449",
        "type": "comment",
        "z": "63022294005c57ec",
        "name": "Schdule Zone12",
        "info": "",
        "x": 220,
        "y": 1620,
        "wires": []
    },
    {
        "id": "3bb4c21be1e17c08",
        "type": "inject",
        "z": "63022294005c57ec",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"event\":\"LineCeling\",\"source\":\"schedule\"}",
        "payloadType": "json",
        "x": 210,
        "y": 1700,
        "wires": [
            [
                "8e89169eb4926ab4"
            ]
        ]
    },
    {
        "id": "356fa74802e7ac21",
        "type": "inject",
        "z": "63022294005c57ec",
        "name": "schedule Zone12",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": true,
        "onceDelay": "5",
        "topic": "",
        "payload": "{\"event\":\"LineFloor\",\"source\":\"schedule\"}",
        "payloadType": "json",
        "x": 250,
        "y": 1740,
        "wires": [
            [
                "d5b8ddf022a93573"
            ]
        ]
    },
    {
        "id": "59704d89b2fd9c58",
        "type": "semaphore-take",
        "z": "63022294005c57ec",
        "config": "038695e34941a35f",
        "name": "",
        "x": 660,
        "y": 1740,
        "wires": [
            [
                "9d3f9f361985b1d2"
            ]
        ]
    },
    {
        "id": "b28ed4244adecfe4",
        "type": "semaphore-leave",
        "z": "63022294005c57ec",
        "config": "038695e34941a35f",
        "name": "",
        "x": 1130,
        "y": 1740,
        "wires": [
            [
                "10bde93cfd0fbe55"
            ]
        ]
    },
    {
        "id": "9d3f9f361985b1d2",
        "type": "function",
        "z": "63022294005c57ec",
        "name": "Next item in block zone12",
        "func": "const db = global.get(\"connetion_mongo\");\nconst lineEnum = global.get(\"LineEnum\");\nconst sourceEnum = global.get(\"SourceEnum\");\nconst collectionEnum = global.get(\"CollectionEnum\");\nconst collection = db.collection(collectionEnum.PRODUCTION_DATA);\nconst zoneMoveTime = global.get(\"ZoneMoveTime\");\nconst preAddObjectCheck = global.get(\"preAddObjectCheck\");\nconst compareDateTime = global.get(\"compareDateTime\");\nconst zoneEnum = global.get('ZoneEnum');\nlet maxBlockZone4 = 100;\ntry {\n    const current_block = await compareDateTime(zoneEnum.ZONE_12.index);\n    if (current_block === 0) {\n        return msg;\n    }\n    // node.warn(`current_block:${current_block}`);\n    preAddObjectCheck(zoneEnum.ZONE_12.index, current_block);\n    return msg;\n} catch (error) {\n    node.error(`Next item in block zone ${zoneEnum.ZONE_12.index} error message`, error);\n};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 1740,
        "wires": [
            [
                "b28ed4244adecfe4"
            ]
        ]
    },
    {
        "id": "10bde93cfd0fbe55",
        "type": "function",
        "z": "63022294005c57ec",
        "name": "End",
        "func": "// node.warn(\"end\");\n// node.warn(\"----------------------------------------\");",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1330,
        "y": 1740,
        "wires": [
            []
        ]
    },
    {
        "id": "8e89169eb4926ab4",
        "type": "subflow:2bc316e725c3638f",
        "z": "63022294005c57ec",
        "name": "",
        "x": 1130,
        "y": 1700,
        "wires": []
    },
    {
        "id": "ee65eb02be18c1bd",
        "type": "comment",
        "z": "63022294005c57ec",
        "name": "Update Weight",
        "info": "",
        "x": 220,
        "y": 1800,
        "wires": []
    },
    {
        "id": "5da1419adf2c2675",
        "type": "inject",
        "z": "63022294005c57ec",
        "name": "Inject",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "2.5",
        "payloadType": "str",
        "x": 210,
        "y": 1880,
        "wires": [
            [
                "19d32d02e29800d4"
            ]
        ]
    },
    {
        "id": "19d32d02e29800d4",
        "type": "subflow:ed16bca66bbf3ac0",
        "z": "63022294005c57ec",
        "name": "",
        "x": 1410,
        "y": 1920,
        "wires": []
    },
    {
        "id": "5bcab18f6d237598",
        "type": "inject",
        "z": "63022294005c57ec",
        "name": "interval 1 sec",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 240,
        "y": 140,
        "wires": [
            [
                "e3d8203879606d55"
            ]
        ]
    },
    {
        "id": "e3d8203879606d55",
        "type": "function",
        "z": "63022294005c57ec",
        "name": "Address 605",
        "func": "var fc=3;\nvar sa=605;          //start address base0\nvar addresses=1;   //Number of word address\n\nmsg.payload={value: msg.payload, 'fc': fc, 'unitid': 1, 'address': sa , 'quantity': addresses };\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 140,
        "wires": [
            [
                "359022ceef310395"
            ]
        ]
    },
    {
        "id": "359022ceef310395",
        "type": "modbus-flex-getter",
        "z": "63022294005c57ec",
        "name": "",
        "showStatusActivities": false,
        "showErrors": false,
        "showWarnings": true,
        "logIOActivities": false,
        "server": "7ab982fca0f94f9e",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 680,
        "y": 140,
        "wires": [
            [],
            [
                "4bbd12bba2c73cae"
            ]
        ]
    },
    {
        "id": "4bbd12bba2c73cae",
        "type": "function",
        "z": "63022294005c57ec",
        "name": "Validate status",
        "func": "const buf = Buffer.from(msg.payload.buffer);\nconst value = buf.readInt16BE();\nconst lineEnum = global.get(\"LineEnum\");\n\nlet statusCounter = global.get(\"STATUS_ADDRESS_CELLING\");\nnode.status({\n    fill: \"blue\", shape: \"ring\", text: \"value\" + \":\" + value\n});\nif (statusCounter === undefined || isNaN(statusCounter)) {\n    global.set(\"STATUS_ADDRESS_CELLING\", 0);\n}\nif (value === 2) {\n    statusCounter += 1;\n    global.set(\"STATUS_ADDRESS_CELLING\", statusCounter);\n}\n\nif (value === 1 && statusCounter > 3) {\n    global.set(\"STATUS_ADDRESS_CELLING\", 0);\n    msg.payload.event = lineEnum.LINE_CEILING.value;\n    return msg;\n}\n// node.warn(statusCounter);\n// node.warn(value);\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 900,
        "y": 140,
        "wires": [
            [
                "6325504abaa24626"
            ]
        ]
    },
    {
        "id": "8df0332f12688e88",
        "type": "inject",
        "z": "63022294005c57ec",
        "name": "interval 1 sec",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 240,
        "y": 200,
        "wires": [
            [
                "f3f3d105f386e51e"
            ]
        ]
    },
    {
        "id": "f3f3d105f386e51e",
        "type": "function",
        "z": "63022294005c57ec",
        "name": "Address 606",
        "func": "var fc=3;\nvar sa=606;          //start address base0\nvar addresses=1;   //Number of word address\n\nmsg.payload={value: msg.payload, 'fc': fc, 'unitid': 1, 'address': sa , 'quantity': addresses };\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 200,
        "wires": [
            [
                "8ed2b3937e3a4677"
            ]
        ]
    },
    {
        "id": "8ed2b3937e3a4677",
        "type": "modbus-flex-getter",
        "z": "63022294005c57ec",
        "name": "",
        "showStatusActivities": false,
        "showErrors": false,
        "showWarnings": true,
        "logIOActivities": false,
        "server": "7ab982fca0f94f9e",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 680,
        "y": 200,
        "wires": [
            [],
            [
                "6fa61c69753b3cc4"
            ]
        ]
    },
    {
        "id": "6fa61c69753b3cc4",
        "type": "function",
        "z": "63022294005c57ec",
        "name": "Validate status",
        "func": "const buf = Buffer.from(msg.payload.buffer);\nconst value = buf.readInt16BE();\nconst lineEnum = global.get(\"LineEnum\");\n\nlet statusCounter = global.get(\"STATUS_ADDRESS_FLOOR\");\nnode.status({\n    fill: \"blue\", shape: \"ring\", text: \"value\" + \":\" + value\n});\nif (statusCounter === undefined || isNaN(statusCounter)) {\n    global.set(\"STATUS_ADDRESS_FLOOR\", 0);\n}\nif (value === 2) {\n    statusCounter += 1;\n    global.set(\"STATUS_ADDRESS_FLOOR\", statusCounter);\n}\n\nif (value === 1 && statusCounter > 3) {\n    global.set(\"STATUS_ADDRESS_FLOOR\", 0);\n    msg.payload.event = lineEnum.LINE_FLOOR.value;\n    return msg;\n}\n// node.warn(statusCounter);\n// node.warn(value);\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 900,
        "y": 200,
        "wires": [
            [
                "6325504abaa24626"
            ]
        ]
    },
    {
        "id": "d0ddf754eb65ad20",
        "type": "inject",
        "z": "63022294005c57ec",
        "name": "interval 1 sec",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 240,
        "y": 560,
        "wires": [
            [
                "94c2a868a3d5455c"
            ]
        ]
    },
    {
        "id": "94c2a868a3d5455c",
        "type": "function",
        "z": "63022294005c57ec",
        "name": "Address 608",
        "func": "var fc = 3;\nvar sa = 608;          //start address base0\nvar addresses = 1;   //Number of word address\n\nmsg.payload = { value: msg.payload, 'fc': fc, 'unitid': 1, 'address': sa, 'quantity': addresses };\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 560,
        "wires": [
            [
                "871149c89cb62093"
            ]
        ]
    },
    {
        "id": "871149c89cb62093",
        "type": "modbus-flex-getter",
        "z": "63022294005c57ec",
        "name": "",
        "showStatusActivities": false,
        "showErrors": false,
        "showWarnings": true,
        "logIOActivities": false,
        "server": "7ab982fca0f94f9e",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 680,
        "y": 560,
        "wires": [
            [],
            [
                "ef7fce8092cd8796"
            ]
        ]
    },
    {
        "id": "ef7fce8092cd8796",
        "type": "function",
        "z": "63022294005c57ec",
        "name": "Validate status",
        "func": "const buf = Buffer.from(msg.payload.buffer);\nconst value = buf.readInt16BE();\nconst lineEnum = global.get(\"LineEnum\");\n\nlet statusCounter = global.get(\"STATUS_ADDRESS_ST2\");\nnode.status({\n    fill: \"blue\", shape: \"ring\", text: \"value\" + \":\" + value\n});\nif (statusCounter === undefined || isNaN(statusCounter)) {\n    global.set(\"STATUS_ADDRESS_ST2\", 0);\n}\nif (value === 2) {\n    statusCounter += 1;\n    global.set(\"STATUS_ADDRESS_ST2\", statusCounter);\n}\n\nif (value === 1 && statusCounter > 2) {\n    global.set(\"STATUS_ADDRESS_ST2\", 0);\n    node.log(\"STATUS_ADDRESS_ST2 is active....\");\n    return msg;\n}\n// node.warn(statusCounter);\n// node.warn(value);\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 900,
        "y": 560,
        "wires": [
            [
                "0c1280bbc86b0b71"
            ]
        ]
    },
    {
        "id": "82aaf1206eb4b5a3",
        "type": "inject",
        "z": "63022294005c57ec",
        "name": "interval 1 sec",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 240,
        "y": 840,
        "wires": [
            [
                "0fae97d7688e743b"
            ]
        ]
    },
    {
        "id": "0fae97d7688e743b",
        "type": "function",
        "z": "63022294005c57ec",
        "name": "Address 610",
        "func": "var fc = 3;\nvar sa = 610;          //start address base0\nvar addresses = 1;   //Number of word address\n\nmsg.payload = { value: msg.payload, 'fc': fc, 'unitid': 1, 'address': sa, 'quantity': addresses };\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 840,
        "wires": [
            [
                "2a2444e388afc2f5"
            ]
        ]
    },
    {
        "id": "2a2444e388afc2f5",
        "type": "modbus-flex-getter",
        "z": "63022294005c57ec",
        "name": "",
        "showStatusActivities": false,
        "showErrors": false,
        "showWarnings": true,
        "logIOActivities": false,
        "server": "7ab982fca0f94f9e",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 680,
        "y": 840,
        "wires": [
            [],
            [
                "a232aaa509e3e93d"
            ]
        ]
    },
    {
        "id": "a232aaa509e3e93d",
        "type": "function",
        "z": "63022294005c57ec",
        "name": "Validate status",
        "func": "const buf = Buffer.from(msg.payload.buffer);\nconst value = buf.readInt16BE();\nconst lineEnum = global.get(\"LineEnum\");\n\nlet statusCounter = global.get(\"STATUS_ADDRESS_EE_IN\");\nnode.status({\n    fill: \"blue\", shape: \"ring\", text: \"value\" + \":\" + value\n});\nif (statusCounter === undefined || isNaN(statusCounter)) {\n    global.set(\"STATUS_ADDRESS_EE_IN\", 0);\n}\nif (value === 2) {\n    statusCounter += 1;\n    global.set(\"STATUS_ADDRESS_EE_IN\", statusCounter);\n}\n\nif (value === 1 && statusCounter > 2) {\n    global.set(\"STATUS_ADDRESS_EE_IN\", 0);\n    node.log(\"STATUS_ADDRESS_EE_IN is active....\");\n    return msg;\n}\n// node.warn(statusCounter);\n// node.warn(value);\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 900,
        "y": 840,
        "wires": [
            [
                "249b8a560fbe1513"
            ]
        ]
    },
    {
        "id": "78c76274162f539a",
        "type": "inject",
        "z": "63022294005c57ec",
        "name": "interval 1 sec",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 240,
        "y": 1020,
        "wires": [
            [
                "efc695d0a01aa4ca"
            ]
        ]
    },
    {
        "id": "efc695d0a01aa4ca",
        "type": "function",
        "z": "63022294005c57ec",
        "name": "Address 611",
        "func": "var fc = 3;\nvar sa = 611;          //start address base0\nvar addresses = 1;   //Number of word address\n\nmsg.payload = { value: msg.payload, 'fc': fc, 'unitid': 1, 'address': sa, 'quantity': addresses };\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 1020,
        "wires": [
            [
                "9f1d9ab7835d1114"
            ]
        ]
    },
    {
        "id": "9f1d9ab7835d1114",
        "type": "modbus-flex-getter",
        "z": "63022294005c57ec",
        "name": "",
        "showStatusActivities": false,
        "showErrors": false,
        "showWarnings": true,
        "logIOActivities": false,
        "server": "7ab982fca0f94f9e",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 680,
        "y": 1020,
        "wires": [
            [],
            [
                "5e2427a2b4d2899e"
            ]
        ]
    },
    {
        "id": "5e2427a2b4d2899e",
        "type": "function",
        "z": "63022294005c57ec",
        "name": "Validate status",
        "func": "const buf = Buffer.from(msg.payload.buffer);\nconst value = buf.readInt16BE();\nconst lineEnum = global.get(\"LineEnum\");\n\nlet statusCounter = global.get(\"STATUS_ADDRESS_IWPT_IN\");\n// node.log(`statusCounter1:${statusCounter}`);\nnode.status({\n    fill: \"blue\", shape: \"ring\", text: \"value\" + \":\" + value\n});\nif (statusCounter === undefined || isNaN(statusCounter)) {\n    global.set(\"STATUS_ADDRESS_IWPT_IN\", 0);\n}\nif (value === 2) {\n    statusCounter += 1;\n    global.set(\"STATUS_ADDRESS_IWPT_IN\", statusCounter);\n}\n// node.log(`statusCounter:${statusCounter}`);\nif (value === 1 && statusCounter > 2) {\n    global.set(\"STATUS_ADDRESS_IWPT_IN\", 0);\n    node.log(\"STATUS_ADDRESS_IWPT_IN is active....\");\n    return msg;\n}\n// node.warn(statusCounter);\n// node.warn(value);\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 900,
        "y": 1020,
        "wires": [
            [
                "bf7040b89e9ed008"
            ]
        ]
    },
    {
        "id": "3cfd9990370bef27",
        "type": "inject",
        "z": "63022294005c57ec",
        "name": "interval 1 sec",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 240,
        "y": 1300,
        "wires": [
            [
                "ba4f13deab98ed62"
            ]
        ]
    },
    {
        "id": "ba4f13deab98ed62",
        "type": "function",
        "z": "63022294005c57ec",
        "name": "Address 614",
        "func": "var fc = 3;\nvar sa = 614;          //start address base0\nvar addresses = 1;   //Number of word address\n\nmsg.payload = { value: msg.payload, 'fc': fc, 'unitid': 1, 'address': sa, 'quantity': addresses };\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 1300,
        "wires": [
            [
                "5a70981f82cc444f"
            ]
        ]
    },
    {
        "id": "5a70981f82cc444f",
        "type": "modbus-flex-getter",
        "z": "63022294005c57ec",
        "name": "",
        "showStatusActivities": false,
        "showErrors": false,
        "showWarnings": true,
        "logIOActivities": false,
        "server": "7ab982fca0f94f9e",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 680,
        "y": 1300,
        "wires": [
            [],
            [
                "d3dafc5538fb91d6"
            ]
        ]
    },
    {
        "id": "d3dafc5538fb91d6",
        "type": "function",
        "z": "63022294005c57ec",
        "name": "Validate status",
        "func": "const buf = Buffer.from(msg.payload.buffer);\nconst value = buf.readInt16BE();\nconst lineEnum = global.get(\"LineEnum\");\n\nlet statusCounter = global.get(\"STATUS_ADDRESS_DOOR_OUT\");\nnode.status({\n    fill: \"blue\", shape: \"ring\", text: \"value\" + \":\" + value\n});\nif (statusCounter === undefined || isNaN(statusCounter)) {\n    global.set(\"STATUS_ADDRESS_DOOR_OUT\", 0);\n}\nif (value === 2) {\n    statusCounter += 1;\n    global.set(\"STATUS_ADDRESS_DOOR_OUT\", statusCounter);\n}\n\nif (value === 1 && statusCounter > 2) {\n    global.set(\"STATUS_ADDRESS_DOOR_OUT\", 0);\n    node.log(\"STATUS_ADDRESS_DOOR_OUT is active....\");\n    return msg;\n}\n// node.warn(statusCounter);\n// node.warn(value);\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 900,
        "y": 1300,
        "wires": [
            [
                "191a47658a979c4e"
            ]
        ]
    },
    {
        "id": "90a423dda528abd5",
        "type": "inject",
        "z": "63022294005c57ec",
        "name": "interval 1 sec",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 240,
        "y": 1480,
        "wires": [
            [
                "870325021916110c"
            ]
        ]
    },
    {
        "id": "870325021916110c",
        "type": "function",
        "z": "63022294005c57ec",
        "name": "Address 615",
        "func": "var fc = 3;\nvar sa = 615;          //start address base0\nvar addresses = 1;   //Number of word address\n\nmsg.payload = { value: msg.payload, 'fc': fc, 'unitid': 1, 'address': sa, 'quantity': addresses };\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 1480,
        "wires": [
            [
                "bc8f5eaa943845c9"
            ]
        ]
    },
    {
        "id": "bc8f5eaa943845c9",
        "type": "modbus-flex-getter",
        "z": "63022294005c57ec",
        "name": "",
        "showStatusActivities": false,
        "showErrors": false,
        "showWarnings": true,
        "logIOActivities": false,
        "server": "7ab982fca0f94f9e",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 680,
        "y": 1480,
        "wires": [
            [],
            [
                "d5b2158eeb11f977"
            ]
        ]
    },
    {
        "id": "d5b2158eeb11f977",
        "type": "function",
        "z": "63022294005c57ec",
        "name": "Validate status",
        "func": "const buf = Buffer.from(msg.payload.buffer);\nconst value = buf.readInt16BE();\nconst lineEnum = global.get(\"LineEnum\");\n\nlet statusCounter = global.get(\"STATUS_ADDRESS_WINDOW_OUT\");\nnode.status({\n    fill: \"blue\", shape: \"ring\", text: \"value\" + \":\" + value\n});\n\nif (statusCounter === undefined || isNaN(statusCounter)) {\n    global.set(\"STATUS_ADDRESS_WINDOW_OUT\", 0);\n}\n\nif (value === 2) {\n    statusCounter += 1;\n    global.set(\"STATUS_ADDRESS_WINDOW_OUT\", statusCounter);\n}\n\nif (value === 1 && statusCounter > 2) {\n    global.set(\"STATUS_ADDRESS_WINDOW_OUT\", 0);\n    node.log(\"STATUS_ADDRESS_WINDOW_OUT is active....\");\n    return msg;\n}\n// node.warn(statusCounter);\n// node.warn(value);\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 900,
        "y": 1480,
        "wires": [
            [
                "85b174b6babfa410"
            ]
        ]
    },
    {
        "id": "d64ae47d3cd12116",
        "type": "inject",
        "z": "63022294005c57ec",
        "name": "interval 1 sec",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 240,
        "y": 1660,
        "wires": [
            [
                "219eab3b28b7d5d3"
            ]
        ]
    },
    {
        "id": "219eab3b28b7d5d3",
        "type": "function",
        "z": "63022294005c57ec",
        "name": "Address 616",
        "func": "var fc = 3;\nvar sa = 616;          //start address base0\nvar addresses = 1;   //Number of word address\n\nmsg.payload = { value: msg.payload, 'fc': fc, 'unitid': 1, 'address': sa, 'quantity': addresses };\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 1660,
        "wires": [
            [
                "2222aa697775c668"
            ]
        ]
    },
    {
        "id": "2222aa697775c668",
        "type": "modbus-flex-getter",
        "z": "63022294005c57ec",
        "name": "",
        "showStatusActivities": false,
        "showErrors": false,
        "showWarnings": true,
        "logIOActivities": false,
        "server": "7ab982fca0f94f9e",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 680,
        "y": 1660,
        "wires": [
            [],
            [
                "bd80540eb6cf1fed"
            ]
        ]
    },
    {
        "id": "bd80540eb6cf1fed",
        "type": "function",
        "z": "63022294005c57ec",
        "name": "Validate status",
        "func": "const buf = Buffer.from(msg.payload.buffer);\nconst value = buf.readInt16BE();\nconst lineEnum = global.get(\"LineEnum\");\n\nlet statusCounter = global.get(\"STATUS_ADDRESS_SCAFFOLD_OUT\");\nnode.status({\n    fill: \"blue\", shape: \"ring\", text: \"value\" + \":\" + value\n});\nif (statusCounter === undefined || isNaN(statusCounter)) {\n    global.set(\"STATUS_ADDRESS_SCAFFOLD_OUT\", 0);\n}\nif (value === 2) {\n    statusCounter += 1;\n    global.set(\"STATUS_ADDRESS_SCAFFOLD_OUT\", statusCounter);\n}\n\nif (value === 1 && statusCounter > 2) {\n    global.set(\"STATUS_ADDRESS_SCAFFOLD_OUT\", 0);\n    node.log(\"STATUS_ADDRESS_SCAFFOLD_OUT is active....\");\n    return msg;\n}\n// node.warn(statusCounter);\n// node.warn(value);\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 900,
        "y": 1660,
        "wires": [
            [
                "8e89169eb4926ab4"
            ]
        ]
    },
    {
        "id": "4bd72f9988b35a1f",
        "type": "inject",
        "z": "63022294005c57ec",
        "name": "interval 1 sec",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 240,
        "y": 1840,
        "wires": [
            [
                "d164d29b54b783b1"
            ]
        ]
    },
    {
        "id": "d164d29b54b783b1",
        "type": "function",
        "z": "63022294005c57ec",
        "name": "Address 620",
        "func": "const fc = 3;\nconst sa = 620;          //start address base0\nconst addresses = 2;   //Number of word address\n\nmsg.payload = { value: msg.payload, 'fc': fc, 'unitid': 1, 'address': sa, 'quantity': addresses };\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 1840,
        "wires": [
            [
                "1732b4cdeae3b89f"
            ]
        ]
    },
    {
        "id": "1732b4cdeae3b89f",
        "type": "modbus-flex-getter",
        "z": "63022294005c57ec",
        "name": "",
        "showStatusActivities": false,
        "showErrors": false,
        "showWarnings": true,
        "logIOActivities": false,
        "server": "7ab982fca0f94f9e",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 680,
        "y": 1840,
        "wires": [
            [],
            [
                "96bf967d931ecdde"
            ]
        ]
    },
    {
        "id": "30da387e7083dca2",
        "type": "function",
        "z": "63022294005c57ec",
        "name": "Validate status",
        "func": "const logger = global.get('loggerInfo');\nconst value = msg.payload;\nconst lineEnum = global.get(\"LineEnum\");\nconst statusAddressEnum = global.get('StatusAddressEnum');\nlet statusCounter = global.get(\"STATUS_ADDRESS_WEIGHT\");\nlet weight = global.get(\"WEIGHT\");\nnode.status({\n    fill: \"blue\", shape: \"ring\", text: \"value\" + \":\" + value + \"weight :\" + weight + \"statusCounter :\" + statusCounter\n});\nif (weight === undefined || isNaN(weight)) {\n    global.set(\"WEIGHT\", 0);\n}\nif (statusCounter === undefined || isNaN(statusCounter)) {\n    global.set(\"STATUS_ADDRESS_WEIGHT\", 0);\n}\n\nif (value > 0) {\n    if (statusCounter < 10) {\n        global.set(\"WEIGHT\", value);\n    }\n    if (weight < (value + 2) && weight > (value - 2)) {\n        statusCounter += 1;\n        global.set(\"STATUS_ADDRESS_WEIGHT\", statusCounter);\n    } else if (weight !== value && statusCounter < 10) {\n        global.set(\"STATUS_ADDRESS_WEIGHT\", 0);\n    }\n}\n\nlogger('', `value : ${value} | statusCounter: ${statusCounter}`);\nlogger('', `weight: ${weight} | statusCounter: ${statusCounter}`);\nlogger('', `---------------------------------------------------`);\nif (value === 0 && statusCounter >= 10) {\n    global.set(\"STATUS_ADDRESS_WEIGHT\", 0);\n    node.log(`STATUS_ADDRESS_WEIGHT is active.... | weight : ${weight}`);\n    logger('', \"Sensor is active.... | weight : \" + weight);\n    msg.payload = weight;\n    return msg;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1120,
        "y": 1840,
        "wires": [
            [
                "19d32d02e29800d4"
            ]
        ]
    },
    {
        "id": "50e281b8e4cd07cb",
        "type": "subflow:4f93f103a4819898",
        "z": "63022294005c57ec",
        "name": "",
        "x": 470,
        "y": 320,
        "wires": [
            [
                "414fa778a274ea90"
            ]
        ]
    },
    {
        "id": "c88bcb47086393a5",
        "type": "subflow:4f93f103a4819898",
        "z": "63022294005c57ec",
        "name": "",
        "x": 470,
        "y": 460,
        "wires": [
            [
                "c43c7fe1bd1d25bd"
            ]
        ]
    },
    {
        "id": "aced2e7dac037852",
        "type": "subflow:4f93f103a4819898",
        "z": "63022294005c57ec",
        "name": "",
        "x": 470,
        "y": 640,
        "wires": [
            [
                "07e4fcd1cd7c494a"
            ]
        ]
    },
    {
        "id": "54787e778c1976d6",
        "type": "subflow:4f93f103a4819898",
        "z": "63022294005c57ec",
        "name": "",
        "x": 470,
        "y": 740,
        "wires": [
            [
                "c590a4b980ab4fce"
            ]
        ]
    },
    {
        "id": "f5b76ff5dffdd394",
        "type": "subflow:4f93f103a4819898",
        "z": "63022294005c57ec",
        "name": "",
        "x": 470,
        "y": 920,
        "wires": [
            [
                "cb5674ddc8e4ad23"
            ]
        ]
    },
    {
        "id": "5e44dd30b56c3035",
        "type": "subflow:4f93f103a4819898",
        "z": "63022294005c57ec",
        "name": "",
        "x": 470,
        "y": 1100,
        "wires": [
            [
                "d512e9d6f8164f7e"
            ]
        ]
    },
    {
        "id": "4d117c0bcb1766e1",
        "type": "subflow:4f93f103a4819898",
        "z": "63022294005c57ec",
        "name": "",
        "x": 470,
        "y": 1200,
        "wires": [
            [
                "5be30ee5be4c7835"
            ]
        ]
    },
    {
        "id": "1a9e1e3b6725553a",
        "type": "subflow:4f93f103a4819898",
        "z": "63022294005c57ec",
        "name": "",
        "x": 470,
        "y": 1380,
        "wires": [
            [
                "8a471e7e83665182"
            ]
        ]
    },
    {
        "id": "f2abfa57f98ef5fc",
        "type": "subflow:4f93f103a4819898",
        "z": "63022294005c57ec",
        "name": "",
        "x": 470,
        "y": 1560,
        "wires": [
            [
                "9b0621b35d5a115e"
            ]
        ]
    },
    {
        "id": "d5b8ddf022a93573",
        "type": "subflow:4f93f103a4819898",
        "z": "63022294005c57ec",
        "name": "",
        "x": 470,
        "y": 1740,
        "wires": [
            [
                "59704d89b2fd9c58"
            ]
        ]
    },
    {
        "id": "60de7b3437807624",
        "type": "comment",
        "z": "63022294005c57ec",
        "name": "Update summary",
        "info": "",
        "x": 220,
        "y": 2000,
        "wires": []
    },
    {
        "id": "31a422b22e3a323e",
        "type": "function",
        "z": "63022294005c57ec",
        "name": "Next item in block zone1 Floor",
        "func": "const db = global.get(\"connetion_mongo\");\nconst lineEnum = global.get(\"LineEnum\");\nconst sourceEnum = global.get(\"SourceEnum\");\nconst collectionEnum = global.get(\"CollectionEnum\");\nconst collection = db.collection(collectionEnum.ZONE1_PRODUCTION_DATA);\nconst zoneMoveTime = global.get(\"ZoneMoveTime\");\nconst preAddObjectCheckZone1 = global.get(\"preAddObjectCheckZone1\")\nconst maxBlockPerZone = global.get('maxBlockPerZone');\nconst moment = global.get('moment_timezone');\ntry {\n    const current_block = await compareDateTime(lineEnum.LINE_FLOOR.index);\n    if (current_block === 0) {\n        return msg;\n    }\n    preAddObjectCheckZone1(lineEnum.LINE_FLOOR.index, current_block);\n    return msg;\n} catch (error) {\n    node.warn(error);\n    \n};\n\nasync function compareDateTime(line_number) {\n    try {\n        let maxBlock;\n        if (line_number === lineEnum.LINE_CEILING.index){\n            maxBlock = maxBlockPerZone.ZONE_1_1;\n        } else {\n            maxBlock = maxBlockPerZone.ZONE_1_2;\n        }\n         \n        const pipeline = [\n            { $match: { is_active: true, 'lines.line_number': line_number } },\n            { $unwind: \"$blocks\" },\n            { $match: { \"blocks.exit_time\": null } },\n            { $sort: { \"blocks.entry_time\": 1 } },\n            {\n                $project: {\n                    _id: \"$_id\",\n                    entry_time: \"$blocks.entry_time\",\n                    current_block: \"$current_block\"\n                }\n            }\n        ];\n        const results = await collection.aggregate(pipeline).toArray();\n        if (results.length === 0) {\n            return 0;\n        }\n        const block_all = results.map(item => item.current_block);\n        maxBlock = await findPossibleMax(block_all, maxBlock);\n        for (const result of results) {\n            if (result.current_block > maxBlock) {\n                continue;\n            } else if (result.current_block === maxBlock) {\n                maxBlock -= 1;\n                continue;\n            }\n            const blockDuration = zoneMoveTime.zone1MoveTime * 60 * 1000;\n            const elapsedTime = moment().diff(moment(result.entry_time, \"HH:mm\"), \"milliseconds\");\n            // node.warn(elapsedTime);\n            if (elapsedTime > blockDuration) {\n                node.warn(`Zone: ${1} ,Time difference is greater than ${zoneMoveTime.zone1MoveTime} minutes`);\n                return result.current_block;\n            } else {\n                return 0;\n            }\n        }\n\n    } catch (error) {\n        node.warn(error);\n    }\n}\n\nasync function findPossibleMax(data, max) {\n    let possibleMax = max;\n    while (data.includes(possibleMax)) {\n        possibleMax--;\n    }\n    return possibleMax;\n};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 910,
        "y": 360,
        "wires": [
            [
                "e3b2a4b1358cfb20"
            ]
        ]
    },
    {
        "id": "dfe75e7fba73e306",
        "type": "function",
        "z": "63022294005c57ec",
        "name": "Next item in block zone1",
        "func": "const db = global.get(\"connetion_mongo\");\nconst lineEnum = global.get(\"LineEnum\");\nconst sourceEnum = global.get(\"SourceEnum\");\nconst collectionEnum = global.get(\"CollectionEnum\");\nconst collection = db.collection(collectionEnum.ZONE1_PRODUCTION_DATA);\nconst zoneMoveTime = global.get(\"ZoneMoveTime\");\nconst preAddObjectCheckZone1 = global.get(\"preAddObjectCheckZone1\")\nconst maxBlockPerZone = global.get('maxBlockPerZone');\nconst moment = global.get('moment_timezone');\nnode.warn(msg.payload.event);\ntry {\n    if (msg.payload.event === lineEnum.LINE_CEILING.value) {\n        const current_block = await compareDateTime(lineEnum.LINE_CEILING.index);\n        if (current_block === 0) {\n            return msg;\n        }\n        preAddObjectCheckZone1(lineEnum.LINE_CEILING.index, current_block);\n        // node.warn(current_block);\n        return msg;\n    } else {\n        const current_block = await compareDateTime(lineEnum.LINE_FLOOR.index);\n        if (current_block === 0) {\n            return msg;\n        }\n        preAddObjectCheckZone1(lineEnum.LINE_FLOOR.index, current_block);\n        // node.warn(current_block);\n        return msg;\n    }\n\n\n} catch (error) {\n    node.warn(error);\n};\n\nasync function compareDateTime(line_number) {\n    try {\n        let maxBlock;\n        if (line_number === lineEnum.LINE_CEILING.index){\n            maxBlock = maxBlockPerZone.ZONE_1_1;\n        } else {\n            maxBlock = maxBlockPerZone.ZONE_1_2;\n        }\n         \n        const pipeline = [\n            { $match: { is_active: true, 'lines.line_number': line_number } },\n            { $unwind: \"$blocks\" },\n            { $match: { \"blocks.exit_time\": null } },\n            { $sort: { \"blocks.entry_time\": 1 } },\n            {\n                $project: {\n                    _id: \"$_id\",\n                    entry_time: \"$blocks.entry_time\",\n                    current_block: \"$current_block\"\n                }\n            }\n        ];\n        const results = await collection.aggregate(pipeline).toArray();\n        if (results.length === 0) {\n            return 0;\n        }\n        const block_all = results.map(item => item.current_block);\n        maxBlock = await findPossibleMax(block_all, maxBlock);\n        for (const result of results) {\n            if (result.current_block > maxBlock) {\n                continue;\n            } else if (result.current_block === maxBlock) {\n                maxBlock -= 1;\n                continue;\n            }\n            const blockDuration = zoneMoveTime.zone1MoveTime * 60 * 1000;\n            const elapsedTime = moment().diff(moment(result.entry_time, \"HH:mm\"), \"milliseconds\");\n            // node.warn(elapsedTime);\n            if (elapsedTime > blockDuration) {\n                node.warn(`Zone: ${1} ,Time difference is greater than ${zoneMoveTime.zone1MoveTime} minutes`);\n                return result.current_block;\n            } else {\n                return 0;\n            }\n        }\n\n    } catch (error) {\n        node.warn(error);\n    }\n}\n\nasync function findPossibleMax(data, max) {\n    let possibleMax = max;\n    while (data.includes(possibleMax)) {\n        possibleMax--;\n    }\n    return possibleMax;\n};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 400,
        "wires": [
            []
        ]
    },
    {
        "id": "3ddcf89b4e6a662e",
        "type": "subflow:4f93f103a4819898",
        "z": "63022294005c57ec",
        "name": "",
        "x": 470,
        "y": 360,
        "wires": [
            [
                "ad861b382d0cd041"
            ]
        ]
    },
    {
        "id": "ad861b382d0cd041",
        "type": "semaphore-take",
        "z": "63022294005c57ec",
        "config": "30c70907500bd983",
        "name": "",
        "x": 660,
        "y": 360,
        "wires": [
            [
                "31a422b22e3a323e"
            ]
        ]
    },
    {
        "id": "e3b2a4b1358cfb20",
        "type": "semaphore-leave",
        "z": "63022294005c57ec",
        "config": "30c70907500bd983",
        "name": "",
        "x": 1190,
        "y": 360,
        "wires": [
            [
                "71c37ad6ad8c18a3"
            ]
        ]
    },
    {
        "id": "5141f3f6fc1200cb",
        "type": "inject",
        "z": "63022294005c57ec",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"event\":\"LineCeling\",\"source\":\"schedule\"}",
        "payloadType": "json",
        "x": 450,
        "y": 1780,
        "wires": [
            [
                "59704d89b2fd9c58"
            ]
        ]
    },
    {
        "id": "96bf967d931ecdde",
        "type": "function",
        "z": "63022294005c57ec",
        "name": "Read mudbus float",
        "func": "const buf = Buffer.from(msg.payload.buffer);\n\nvar length = buf.length;\nvar swappedBuffer = Buffer.alloc(length);\nswappedBuffer[0] = buf[1];\nswappedBuffer[1] = buf[0];\nswappedBuffer[2] = buf[3];\nswappedBuffer[3] = buf[2];\n\n\n\nconst value = swappedBuffer.readFloatLE();\nmsg.payload = parseFloat(value.toFixed(1));\nnode.status({ fill: \"blue\", shape: \"ring\", text: \"D1\" + \":\" + msg.payload });  \nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 910,
        "y": 1840,
        "wires": [
            [
                "30da387e7083dca2"
            ]
        ]
    },
    {
        "id": "75171734086e9605",
        "type": "comment",
        "z": "d21f09457f348b43",
        "name": "Zone1",
        "info": "",
        "x": 250,
        "y": 100,
        "wires": []
    },
    {
        "id": "38df6c67196882d1",
        "type": "function",
        "z": "d21f09457f348b43",
        "name": "Zone 1 color ceiling",
        "func": "const fc = 6;\nconst addresses = 1;     //Number of ADRRESS do want to write\nlet buf = Buffer.alloc(4);\nconst data = msg.payload;\n\nconst createIndexArray = global.get('createIndexArray');\nconst initIndex = await createIndexArray(101, 107, 98);\n// node.warn(data);\nfor (const item of data) {\n    const currentBlock = item.current_block;\n    for (const indexItem of initIndex) {\n        if (currentBlock === indexItem.index) {\n            indexItem.value = 99;\n            break; // No need to continue the loop once a match is found\n        }\n    }\n}\n\n// node.warn(initIndex);\n\nfor (const index of initIndex) {\n    buf.writeInt16BE(index.value);\n    const values = [(buf[0] * 256 + buf[1]), (buf[2] * 256) + buf[3]];\n    msg.payload = { \"value\": values, 'fc': fc, 'unitid': 1, 'address': index.address, 'quantity': addresses };\n    node.send(msg);\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 140,
        "wires": [
            [
                "c525c5f94fe5eccd"
            ]
        ]
    },
    {
        "id": "1f76862f9352a58f",
        "type": "function",
        "z": "d21f09457f348b43",
        "name": "Zone 1 color floor",
        "func": "const fc = 6;\nconst addresses = 1;     //Number of ADRRESS do want to write\nlet buf = Buffer.alloc(4);\nconst data = msg.payload;\nconst createIndexArray = global.get('createIndexArray');\nconst initIndex = await createIndexArray(108, 114, 98);\nfor (const item of data) {\n    const currentBlock = item.current_block;\n    for (const indexItem of initIndex) {\n        if (currentBlock === indexItem.index) {\n            indexItem.value = 99;\n            break; // No need to continue the loop once a match is found\n        }\n    }\n}\n\n// node.warn(initIndex);\n\nfor (const index of initIndex) {\n    buf.writeInt16BE(index.value);\n    const values = [(buf[0] * 256 + buf[1]), (buf[2] * 256) + buf[3]];\n    msg.payload = { \"value\": values, 'fc': fc, 'unitid': 1, 'address': index.address, 'quantity': addresses };\n    node.send(msg);\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 180,
        "wires": [
            [
                "c525c5f94fe5eccd"
            ]
        ]
    },
    {
        "id": "0d600a4628a0d0ad",
        "type": "function",
        "z": "d21f09457f348b43",
        "name": "Query zone 1",
        "func": "const db = global.get(\"connetion_mongo\");\nconst lineEnum = global.get(\"LineEnum\");\nconst sourceEnum = global.get(\"SourceEnum\");\nconst collectionEnum = global.get(\"CollectionEnum\");\n// const collection = db.collection(collectionEnum.ZONE1_PRODUCTION_DATA);\nconst zoneEnum = global.get('ZoneEnum');\ntry {\n    let ceilingList = [];\n    let floorList = [];\n    const query = {\n        \"is_active\": true,\n        \"zone_number\": zoneEnum.ZONE_1.index\n    }\n\n    const results = await db.collection(collectionEnum.ZONE1_PRODUCTION_DATA).find(query).toArray();\n    // node.warn(results);\n    for (const result of results){\n        if (result.lines.line_number === lineEnum.LINE_CEILING.index){\n            ceilingList.push(result);\n        }\n        else if (result.lines.line_number === lineEnum.LINE_FLOOR.index){\n            floorList.push(result);\n        }\n    }\n    // node.warn(ceilingList);\n    // node.warn(floorList);\n    // msg.ceilingList\n    // node.send(ceilingList, floorList);\n    const msg1 = { payload: ceilingList};\n    const msg2 = { payload: floorList};\n    node.send([msg1, msg2]);\n} catch (error) {\n    node.warn(error);\n};",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 160,
        "wires": [
            [
                "38df6c67196882d1"
            ],
            [
                "1f76862f9352a58f"
            ]
        ]
    },
    {
        "id": "fb359bf439edd409",
        "type": "function",
        "z": "d21f09457f348b43",
        "name": "To_INT16",
        "func": "const count =7;   //Num of Read\nconst buf = Buffer.from(msg.payload.buffer);\n\nif(count >=1){\nconst value = buf.readInt16BE();\nmsg.value = value;\n//msg.value = value;\n}\nelse{\n    msg.value =0;\n}\n\nif(count >=2){\nconst value2 = buf.readInt16BE(2);\nmsg.value2 = value2;\n//msg.value2 = value2;\n}\nelse{\n    msg.value2 =0;\n}\n\nif(count >=3){\nconst value3 = buf.readInt16BE(4);\nmsg.value3 = value3;\n//msg.value3 = value3;\n}\nelse{\n    msg.value3 =0;\n}\n\n\nif(count >=4){\nconst value4 = buf.readInt16BE(6);\nmsg.value4 = value4;\n//msg.value4 = value4;\n}\nelse{\n    msg.value4 =0;\n}\n\nif(count >=5){\nconst value5 = buf.readInt16BE(8);\nmsg.value5 = value5;\n//msg.value5 = value5;\n}\nelse{\n    msg.value5 =0;\n}\n\n\nif(count >=6){\nconst value6 = buf.readInt16BE(10);\nmsg.value6 = value6;\n//msg.value6 = value6;\n}\nelse{\n    msg.value6 =0;\n}\n\nif (count >= 7) {\n    const value7 = buf.readInt16BE(10);\n    msg.value7 = value7;\n    //msg.value6 = value6;\n}\nelse {\n    msg.value7 = 0;\n}\n\nif (count >= 8) {\n    const value8 = buf.readInt16BE(10);\n    msg.value8 = value8;\n    //msg.value6 = value6;\n}\nelse {\n    msg.value8 = 0;\n}\n\n\n\nif (count >= 9) {\n    const value9 = buf.readInt16BE(10);\n    msg.value9 = value9;\n    //msg.value6 = value6;\n}\nelse {\n    msg.value9 = 0;\n}\n\n\n\nif (count >= 10) {\n    const value10 = buf.readInt16BE(10);\n    msg.value10 = value10;\n    //msg.value6 = value6;\n}\nelse {\n    msg.value10 = 0;\n}\n\n\n\nif (count >= 11) {\n    const value11 = buf.readInt16BE(10);\n    msg.value11 = value11;\n    //msg.value6 = value6;\n}\nelse {\n    msg.value11 = 0;\n}\n\n\nif (count >= 12) {\n    const value12 = buf.readInt16BE(10);\n    msg.value12 = value12;\n    //msg.value6 = value6;\n}\nelse {\n    msg.value12 = 0;\n}\n\n\nif (count >= 13) {\n    const value13 = buf.readInt16BE(10);\n    msg.value13 = value13;\n    //msg.value6 = value6;\n}\nelse {\n    msg.value13 = 0;\n}\n\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1780,
        "y": 1000,
        "wires": [
            [
                "6aa28e35a81ab818"
            ]
        ]
    },
    {
        "id": "cfafcec417467d68",
        "type": "inject",
        "z": "d21f09457f348b43",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "3",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1550,
        "y": 920,
        "wires": [
            [
                "303cf4e9fe6e12e1"
            ]
        ]
    },
    {
        "id": "303cf4e9fe6e12e1",
        "type": "function",
        "z": "d21f09457f348b43",
        "name": "",
        "func": "var fc=3;\nvar sa=101;          //start address base0\nvar addresses=7;   //Number of word address\n\nmsg.payload={value: msg.payload, 'fc': fc, 'unitid': 1, 'address': sa , 'quantity': addresses };\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1560,
        "y": 960,
        "wires": [
            [
                "11f925f5c9822a83"
            ]
        ]
    },
    {
        "id": "11f925f5c9822a83",
        "type": "modbus-flex-getter",
        "z": "d21f09457f348b43",
        "name": "",
        "showStatusActivities": false,
        "showErrors": false,
        "logIOActivities": false,
        "server": "51a1a8e59174b5dc",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "x": 1580,
        "y": 1000,
        "wires": [
            [],
            [
                "fb359bf439edd409"
            ]
        ]
    },
    {
        "id": "6aa28e35a81ab818",
        "type": "function",
        "z": "d21f09457f348b43",
        "name": "",
        "func": "node.status({ fill: \"blue\", shape: \"ring\", text: \"D1\" + \":\" + msg.value + \"  D2\" + \":\" + msg.value2 + \"  D3\" + \":\" + msg.value3 + \"  D4\" + \":\" + msg.value4 + \"  D5\" + \":\" + msg.value5 + \"  D6\" + \":\" + msg.value6 + \"  D7\" + \":\" + msg.value7 });  \nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1760,
        "y": 920,
        "wires": [
            []
        ]
    },
    {
        "id": "c525c5f94fe5eccd",
        "type": "modbus-flex-write",
        "z": "d21f09457f348b43",
        "name": "",
        "showStatusActivities": false,
        "showErrors": false,
        "showWarnings": true,
        "server": "51a1a8e59174b5dc",
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 910,
        "y": 160,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "f5e0bafc6e56b3e9",
        "type": "function",
        "z": "d21f09457f348b43",
        "name": "To_INT16",
        "func": "const count =7;   //Num of Read\nconst buf = Buffer.from(msg.payload.buffer);\n\nif(count >=1){\nconst value = buf.readInt16BE();\nmsg.value = value;\n//msg.value = value;\n}\nelse{\n    msg.value =0;\n}\n\nif(count >=2){\nconst value2 = buf.readInt16BE(2);\nmsg.value2 = value2;\n//msg.value2 = value2;\n}\nelse{\n    msg.value2 =0;\n}\n\nif(count >=3){\nconst value3 = buf.readInt16BE(4);\nmsg.value3 = value3;\n//msg.value3 = value3;\n}\nelse{\n    msg.value3 =0;\n}\n\n\nif(count >=4){\nconst value4 = buf.readInt16BE(6);\nmsg.value4 = value4;\n//msg.value4 = value4;\n}\nelse{\n    msg.value4 =0;\n}\n\nif(count >=5){\nconst value5 = buf.readInt16BE(8);\nmsg.value5 = value5;\n//msg.value5 = value5;\n}\nelse{\n    msg.value5 =0;\n}\n\n\nif(count >=6){\nconst value6 = buf.readInt16BE(10);\nmsg.value6 = value6;\n//msg.value6 = value6;\n}\nelse{\n    msg.value6 =0;\n}\n\nif (count >= 7) {\n    const value7 = buf.readInt16BE(10);\n    msg.value7 = value7;\n    //msg.value6 = value6;\n}\nelse {\n    msg.value7 = 0;\n}\n\nif (count >= 8) {\n    const value8 = buf.readInt16BE(10);\n    msg.value8 = value8;\n    //msg.value6 = value6;\n}\nelse {\n    msg.value8 = 0;\n}\n\n\n\nif (count >= 9) {\n    const value9 = buf.readInt16BE(10);\n    msg.value9 = value9;\n    //msg.value6 = value6;\n}\nelse {\n    msg.value9 = 0;\n}\n\n\n\nif (count >= 10) {\n    const value10 = buf.readInt16BE(10);\n    msg.value10 = value10;\n    //msg.value6 = value6;\n}\nelse {\n    msg.value10 = 0;\n}\n\n\n\nif (count >= 11) {\n    const value11 = buf.readInt16BE(10);\n    msg.value11 = value11;\n    //msg.value6 = value6;\n}\nelse {\n    msg.value11 = 0;\n}\n\n\nif (count >= 12) {\n    const value12 = buf.readInt16BE(10);\n    msg.value12 = value12;\n    //msg.value6 = value6;\n}\nelse {\n    msg.value12 = 0;\n}\n\n\nif (count >= 13) {\n    const value13 = buf.readInt16BE(10);\n    msg.value13 = value13;\n    //msg.value6 = value6;\n}\nelse {\n    msg.value13 = 0;\n}\n\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2240,
        "y": 1000,
        "wires": [
            [
                "76a5ba963414c5d6"
            ]
        ]
    },
    {
        "id": "1b0e7785fa58a36c",
        "type": "inject",
        "z": "d21f09457f348b43",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "3",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 2030,
        "y": 920,
        "wires": [
            [
                "4212dec52bca1dbd"
            ]
        ]
    },
    {
        "id": "4212dec52bca1dbd",
        "type": "function",
        "z": "d21f09457f348b43",
        "name": "",
        "func": "var fc=3;\nvar sa=108;          //start address base0\nvar addresses=7;   //Number of word address\n\nmsg.payload={value: msg.payload, 'fc': fc, 'unitid': 1, 'address': sa , 'quantity': addresses };\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2040,
        "y": 960,
        "wires": [
            [
                "fbd831dd33fde2ea"
            ]
        ]
    },
    {
        "id": "fbd831dd33fde2ea",
        "type": "modbus-flex-getter",
        "z": "d21f09457f348b43",
        "name": "",
        "showStatusActivities": false,
        "showErrors": false,
        "logIOActivities": false,
        "server": "51a1a8e59174b5dc",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "x": 2040,
        "y": 1000,
        "wires": [
            [],
            [
                "f5e0bafc6e56b3e9"
            ]
        ]
    },
    {
        "id": "76a5ba963414c5d6",
        "type": "function",
        "z": "d21f09457f348b43",
        "name": "",
        "func": "node.status({ fill: \"blue\", shape: \"ring\", text: \"D1\" + \":\" + msg.value + \"  D2\" + \":\" + msg.value2 + \"  D3\" + \":\" + msg.value3 + \"  D4\" + \":\" + msg.value4 + \"  D5\" + \":\" + msg.value5 + \"  D6\" + \":\" + msg.value6 + \"  D7\" + \":\" + msg.value7 });  \nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2240,
        "y": 920,
        "wires": [
            []
        ]
    },
    {
        "id": "f5990e70df671bda",
        "type": "comment",
        "z": "d21f09457f348b43",
        "name": "Zone2",
        "info": "",
        "x": 250,
        "y": 260,
        "wires": []
    },
    {
        "id": "77e6ef0c7186d296",
        "type": "function",
        "z": "d21f09457f348b43",
        "name": "Query zone 2",
        "func": "const db = global.get(\"connetion_mongo\");\nconst collectionEnum = global.get(\"CollectionEnum\");\nconst zoneEnum = global.get('ZoneEnum');\ntry {\n    const query = {\n        \"is_active\": true,\n        \"current_zone\": zoneEnum.ZONE_2.index\n    }\n    msg.payload = await db.collection(collectionEnum.PRODUCTION_DATA).find(query).toArray();\n    return msg\n} catch (error) {\n    node.warn(error);\n};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 300,
        "wires": [
            [
                "e41884dc94d2bd82"
            ]
        ]
    },
    {
        "id": "ccf0746a4fcf3c28",
        "type": "function",
        "z": "d21f09457f348b43",
        "name": "Zone 2 Part No.",
        "func": "const fc = 6;\nconst addresses = 1;     //Number of ADRRESS do want to write\nlet buf = Buffer.alloc(4);\nconst data = msg.payload;\nconst createIndexArray = global.get('createIndexArray');\nconst initIndex = await createIndexArray(115, 128, 99);\nfor (const item of data) {\n    const currentBlock = item.current_block;\n    for (const indexItem of initIndex) {\n        if (currentBlock === indexItem.index) {\n            indexItem.value = item.qr_data_detail.data.units_number;\n            break; // No need to continue the loop once a match is found\n        }\n    }\n}\n\n// node.warn(initIndex);\n\nfor (const index of initIndex) {\n    buf.writeInt16BE(index.value);\n    const values = [(buf[0] * 256 + buf[1]), (buf[2] * 256) + buf[3]];\n    msg.payload = { \"value\": values, 'fc': fc, 'unitid': 1, 'address': index.address, 'quantity': addresses };\n    node.send(msg);\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 380,
        "wires": [
            [
                "1e7806915384345c"
            ]
        ]
    },
    {
        "id": "1e7806915384345c",
        "type": "modbus-flex-write",
        "z": "d21f09457f348b43",
        "name": "",
        "showStatusActivities": false,
        "showErrors": false,
        "showWarnings": true,
        "server": "51a1a8e59174b5dc",
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 870,
        "y": 300,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "eda582d1183e10bc",
        "type": "function",
        "z": "d21f09457f348b43",
        "name": "To_INT16",
        "func": "const count =7;   //Num of Read\nconst buf = Buffer.from(msg.payload.buffer);\n\nif(count >=1){\nconst value = buf.readInt16BE();\nmsg.value = value;\n//msg.value = value;\n}\nelse{\n    msg.value =0;\n}\n\nif(count >=2){\nconst value2 = buf.readInt16BE(2);\nmsg.value2 = value2;\n//msg.value2 = value2;\n}\nelse{\n    msg.value2 =0;\n}\n\nif(count >=3){\nconst value3 = buf.readInt16BE(4);\nmsg.value3 = value3;\n//msg.value3 = value3;\n}\nelse{\n    msg.value3 =0;\n}\n\n\nif(count >=4){\nconst value4 = buf.readInt16BE(6);\nmsg.value4 = value4;\n//msg.value4 = value4;\n}\nelse{\n    msg.value4 =0;\n}\n\nif(count >=5){\nconst value5 = buf.readInt16BE(8);\nmsg.value5 = value5;\n//msg.value5 = value5;\n}\nelse{\n    msg.value5 =0;\n}\n\n\nif(count >=6){\nconst value6 = buf.readInt16BE(10);\nmsg.value6 = value6;\n//msg.value6 = value6;\n}\nelse{\n    msg.value6 =0;\n}\n\nif (count >= 7) {\n    const value7 = buf.readInt16BE(10);\n    msg.value7 = value7;\n    //msg.value6 = value6;\n}\nelse {\n    msg.value7 = 0;\n}\n\nif (count >= 8) {\n    const value8 = buf.readInt16BE(10);\n    msg.value8 = value8;\n    //msg.value6 = value6;\n}\nelse {\n    msg.value8 = 0;\n}\n\n\n\nif (count >= 9) {\n    const value9 = buf.readInt16BE(10);\n    msg.value9 = value9;\n    //msg.value6 = value6;\n}\nelse {\n    msg.value9 = 0;\n}\n\n\n\nif (count >= 10) {\n    const value10 = buf.readInt16BE(10);\n    msg.value10 = value10;\n    //msg.value6 = value6;\n}\nelse {\n    msg.value10 = 0;\n}\n\n\n\nif (count >= 11) {\n    const value11 = buf.readInt16BE(10);\n    msg.value11 = value11;\n    //msg.value6 = value6;\n}\nelse {\n    msg.value11 = 0;\n}\n\n\nif (count >= 12) {\n    const value12 = buf.readInt16BE(10);\n    msg.value12 = value12;\n    //msg.value6 = value6;\n}\nelse {\n    msg.value12 = 0;\n}\n\n\nif (count >= 13) {\n    const value13 = buf.readInt16BE(10);\n    msg.value13 = value13;\n    //msg.value6 = value6;\n}\nelse {\n    msg.value13 = 0;\n}\n\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1400,
        "y": 200,
        "wires": [
            [
                "c35cdcf9b1fcd6d1"
            ]
        ]
    },
    {
        "id": "5e3372858844643b",
        "type": "inject",
        "z": "d21f09457f348b43",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "3",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1170,
        "y": 120,
        "wires": [
            [
                "abba661de5e7d614"
            ]
        ]
    },
    {
        "id": "abba661de5e7d614",
        "type": "function",
        "z": "d21f09457f348b43",
        "name": "",
        "func": "var fc=3;\nvar sa=115;          //start address base0\nvar addresses=7;   //Number of word address\n\nmsg.payload={value: msg.payload, 'fc': fc, 'unitid': 1, 'address': sa , 'quantity': addresses };\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1180,
        "y": 160,
        "wires": [
            [
                "fa51ceeb530fe317"
            ]
        ]
    },
    {
        "id": "fa51ceeb530fe317",
        "type": "modbus-flex-getter",
        "z": "d21f09457f348b43",
        "name": "",
        "showStatusActivities": false,
        "showErrors": false,
        "showWarnings": true,
        "logIOActivities": false,
        "server": "51a1a8e59174b5dc",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 1200,
        "y": 200,
        "wires": [
            [],
            [
                "eda582d1183e10bc"
            ]
        ]
    },
    {
        "id": "c35cdcf9b1fcd6d1",
        "type": "function",
        "z": "d21f09457f348b43",
        "name": "",
        "func": "node.status({ fill: \"blue\", shape: \"ring\", text: \"D1\" + \":\" + msg.value + \"  D2\" + \":\" + msg.value2 + \"  D3\" + \":\" + msg.value3 + \"  D4\" + \":\" + msg.value4 + \"  D5\" + \":\" + msg.value5 + \"  D6\" + \":\" + msg.value6 + \"  D7\" + \":\" + msg.value7 });  \nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1380,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "e41884dc94d2bd82",
        "type": "function",
        "z": "d21f09457f348b43",
        "name": "Zone 2 Color",
        "func": "const fc = 6;\nconst addresses = 1;     //Number of ADRRESS do want to write\nlet buf = Buffer.alloc(4);\nconst data = msg.payload;\nconst createIndexArray = global.get('createIndexArray');\nconst initIndex = await createIndexArray(115, 130, 98);\n\nfor (const item of data) {\n    const currentBlock = item.current_block;\n    for (const indexItem of initIndex) {\n        if (currentBlock === indexItem.index) {\n            indexItem.value = item.color;\n            break; // No need to continue the loop once a match is found\n        }\n    }\n}\n\n// node.warn(initIndex);\n\nfor (const index of initIndex) {\n    buf.writeInt16BE(index.value);\n    const values = [(buf[0] * 256 + buf[1]), (buf[2] * 256) + buf[3]];\n    msg.payload = { \"value\": values, 'fc': fc, 'unitid': 1, 'address': index.address, 'quantity': addresses };\n    node.send(msg);\n    // node.warn(msg);\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 300,
        "wires": [
            [
                "1e7806915384345c"
            ]
        ]
    },
    {
        "id": "4ebd8fec79287fd0",
        "type": "function",
        "z": "d21f09457f348b43",
        "name": "Zone 2 Bath",
        "func": "const fc = 6;\nconst addresses = 1;     //Number of ADRRESS do want to write\nlet buf = Buffer.alloc(4);\nconst data = msg.payload;\nconst createIndexArray = global.get('createIndexArray');\nconst initIndex = await createIndexArray(143, 156, 99);\n\nfor (const item of data) {\n    const currentBlock = item.current_block;\n    for (const indexItem of initIndex) {\n        if (currentBlock === indexItem.index) {\n            indexItem.value = mapTypeToValue(item.qr_data_detail.data.type);\n            break; // No need to continue the loop once a match is found\n        }\n    }\n}\n\n// node.warn(initIndex);\n\nfor (const index of initIndex) {\n    buf.writeInt16BE(index.value);\n    const values = [(buf[0] * 256 + buf[1]), (buf[2] * 256) + buf[3]];\n    msg.payload = { \"value\": values, 'fc': fc, 'unitid': 1, 'address': index.address, 'quantity': addresses };\n    node.send(msg);\n}\n\nfunction mapTypeToValue(type) {\n    switch (type) {\n        case 'N':\n            return 1;\n        case 'B':\n            return 2;\n        case 'S':\n            return 3;\n        case 'A':\n            return 4;\n        default:\n            return null; // หรือค่าเริ่มต้นที่คุณต้องการ\n    }\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 420,
        "wires": [
            [
                "1e7806915384345c"
            ]
        ]
    },
    {
        "id": "b2aa7176e7a98d6f",
        "type": "function",
        "z": "d21f09457f348b43",
        "name": "To_INT16",
        "func": "const count =7;   //Num of Read\nconst buf = Buffer.from(msg.payload.buffer);\n\nif(count >=1){\nconst value = buf.readInt16BE();\nmsg.value = value;\n//msg.value = value;\n}\nelse{\n    msg.value =0;\n}\n\nif(count >=2){\nconst value2 = buf.readInt16BE(2);\nmsg.value2 = value2;\n//msg.value2 = value2;\n}\nelse{\n    msg.value2 =0;\n}\n\nif(count >=3){\nconst value3 = buf.readInt16BE(4);\nmsg.value3 = value3;\n//msg.value3 = value3;\n}\nelse{\n    msg.value3 =0;\n}\n\n\nif(count >=4){\nconst value4 = buf.readInt16BE(6);\nmsg.value4 = value4;\n//msg.value4 = value4;\n}\nelse{\n    msg.value4 =0;\n}\n\nif(count >=5){\nconst value5 = buf.readInt16BE(8);\nmsg.value5 = value5;\n//msg.value5 = value5;\n}\nelse{\n    msg.value5 =0;\n}\n\n\nif(count >=6){\nconst value6 = buf.readInt16BE(10);\nmsg.value6 = value6;\n//msg.value6 = value6;\n}\nelse{\n    msg.value6 =0;\n}\n\nif (count >= 7) {\n    const value7 = buf.readInt16BE(10);\n    msg.value7 = value7;\n    //msg.value6 = value6;\n}\nelse {\n    msg.value7 = 0;\n}\n\nif (count >= 8) {\n    const value8 = buf.readInt16BE(10);\n    msg.value8 = value8;\n    //msg.value6 = value6;\n}\nelse {\n    msg.value8 = 0;\n}\n\n\n\nif (count >= 9) {\n    const value9 = buf.readInt16BE(10);\n    msg.value9 = value9;\n    //msg.value6 = value6;\n}\nelse {\n    msg.value9 = 0;\n}\n\n\n\nif (count >= 10) {\n    const value10 = buf.readInt16BE(10);\n    msg.value10 = value10;\n    //msg.value6 = value6;\n}\nelse {\n    msg.value10 = 0;\n}\n\n\n\nif (count >= 11) {\n    const value11 = buf.readInt16BE(10);\n    msg.value11 = value11;\n    //msg.value6 = value6;\n}\nelse {\n    msg.value11 = 0;\n}\n\n\nif (count >= 12) {\n    const value12 = buf.readInt16BE(10);\n    msg.value12 = value12;\n    //msg.value6 = value6;\n}\nelse {\n    msg.value12 = 0;\n}\n\n\nif (count >= 13) {\n    const value13 = buf.readInt16BE(10);\n    msg.value13 = value13;\n    //msg.value6 = value6;\n}\nelse {\n    msg.value13 = 0;\n}\n\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1800,
        "y": 540,
        "wires": [
            [
                "a5aa5213de4989b1"
            ]
        ]
    },
    {
        "id": "8f7a517db7cf8ae4",
        "type": "inject",
        "z": "d21f09457f348b43",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "3",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1570,
        "y": 460,
        "wires": [
            [
                "f22efc75717ea46b"
            ]
        ]
    },
    {
        "id": "f22efc75717ea46b",
        "type": "function",
        "z": "d21f09457f348b43",
        "name": "",
        "func": "var fc=3;\nvar sa=129;          //start address base0\nvar addresses=14;   //Number of word address\n\nmsg.payload={value: msg.payload, 'fc': fc, 'unitid': 1, 'address': sa , 'quantity': addresses };\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1580,
        "y": 500,
        "wires": [
            [
                "21f427712f27be63"
            ]
        ]
    },
    {
        "id": "21f427712f27be63",
        "type": "modbus-flex-getter",
        "z": "d21f09457f348b43",
        "name": "",
        "showStatusActivities": false,
        "showErrors": false,
        "logIOActivities": false,
        "server": "51a1a8e59174b5dc",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "x": 1600,
        "y": 540,
        "wires": [
            [],
            [
                "b2aa7176e7a98d6f"
            ]
        ]
    },
    {
        "id": "a5aa5213de4989b1",
        "type": "function",
        "z": "d21f09457f348b43",
        "name": "",
        "func": "node.status({ fill: \"blue\", shape: \"ring\", text: \"D1\" + \":\" + msg.value + \"  D2\" + \":\" + msg.value2 + \"  D3\" + \":\" + msg.value3 + \"  D4\" + \":\" + msg.value4 + \"  D5\" + \":\" + msg.value5 + \"  D6\" + \":\" + msg.value6 + \"  D7\" + \":\" + msg.value7 });  \nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1780,
        "y": 460,
        "wires": [
            []
        ]
    },
    {
        "id": "b1e0fc98f8b63c21",
        "type": "function",
        "z": "d21f09457f348b43",
        "name": "To_INT16",
        "func": "const count =7;   //Num of Read\nconst buf = Buffer.from(msg.payload.buffer);\n\nif(count >=1){\nconst value = buf.readInt16BE();\nmsg.value = value;\n//msg.value = value;\n}\nelse{\n    msg.value =0;\n}\n\nif(count >=2){\nconst value2 = buf.readInt16BE(2);\nmsg.value2 = value2;\n//msg.value2 = value2;\n}\nelse{\n    msg.value2 =0;\n}\n\nif(count >=3){\nconst value3 = buf.readInt16BE(4);\nmsg.value3 = value3;\n//msg.value3 = value3;\n}\nelse{\n    msg.value3 =0;\n}\n\n\nif(count >=4){\nconst value4 = buf.readInt16BE(6);\nmsg.value4 = value4;\n//msg.value4 = value4;\n}\nelse{\n    msg.value4 =0;\n}\n\nif(count >=5){\nconst value5 = buf.readInt16BE(8);\nmsg.value5 = value5;\n//msg.value5 = value5;\n}\nelse{\n    msg.value5 =0;\n}\n\n\nif(count >=6){\nconst value6 = buf.readInt16BE(10);\nmsg.value6 = value6;\n//msg.value6 = value6;\n}\nelse{\n    msg.value6 =0;\n}\n\nif (count >= 7) {\n    const value7 = buf.readInt16BE(10);\n    msg.value7 = value7;\n    //msg.value6 = value6;\n}\nelse {\n    msg.value7 = 0;\n}\n\nif (count >= 8) {\n    const value8 = buf.readInt16BE(10);\n    msg.value8 = value8;\n    //msg.value6 = value6;\n}\nelse {\n    msg.value8 = 0;\n}\n\n\n\nif (count >= 9) {\n    const value9 = buf.readInt16BE(10);\n    msg.value9 = value9;\n    //msg.value6 = value6;\n}\nelse {\n    msg.value9 = 0;\n}\n\n\n\nif (count >= 10) {\n    const value10 = buf.readInt16BE(10);\n    msg.value10 = value10;\n    //msg.value6 = value6;\n}\nelse {\n    msg.value10 = 0;\n}\n\n\n\nif (count >= 11) {\n    const value11 = buf.readInt16BE(10);\n    msg.value11 = value11;\n    //msg.value6 = value6;\n}\nelse {\n    msg.value11 = 0;\n}\n\n\nif (count >= 12) {\n    const value12 = buf.readInt16BE(10);\n    msg.value12 = value12;\n    //msg.value6 = value6;\n}\nelse {\n    msg.value12 = 0;\n}\n\n\nif (count >= 13) {\n    const value13 = buf.readInt16BE(10);\n    msg.value13 = value13;\n    //msg.value6 = value6;\n}\nelse {\n    msg.value13 = 0;\n}\n\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1800,
        "y": 700,
        "wires": [
            [
                "f26d903099f08984"
            ]
        ]
    },
    {
        "id": "f7e4787c6e37d6ed",
        "type": "inject",
        "z": "d21f09457f348b43",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "3",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1570,
        "y": 620,
        "wires": [
            [
                "29d1eaf7d0cdc6bd"
            ]
        ]
    },
    {
        "id": "29d1eaf7d0cdc6bd",
        "type": "function",
        "z": "d21f09457f348b43",
        "name": "",
        "func": "var fc=3;\nvar sa=143;          //start address base0\nvar addresses=14;   //Number of word address\n\nmsg.payload={value: msg.payload, 'fc': fc, 'unitid': 1, 'address': sa , 'quantity': addresses };\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1580,
        "y": 660,
        "wires": [
            [
                "532010e92bacfd55"
            ]
        ]
    },
    {
        "id": "532010e92bacfd55",
        "type": "modbus-flex-getter",
        "z": "d21f09457f348b43",
        "name": "",
        "showStatusActivities": false,
        "showErrors": false,
        "logIOActivities": false,
        "server": "51a1a8e59174b5dc",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "x": 1600,
        "y": 700,
        "wires": [
            [],
            [
                "b1e0fc98f8b63c21"
            ]
        ]
    },
    {
        "id": "f26d903099f08984",
        "type": "function",
        "z": "d21f09457f348b43",
        "name": "",
        "func": "node.status({ fill: \"blue\", shape: \"ring\", text: \"D1\" + \":\" + msg.value + \"  D2\" + \":\" + msg.value2 + \"  D3\" + \":\" + msg.value3 + \"  D4\" + \":\" + msg.value4 + \"  D5\" + \":\" + msg.value5 + \"  D6\" + \":\" + msg.value6 + \"  D7\" + \":\" + msg.value7 });  \nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1780,
        "y": 620,
        "wires": [
            []
        ]
    },
    {
        "id": "fcb7384c9075991f",
        "type": "comment",
        "z": "d21f09457f348b43",
        "name": "Zone3",
        "info": "",
        "x": 250,
        "y": 460,
        "wires": []
    },
    {
        "id": "086d392a01b86c62",
        "type": "function",
        "z": "d21f09457f348b43",
        "name": "Query zone 3",
        "func": "const db = global.get(\"connetion_mongo\");\nconst collectionEnum = global.get(\"CollectionEnum\");\nconst zoneEnum = global.get('ZoneEnum');\ntry {\n    const query = {\n        \"is_active\": true,\n        \"current_zone\": zoneEnum.ZONE_3.index\n    }\n    msg.payload = await db.collection(collectionEnum.PRODUCTION_DATA).find(query).toArray();\n    return msg\n} catch (error) {\n    node.warn(error);\n};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 500,
        "wires": [
            [
                "1b1c8db0c8228b61"
            ]
        ]
    },
    {
        "id": "0c86e30ca34d255c",
        "type": "function",
        "z": "d21f09457f348b43",
        "name": "Zone 3 Part No.",
        "func": "const fc = 6;\nconst addresses = 1;     //Number of ADRRESS do want to write\nlet buf = Buffer.alloc(4);\nconst data = msg.payload;\nconst createIndexArray = global.get('createIndexArray');\nconst initIndex = await createIndexArray(157, 170, 99);\n\nfor (const item of data) {\n    const currentBlock = item.current_block;\n    for (const indexItem of initIndex) {\n        if (currentBlock === indexItem.index) {\n            indexItem.value = item.qr_data_detail.data.units_number;\n            break; // No need to continue the loop once a match is found\n        }\n    }\n}\n\n// node.warn(initIndex);\n\nfor (const index of initIndex) {\n    buf.writeInt16BE(index.value);\n    const values = [(buf[0] * 256 + buf[1]), (buf[2] * 256) + buf[3]];\n    msg.payload = { \"value\": values, 'fc': fc, 'unitid': 1, 'address': index.address, 'quantity': addresses };\n    node.send(msg);\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 580,
        "wires": [
            [
                "5f54138e2a3ef41d"
            ]
        ]
    },
    {
        "id": "5f54138e2a3ef41d",
        "type": "modbus-flex-write",
        "z": "d21f09457f348b43",
        "name": "",
        "showStatusActivities": false,
        "showErrors": false,
        "server": "51a1a8e59174b5dc",
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "x": 870,
        "y": 500,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "1b1c8db0c8228b61",
        "type": "function",
        "z": "d21f09457f348b43",
        "name": "Zone 3 Color",
        "func": "const fc = 6;\nconst addresses = 1;     //Number of ADRRESS do want to write\nlet buf = Buffer.alloc(4);\nconst data = msg.payload;\nconst createIndexArray = global.get('createIndexArray');\nconst initIndex = await createIndexArray(131, 143, 98);\n\nfor (const item of data) {\n    const currentBlock = item.current_block;\n    for (const indexItem of initIndex) {\n        if (currentBlock === indexItem.index) {\n            indexItem.value = item.color;\n            break; // No need to continue the loop once a match is found\n        }\n    }\n}\n\n// node.warn(initIndex);\n\nfor (const index of initIndex) {\n    buf.writeInt16BE(index.value);\n    const values = [(buf[0] * 256 + buf[1]), (buf[2] * 256) + buf[3]];\n    msg.payload = { \"value\": values, 'fc': fc, 'unitid': 1, 'address': index.address, 'quantity': addresses };\n    node.send(msg);\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 500,
        "wires": [
            [
                "5f54138e2a3ef41d"
            ]
        ]
    },
    {
        "id": "a288702c91e8ded8",
        "type": "function",
        "z": "d21f09457f348b43",
        "name": "Zone 3 Bath",
        "func": "const fc = 6;\nconst addresses = 1;     //Number of ADRRESS do want to write\nlet buf = Buffer.alloc(4);\nconst data = msg.payload;\nconst createIndexArray = global.get('createIndexArray');\nconst initIndex = await createIndexArray(185, 198, 99);\n\nfor (const item of data) {\n    const currentBlock = item.current_block;\n    for (const indexItem of initIndex) {\n        if (currentBlock === indexItem.index) {\n            indexItem.value = mapTypeToValue(item.qr_data_detail.data.type);\n            break; // No need to continue the loop once a match is found\n        }\n    }\n}\n\n// node.warn(initIndex);\n\nfor (const index of initIndex) {\n    buf.writeInt16BE(index.value);\n    const values = [(buf[0] * 256 + buf[1]), (buf[2] * 256) + buf[3]];\n    msg.payload = { \"value\": values, 'fc': fc, 'unitid': 1, 'address': index.address, 'quantity': addresses };\n    node.send(msg);\n}\n\nfunction mapTypeToValue(type) {\n    switch (type) {\n        case 'N':\n            return 1;\n        case 'B':\n            return 2;\n        case 'S':\n            return 3;\n        case 'A':\n            return 4;\n        default:\n            return null; // หรือค่าเริ่มต้นที่คุณต้องการ\n    }\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 620,
        "wires": [
            [
                "5f54138e2a3ef41d"
            ]
        ]
    },
    {
        "id": "c35108bc769f0ab9",
        "type": "comment",
        "z": "d21f09457f348b43",
        "name": "Zone4 (BY_PASS_1)",
        "info": "",
        "x": 290,
        "y": 720,
        "wires": []
    },
    {
        "id": "bbd5d2995654414d",
        "type": "inject",
        "z": "d21f09457f348b43",
        "name": "",
        "props": [
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "60",
        "crontab": "",
        "once": true,
        "onceDelay": "10",
        "topic": "",
        "x": 270,
        "y": 760,
        "wires": [
            []
        ]
    },
    {
        "id": "430cbd8084743758",
        "type": "function",
        "z": "d21f09457f348b43",
        "name": "Query zone 4",
        "func": "const db = global.get(\"connetion_mongo\");\nconst collectionEnum = global.get(\"CollectionEnum\");\nconst zoneEnum = global.get('ZoneEnum');\nconst byPassEnum = global.get(\"ByPassEnum\");\n\ntry {\n    const query = {\n        \"is_active\": true,\n        \"current_zone\": zoneEnum.ZONE_4.index\n    }\n    msg.payload = await db.collection(collectionEnum.PRODUCTION_DATA).find(query).toArray();\n    return msg\n} catch (error) {\n    node.warn(error);\n};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 760,
        "wires": [
            [
                "603ce2568586977b"
            ]
        ]
    },
    {
        "id": "76f64c428c7448d6",
        "type": "function",
        "z": "d21f09457f348b43",
        "name": "Zone 4 Part No.",
        "func": "const fc = 6;\nconst addresses = 1;     //Number of ADRRESS do want to write\nlet buf = Buffer.alloc(4);\nconst data = msg.payload;\nconst createIndexArray = global.get('createIndexArray');\nconst initIndex = await createIndexArray(199, 216, 99);\n\nfor (const item of data) {\n    const currentBlock = item.current_block;\n    for (const indexItem of initIndex) {\n        if (currentBlock === indexItem.index) {\n            indexItem.value = item.qr_data_detail.data.units_number;\n            break; // No need to continue the loop once a match is found\n        }\n    }\n}\n\n// node.warn(initIndex);\n\nfor (const index of initIndex) {\n    buf.writeInt16BE(index.value);\n    const values = [(buf[0] * 256 + buf[1]), (buf[2] * 256) + buf[3]];\n    msg.payload = { \"value\": values, 'fc': fc, 'unitid': 1, 'address': index.address, 'quantity': addresses };\n    node.send(msg);\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 840,
        "wires": [
            [
                "8593ca55d18c9b9e"
            ]
        ]
    },
    {
        "id": "8593ca55d18c9b9e",
        "type": "modbus-flex-write",
        "z": "d21f09457f348b43",
        "name": "",
        "showStatusActivities": false,
        "showErrors": false,
        "server": "51a1a8e59174b5dc",
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "x": 870,
        "y": 760,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "603ce2568586977b",
        "type": "function",
        "z": "d21f09457f348b43",
        "name": "Zone 4 Color",
        "func": "const fc = 6;\nconst addresses = 1;     //Number of ADRRESS do want to write\nlet buf = Buffer.alloc(4);\nconst data = msg.payload;\nconst createIndexArray = global.get('createIndexArray');\nconst initIndex = await createIndexArray(144, 163, 98);\n\nfor (const item of data) {\n    const currentBlock = item.current_block;\n    for (const indexItem of initIndex) {\n        if (currentBlock === indexItem.index) {\n            indexItem.value = item.color;\n            break; // No need to continue the loop once a match is found\n        }\n    }\n}\n\n// node.warn(initIndex);\n\nfor (const index of initIndex) {\n    buf.writeInt16BE(index.value);\n    const values = [(buf[0] * 256 + buf[1]), (buf[2] * 256) + buf[3]];\n    msg.payload = { \"value\": values, 'fc': fc, 'unitid': 1, 'address': index.address, 'quantity': addresses };\n    node.send(msg);\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 760,
        "wires": [
            [
                "8593ca55d18c9b9e"
            ]
        ]
    },
    {
        "id": "adbbc4698a40951a",
        "type": "function",
        "z": "d21f09457f348b43",
        "name": "Zone 4 Bath",
        "func": "const fc = 6;\nconst addresses = 1;     //Number of ADRRESS do want to write\nlet buf = Buffer.alloc(4);\nconst data = msg.payload;\nconst createIndexArray = global.get('createIndexArray');\nconst initIndex = await createIndexArray(235, 252, 99);\n\nfor (const item of data) {\n    const currentBlock = item.current_block;\n    for (const indexItem of initIndex) {\n        if (currentBlock === indexItem.index) {\n            indexItem.value = mapTypeToValue(item.qr_data_detail.data.type);\n            break; // No need to continue the loop once a match is found\n        }\n    }\n}\n\n// node.warn(initIndex);\n\nfor (const index of initIndex) {\n    buf.writeInt16BE(index.value);\n    const values = [(buf[0] * 256 + buf[1]), (buf[2] * 256) + buf[3]];\n    msg.payload = { \"value\": values, 'fc': fc, 'unitid': 1, 'address': index.address, 'quantity': addresses };\n    node.send(msg);\n}\n\nfunction mapTypeToValue(type) {\n    switch (type) {\n        case 'N':\n            return 1;\n        case 'B':\n            return 2;\n        case 'S':\n            return 3;\n        case 'A':\n            return 4;\n        default:\n            return null; // หรือค่าเริ่มต้นที่คุณต้องการ\n    }\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 880,
        "wires": [
            [
                "8593ca55d18c9b9e"
            ]
        ]
    },
    {
        "id": "83753adb7ca59818",
        "type": "comment",
        "z": "d21f09457f348b43",
        "name": "Zone5",
        "info": "",
        "x": 250,
        "y": 920,
        "wires": []
    },
    {
        "id": "64fc7f3737ddbd0f",
        "type": "function",
        "z": "d21f09457f348b43",
        "name": "Query zone 5",
        "func": "const db = global.get(\"connetion_mongo\");\nconst collectionEnum = global.get(\"CollectionEnum\");\nconst zoneEnum = global.get('ZoneEnum');\nconst byPassEnum = global.get(\"ByPassEnum\");\n\ntry {\n    const query = {\n        \"is_active\": true,\n        \"current_zone\": zoneEnum.ZONE_5.index\n    }\n    msg.payload = await db.collection(collectionEnum.PRODUCTION_DATA).find(query).toArray();\n    return msg\n} catch (error) {\n    node.warn(error);\n};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 960,
        "wires": [
            [
                "5427025cb81d4d59"
            ]
        ]
    },
    {
        "id": "1e33dffcafa435e0",
        "type": "function",
        "z": "d21f09457f348b43",
        "name": "Zone 5 Part No.",
        "func": "const fc = 6;\nconst addresses = 1;     //Number of ADRRESS do want to write\nlet buf = Buffer.alloc(4);\nconst data = msg.payload;\nconst createIndexArray = global.get('createIndexArray');\nconst initIndex = await createIndexArray(253, 259, 99);\n\nfor (const item of data) {\n    const currentBlock = item.current_block;\n    for (const indexItem of initIndex) {\n        if (currentBlock === indexItem.index) {\n            indexItem.value = item.qr_data_detail.data.units_number;\n            break; // No need to continue the loop once a match is found\n        }\n    }\n}\n\n// node.warn(initIndex);\n\nfor (const index of initIndex) {\n    buf.writeInt16BE(index.value);\n    const values = [(buf[0] * 256 + buf[1]), (buf[2] * 256) + buf[3]];\n    msg.payload = { \"value\": values, 'fc': fc, 'unitid': 1, 'address': index.address, 'quantity': addresses };\n    node.send(msg);\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 1040,
        "wires": [
            [
                "f75589a41a8e67ec"
            ]
        ]
    },
    {
        "id": "f75589a41a8e67ec",
        "type": "modbus-flex-write",
        "z": "d21f09457f348b43",
        "name": "",
        "showStatusActivities": false,
        "showErrors": false,
        "server": "51a1a8e59174b5dc",
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "x": 870,
        "y": 960,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "5427025cb81d4d59",
        "type": "function",
        "z": "d21f09457f348b43",
        "name": "Zone 5 Color",
        "func": "const fc = 6;\nconst addresses = 1;     //Number of ADRRESS do want to write\nlet buf = Buffer.alloc(4);\nconst data = msg.payload;\nconst createIndexArray = global.get('createIndexArray');\nconst initIndex = await createIndexArray(164, 168, 98);\n\nfor (const item of data) {\n    const currentBlock = item.current_block;\n    for (const indexItem of initIndex) {\n        if (currentBlock === indexItem.index) {\n            indexItem.value = item.color;\n            break; // No need to continue the loop once a match is found\n        }\n    }\n}\n\n// node.warn(initIndex);\n\nfor (const index of initIndex) {\n    buf.writeInt16BE(index.value);\n    const values = [(buf[0] * 256 + buf[1]), (buf[2] * 256) + buf[3]];\n    msg.payload = { \"value\": values, 'fc': fc, 'unitid': 1, 'address': index.address, 'quantity': addresses };\n    node.send(msg);\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 960,
        "wires": [
            [
                "f75589a41a8e67ec"
            ]
        ]
    },
    {
        "id": "eebe5db074c0f11e",
        "type": "function",
        "z": "d21f09457f348b43",
        "name": "Zone 5 Bath",
        "func": "const fc = 6;\nconst addresses = 1;     //Number of ADRRESS do want to write\nlet buf = Buffer.alloc(4);\nconst data = msg.payload;\nconst createIndexArray = global.get('createIndexArray');\nconst initIndex = await createIndexArray(267, 273, 99);\n\nfor (const item of data) {\n    const currentBlock = item.current_block;\n    for (const indexItem of initIndex) {\n        if (currentBlock === indexItem.index) {\n            indexItem.value = mapTypeToValue(item.qr_data_detail.data.type);\n            break; // No need to continue the loop once a match is found\n        }\n    }\n}\n\n// node.warn(initIndex);\n\nfor (const index of initIndex) {\n    buf.writeInt16BE(index.value);\n    const values = [(buf[0] * 256 + buf[1]), (buf[2] * 256) + buf[3]];\n    msg.payload = { \"value\": values, 'fc': fc, 'unitid': 1, 'address': index.address, 'quantity': addresses };\n    node.send(msg);\n}\n\nfunction mapTypeToValue(type) {\n    switch (type) {\n        case 'N':\n            return 1;\n        case 'B':\n            return 2;\n        case 'S':\n            return 3;\n        case 'A':\n            return 4;\n        default:\n            return null; // หรือค่าเริ่มต้นที่คุณต้องการ\n    }\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 1080,
        "wires": [
            [
                "f75589a41a8e67ec"
            ]
        ]
    },
    {
        "id": "a4483b3666a972c4",
        "type": "comment",
        "z": "d21f09457f348b43",
        "name": "Zone6",
        "info": "",
        "x": 250,
        "y": 1140,
        "wires": []
    },
    {
        "id": "6f986fb6cdc73120",
        "type": "function",
        "z": "d21f09457f348b43",
        "name": "Query zone 6",
        "func": "const db = global.get(\"connetion_mongo\");\nconst collectionEnum = global.get(\"CollectionEnum\");\nconst zoneEnum = global.get('ZoneEnum');\nconst byPassEnum = global.get(\"ByPassEnum\");\n\ntry {\n    const query = {\n        \"is_active\": true,\n        \"current_zone\": zoneEnum.ZONE_6.index\n    }\n    msg.payload = await db.collection(collectionEnum.PRODUCTION_DATA).find(query).toArray();\n    return msg\n} catch (error) {\n    node.warn(error);\n};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 1180,
        "wires": [
            [
                "92710ccc8f74bab8"
            ]
        ]
    },
    {
        "id": "d189df9357d8a4be",
        "type": "function",
        "z": "d21f09457f348b43",
        "name": "Zone 6 Part No.",
        "func": "const fc = 6;\nconst addresses = 1;     //Number of ADRRESS do want to write\nlet buf = Buffer.alloc(4);\nconst data = msg.payload;\nconst createIndexArray = global.get('createIndexArray');\nconst initIndex = await createIndexArray(274, 277, 99);\n\nfor (const item of data) {\n    const currentBlock = item.current_block;\n    for (const indexItem of initIndex) {\n        if (currentBlock === indexItem.index) {\n            indexItem.value = item.qr_data_detail.data.units_number;\n            break; // No need to continue the loop once a match is found\n        }\n    }\n}\n\n// node.warn(initIndex);\n\nfor (const index of initIndex) {\n    buf.writeInt16BE(index.value);\n    const values = [(buf[0] * 256 + buf[1]), (buf[2] * 256) + buf[3]];\n    msg.payload = { \"value\": values, 'fc': fc, 'unitid': 1, 'address': index.address, 'quantity': addresses };\n    node.send(msg);\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 1260,
        "wires": [
            [
                "855dcd532cf050bc"
            ]
        ]
    },
    {
        "id": "855dcd532cf050bc",
        "type": "modbus-flex-write",
        "z": "d21f09457f348b43",
        "name": "",
        "showStatusActivities": false,
        "showErrors": false,
        "server": "51a1a8e59174b5dc",
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "x": 870,
        "y": 1180,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "92710ccc8f74bab8",
        "type": "function",
        "z": "d21f09457f348b43",
        "name": "Zone 6 Color",
        "func": "const fc = 6;\nconst addresses = 1;     //Number of ADRRESS do want to write\nlet buf = Buffer.alloc(4);\nconst data = msg.payload;\nconst createIndexArray = global.get('createIndexArray');\nconst initIndex = await createIndexArray(169, 172, 98);\n\nfor (const item of data) {\n    const currentBlock = item.current_block;\n    for (const indexItem of initIndex) {\n        if (currentBlock === indexItem.index) {\n            indexItem.value = item.color;\n            break; // No need to continue the loop once a match is found\n        }\n    }\n}\n\n// node.warn(initIndex);\n\nfor (const index of initIndex) {\n    buf.writeInt16BE(index.value);\n    const values = [(buf[0] * 256 + buf[1]), (buf[2] * 256) + buf[3]];\n    msg.payload = { \"value\": values, 'fc': fc, 'unitid': 1, 'address': index.address, 'quantity': addresses };\n    node.send(msg);\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 1180,
        "wires": [
            [
                "855dcd532cf050bc"
            ]
        ]
    },
    {
        "id": "a59106158b0024d5",
        "type": "function",
        "z": "d21f09457f348b43",
        "name": "Zone 6 Bath",
        "func": "const fc = 6;\nconst addresses = 1;     //Number of ADRRESS do want to write\nlet buf = Buffer.alloc(4);\nconst data = msg.payload;\nconst createIndexArray = global.get('createIndexArray');\nconst initIndex = await createIndexArray(282, 285, 99);\n\nfor (const item of data) {\n    const currentBlock = item.current_block;\n    for (const indexItem of initIndex) {\n        if (currentBlock === indexItem.index) {\n            indexItem.value = mapTypeToValue(item.qr_data_detail.data.type);\n            break; // No need to continue the loop once a match is found\n        }\n    }\n}\n\n// node.warn(initIndex);\n\nfor (const index of initIndex) {\n    buf.writeInt16BE(index.value);\n    const values = [(buf[0] * 256 + buf[1]), (buf[2] * 256) + buf[3]];\n    msg.payload = { \"value\": values, 'fc': fc, 'unitid': 1, 'address': index.address, 'quantity': addresses };\n    node.send(msg);\n}\n\nfunction mapTypeToValue(type) {\n    switch (type) {\n        case 'N':\n            return 1;\n        case 'B':\n            return 2;\n        case 'S':\n            return 3;\n        case 'A':\n            return 4;\n        default:\n            return null; // หรือค่าเริ่มต้นที่คุณต้องการ\n    }\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 1300,
        "wires": [
            [
                "855dcd532cf050bc"
            ]
        ]
    },
    {
        "id": "71d262c846980c7e",
        "type": "comment",
        "z": "d21f09457f348b43",
        "name": "Zone7",
        "info": "",
        "x": 250,
        "y": 1380,
        "wires": []
    },
    {
        "id": "f00d44d1bac39a37",
        "type": "function",
        "z": "d21f09457f348b43",
        "name": "Query zone 7",
        "func": "const db = global.get(\"connetion_mongo\");\nconst collectionEnum = global.get(\"CollectionEnum\");\nconst zoneEnum = global.get('ZoneEnum');\nconst byPassEnum = global.get(\"ByPassEnum\");\n\ntry {\n    const query = {\n        \"is_active\": true,\n        \"current_zone\": zoneEnum.ZONE_7.index\n    }\n    msg.payload = await db.collection(collectionEnum.PRODUCTION_DATA).find(query).toArray();\n    return msg\n} catch (error) {\n    node.warn(error);\n};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 1420,
        "wires": [
            [
                "36b155c2a96355b2"
            ]
        ]
    },
    {
        "id": "abe5cb1d104196b6",
        "type": "function",
        "z": "d21f09457f348b43",
        "name": "Zone 7 Part No.",
        "func": "const fc = 6;\nconst addresses = 1;     //Number of ADRRESS do want to write\nlet buf = Buffer.alloc(4);\nconst data = msg.payload;\nconst createIndexArray = global.get('createIndexArray');\nconst initIndex = await createIndexArray(286, 302, 99);\n\nfor (const item of data) {\n    const currentBlock = item.current_block;\n    for (const indexItem of initIndex) {\n        if (currentBlock === indexItem.index) {\n            indexItem.value = item.qr_data_detail.data.units_number;\n            break; // No need to continue the loop once a match is found\n        }\n    }\n}\n\n// node.warn(initIndex);\n\nfor (const index of initIndex) {\n    buf.writeInt16BE(index.value);\n    const values = [(buf[0] * 256 + buf[1]), (buf[2] * 256) + buf[3]];\n    msg.payload = { \"value\": values, 'fc': fc, 'unitid': 1, 'address': index.address, 'quantity': addresses };\n    node.send(msg);\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 1480,
        "wires": [
            [
                "3a0ca4d052c6fa1e"
            ]
        ]
    },
    {
        "id": "3a0ca4d052c6fa1e",
        "type": "modbus-flex-write",
        "z": "d21f09457f348b43",
        "name": "",
        "showStatusActivities": false,
        "showErrors": false,
        "server": "51a1a8e59174b5dc",
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "x": 870,
        "y": 1420,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "36b155c2a96355b2",
        "type": "function",
        "z": "d21f09457f348b43",
        "name": "Zone 7 Color",
        "func": "const fc = 6;\nconst addresses = 1;     //Number of ADRRESS do want to write\nlet buf = Buffer.alloc(4);\nconst data = msg.payload;\nconst createIndexArray = global.get('createIndexArray');\nconst initIndex = await createIndexArray(173, 189, 98);\n\nfor (const item of data) {\n    const currentBlock = item.current_block;\n    for (const indexItem of initIndex) {\n        if (currentBlock === indexItem.index) {\n            indexItem.value = item.color;\n            break; // No need to continue the loop once a match is found\n        }\n    }\n}\n\n// node.warn(initIndex);\n\nfor (const index of initIndex) {\n    buf.writeInt16BE(index.value);\n    const values = [(buf[0] * 256 + buf[1]), (buf[2] * 256) + buf[3]];\n    msg.payload = { \"value\": values, 'fc': fc, 'unitid': 1, 'address': index.address, 'quantity': addresses };\n    node.send(msg);\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 1420,
        "wires": [
            [
                "3a0ca4d052c6fa1e"
            ]
        ]
    },
    {
        "id": "34c8679011e8abac",
        "type": "function",
        "z": "d21f09457f348b43",
        "name": "Zone 7 Bath",
        "func": "const fc = 6;\nconst addresses = 1;     //Number of ADRRESS do want to write\nlet buf = Buffer.alloc(4);\nconst data = msg.payload;\nconst createIndexArray = global.get('createIndexArray');\nconst initIndex = await createIndexArray(320, 336, 99);\n\nfor (const item of data) {\n    const currentBlock = item.current_block;\n    for (const indexItem of initIndex) {\n        if (currentBlock === indexItem.index) {\n            indexItem.value = mapTypeToValue(item.qr_data_detail.data.type);\n            break; // No need to continue the loop once a match is found\n        }\n    }\n}\n\n// node.warn(initIndex);\n\nfor (const index of initIndex) {\n    buf.writeInt16BE(index.value);\n    const values = [(buf[0] * 256 + buf[1]), (buf[2] * 256) + buf[3]];\n    msg.payload = { \"value\": values, 'fc': fc, 'unitid': 1, 'address': index.address, 'quantity': addresses };\n    node.send(msg);\n}\n\nfunction mapTypeToValue(type) {\n    switch (type) {\n        case 'N':\n            return 1;\n        case 'B':\n            return 2;\n        case 'S':\n            return 3;\n        case 'A':\n            return 4;\n        default:\n            return null; // หรือค่าเริ่มต้นที่คุณต้องการ\n    }\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 1540,
        "wires": [
            [
                "3a0ca4d052c6fa1e"
            ]
        ]
    },
    {
        "id": "6403ac119bdc16c1",
        "type": "comment",
        "z": "d21f09457f348b43",
        "name": "Zone8 (By Pass 2 B,C)",
        "info": "",
        "x": 300,
        "y": 1620,
        "wires": []
    },
    {
        "id": "70dd61e6a80be4fd",
        "type": "function",
        "z": "d21f09457f348b43",
        "name": "Query zone 8 (By Pass 2 B,C)",
        "func": "const db = global.get(\"connetion_mongo\");\nconst collectionEnum = global.get(\"CollectionEnum\");\nconst zoneEnum = global.get('ZoneEnum');\nconst byPassEnum = global.get(\"ByPassEnum\");\n\ntry {\n    const query = {\n        \"is_active\": true,\n        \"current_zone\": zoneEnum.ZONE_8.index,\n        \"unit_type\": \"N\"\n    }\n    msg.payload = await db.collection(collectionEnum.PRODUCTION_DATA).find(query).toArray();\n    return msg\n} catch (error) {\n    node.warn(error);\n};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 1720,
        "wires": [
            [
                "aff4428bd98ffede"
            ]
        ]
    },
    {
        "id": "e6c3bb29e74b185b",
        "type": "function",
        "z": "d21f09457f348b43",
        "name": "Zone 8 Part No.",
        "func": "const fc = 6;\nconst addresses = 1;     //Number of ADRRESS do want to write\nlet buf = Buffer.alloc(4);\nconst data = msg.payload;\nconst createIndexArray = global.get('createIndexArray');\nconst initIndex = await createIndexArray(337, 367, 99);\n\nfor (const item of data) {\n    const currentBlock = item.current_block;\n    for (const indexItem of initIndex) {\n        if (currentBlock === indexItem.index) {\n            indexItem.value = item.qr_data_detail.data.units_number;\n            break; // No need to continue the loop once a match is found\n        }\n    }\n}\n\n// node.warn(initIndex);\n\nfor (const index of initIndex) {\n    buf.writeInt16BE(index.value);\n    const values = [(buf[0] * 256 + buf[1]), (buf[2] * 256) + buf[3]];\n    msg.payload = { \"value\": values, 'fc': fc, 'unitid': 1, 'address': index.address, 'quantity': addresses };\n    node.send(msg);\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 1740,
        "wires": [
            [
                "18a5c403afd0dacd"
            ]
        ]
    },
    {
        "id": "18a5c403afd0dacd",
        "type": "modbus-flex-write",
        "z": "d21f09457f348b43",
        "name": "",
        "showStatusActivities": false,
        "showErrors": false,
        "server": "51a1a8e59174b5dc",
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "x": 870,
        "y": 1660,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "aff4428bd98ffede",
        "type": "function",
        "z": "d21f09457f348b43",
        "name": "Zone 8 Color",
        "func": "const fc = 6;\nconst addresses = 1;     //Number of ADRRESS do want to write\nlet buf = Buffer.alloc(4);\nconst data = msg.payload;\nconst createIndexArray = global.get('createIndexArray');\nconst initIndex = await createIndexArray(190, 196, 98);\ninitIndex.push({\n    index: 8,\n    address: 346,\n    value: 98\n})\nfor (const item of data) {\n    const currentBlock = item.current_block;\n    for (const indexItem of initIndex) {\n        if (currentBlock === indexItem.index) {\n            indexItem.value = item.color;\n            break; // No need to continue the loop once a match is found\n        }\n    }\n}\n\n// node.warn(initIndex);\n\nfor (const index of initIndex) {\n    buf.writeInt16BE(index.value);\n    const values = [(buf[0] * 256 + buf[1]), (buf[2] * 256) + buf[3]];\n    msg.payload = { \"value\": values, 'fc': fc, 'unitid': 1, 'address': index.address, 'quantity': addresses };\n    node.send(msg);\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 1660,
        "wires": [
            [
                "18a5c403afd0dacd"
            ]
        ]
    },
    {
        "id": "48cabbd811f3b200",
        "type": "function",
        "z": "d21f09457f348b43",
        "name": "Zone 8 Bath",
        "func": "const fc = 6;\nconst addresses = 1;     //Number of ADRRESS do want to write\nlet buf = Buffer.alloc(4);\nconst data = msg.payload;\nconst createIndexArray = global.get('createIndexArray');\nconst initIndex = await createIndexArray(399, 429, 99);\n\nfor (const item of data) {\n    const currentBlock = item.current_block;\n    for (const indexItem of initIndex) {\n        if (currentBlock === indexItem.index) {\n            indexItem.value = mapTypeToValue(item.qr_data_detail.data.type);\n            break; // No need to continue the loop once a match is found\n        }\n    }\n}\n\n// node.warn(initIndex);\n\nfor (const index of initIndex) {\n    buf.writeInt16BE(index.value);\n    const values = [(buf[0] * 256 + buf[1]), (buf[2] * 256) + buf[3]];\n    msg.payload = { \"value\": values, 'fc': fc, 'unitid': 1, 'address': index.address, 'quantity': addresses };\n    node.send(msg);\n}\n\nfunction mapTypeToValue(type) {\n    switch (type) {\n        case 'N':\n            return 1;\n        case 'B':\n            return 2;\n        case 'S':\n            return 3;\n        case 'A':\n            return 4;\n        default:\n            return null; // หรือค่าเริ่มต้นที่คุณต้องการ\n    }\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 1780,
        "wires": [
            [
                "18a5c403afd0dacd"
            ]
        ]
    },
    {
        "id": "85774b3cdaa9a299",
        "type": "comment",
        "z": "d21f09457f348b43",
        "name": "Zone9",
        "info": "",
        "x": 250,
        "y": 2300,
        "wires": []
    },
    {
        "id": "d40fcbe40bd07463",
        "type": "function",
        "z": "d21f09457f348b43",
        "name": "Query zone 9",
        "func": "const db = global.get(\"connetion_mongo\");\nconst collectionEnum = global.get(\"CollectionEnum\");\nconst zoneEnum = global.get('ZoneEnum');\nconst byPassEnum = global.get(\"ByPassEnum\");\n\ntry {\n    const query = {\n        \"is_active\": true,\n        \"current_zone\": zoneEnum.ZONE_9.index\n    }\n    msg.payload = await db.collection(collectionEnum.PRODUCTION_DATA).find(query).toArray();\n    return msg\n} catch (error) {\n    node.warn(error);\n};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 2340,
        "wires": [
            [
                "a514247cdfae0522"
            ]
        ]
    },
    {
        "id": "40bff771d1360c3d",
        "type": "function",
        "z": "d21f09457f348b43",
        "name": "Zone 9 Part No.",
        "func": "const fc = 6;\nconst addresses = 1;     //Number of ADRRESS do want to write\nlet buf = Buffer.alloc(4);\nconst data = msg.payload;\nconst createIndexArray = global.get('createIndexArray');\nconst initIndex = await createIndexArray(430, 435, 99);\n\nfor (const item of data) {\n    const currentBlock = item.current_block;\n    for (const indexItem of initIndex) {\n        if (currentBlock === indexItem.index) {\n            indexItem.value = item.qr_data_detail.data.units_number;\n            break; // No need to continue the loop once a match is found\n        }\n    }\n}\n\n// node.warn(initIndex);\n\nfor (const index of initIndex) {\n    buf.writeInt16BE(index.value);\n    const values = [(buf[0] * 256 + buf[1]), (buf[2] * 256) + buf[3]];\n    msg.payload = { \"value\": values, 'fc': fc, 'unitid': 1, 'address': index.address, 'quantity': addresses };\n    node.send(msg);\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 2420,
        "wires": [
            [
                "eb1eed6d50237ca8"
            ]
        ]
    },
    {
        "id": "eb1eed6d50237ca8",
        "type": "modbus-flex-write",
        "z": "d21f09457f348b43",
        "name": "",
        "showStatusActivities": false,
        "showErrors": false,
        "server": "51a1a8e59174b5dc",
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "x": 870,
        "y": 2340,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "a514247cdfae0522",
        "type": "function",
        "z": "d21f09457f348b43",
        "name": "Zone 9 Color",
        "func": "const fc = 6;\nconst addresses = 1;     //Number of ADRRESS do want to write\nlet buf = Buffer.alloc(4);\nconst data = msg.payload;\nconst createIndexArray = global.get('createIndexArray');\nconst initIndex = await createIndexArray(227, 235, 98);\n\nfor (const item of data) {\n    const currentBlock = item.current_block;\n    for (const indexItem of initIndex) {\n        if (currentBlock === indexItem.index) {\n            indexItem.value = item.color;\n            break; // No need to continue the loop once a match is found\n        }\n    }\n}\n\n// node.warn(initIndex);\n\nfor (const index of initIndex) {\n    buf.writeInt16BE(index.value);\n    const values = [(buf[0] * 256 + buf[1]), (buf[2] * 256) + buf[3]];\n    msg.payload = { \"value\": values, 'fc': fc, 'unitid': 1, 'address': index.address, 'quantity': addresses };\n    node.send(msg);\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 2340,
        "wires": [
            [
                "eb1eed6d50237ca8"
            ]
        ]
    },
    {
        "id": "1148020c3896630b",
        "type": "function",
        "z": "d21f09457f348b43",
        "name": "Zone 9 Bath",
        "func": "const fc = 6;\nconst addresses = 1;     //Number of ADRRESS do want to write\nlet buf = Buffer.alloc(4);\nconst data = msg.payload;\nconst createIndexArray = global.get('createIndexArray');\nconst initIndex = await createIndexArray(442, 447, 99);\n\nfor (const item of data) {\n    const currentBlock = item.current_block;\n    for (const indexItem of initIndex) {\n        if (currentBlock === indexItem.index) {\n            indexItem.value = mapTypeToValue(item.qr_data_detail.data.type);\n            break; // No need to continue the loop once a match is found\n        }\n    }\n}\n\n// node.warn(initIndex);\n\nfor (const index of initIndex) {\n    buf.writeInt16BE(index.value);\n    const values = [(buf[0] * 256 + buf[1]), (buf[2] * 256) + buf[3]];\n    msg.payload = { \"value\": values, 'fc': fc, 'unitid': 1, 'address': index.address, 'quantity': addresses };\n    node.send(msg);\n}\n\nfunction mapTypeToValue(type) {\n    switch (type) {\n        case 'N':\n            return 1;\n        case 'B':\n            return 2;\n        case 'S':\n            return 3;\n        case 'A':\n            return 4;\n        default:\n            return null; // หรือค่าเริ่มต้นที่คุณต้องการ\n    }\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 2460,
        "wires": [
            [
                "eb1eed6d50237ca8"
            ]
        ]
    },
    {
        "id": "f015c0c3196c503e",
        "type": "comment",
        "z": "d21f09457f348b43",
        "name": "Zone10",
        "info": "",
        "x": 250,
        "y": 2540,
        "wires": []
    },
    {
        "id": "17eea6132279df17",
        "type": "function",
        "z": "d21f09457f348b43",
        "name": "Query zone 10",
        "func": "const db = global.get(\"connetion_mongo\");\nconst collectionEnum = global.get(\"CollectionEnum\");\nconst zoneEnum = global.get('ZoneEnum');\nconst byPassEnum = global.get(\"ByPassEnum\");\n\ntry {\n    const query = {\n        \"is_active\": true,\n        \"current_zone\": zoneEnum.ZONE_10.index\n    }\n    msg.payload = await db.collection(collectionEnum.PRODUCTION_DATA).find(query).toArray();\n    return msg\n} catch (error) {\n    node.warn(error);\n};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 2580,
        "wires": [
            [
                "91a7093df8e22449"
            ]
        ]
    },
    {
        "id": "fc3f5a179ded02a3",
        "type": "function",
        "z": "d21f09457f348b43",
        "name": "Zone 10 Part No.",
        "func": "const fc = 6;\nconst addresses = 1;     //Number of ADRRESS do want to write\nlet buf = Buffer.alloc(4);\nconst data = msg.payload;\nconst createIndexArray = global.get('createIndexArray');\nconst initIndex = await createIndexArray(430, 435, 99);\n\nfor (const item of data) {\n    const currentBlock = item.current_block;\n    for (const indexItem of initIndex) {\n        if (currentBlock === indexItem.index) {\n            indexItem.value = item.qr_data_detail.data.units_number;\n            break; // No need to continue the loop once a match is found\n        }\n    }\n}\n\n// node.warn(initIndex);\n\nfor (const index of initIndex) {\n    buf.writeInt16BE(index.value);\n    const values = [(buf[0] * 256 + buf[1]), (buf[2] * 256) + buf[3]];\n    msg.payload = { \"value\": values, 'fc': fc, 'unitid': 1, 'address': index.address, 'quantity': addresses };\n    node.send(msg);\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 2660,
        "wires": [
            [
                "036c7dbce8ebb52f"
            ]
        ]
    },
    {
        "id": "036c7dbce8ebb52f",
        "type": "modbus-flex-write",
        "z": "d21f09457f348b43",
        "name": "",
        "showStatusActivities": false,
        "showErrors": false,
        "server": "51a1a8e59174b5dc",
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "x": 870,
        "y": 2580,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "91a7093df8e22449",
        "type": "function",
        "z": "d21f09457f348b43",
        "name": "Zone 10 Color",
        "func": "const fc = 6;\nconst addresses = 1;     //Number of ADRRESS do want to write\nlet buf = Buffer.alloc(4);\nconst data = msg.payload;\nconst createIndexArray = global.get('createIndexArray');\nconst initIndex = await createIndexArray(236, 240, 98);\n\nfor (const item of data) {\n    const currentBlock = item.current_block;\n    for (const indexItem of initIndex) {\n        if (currentBlock === indexItem.index) {\n            indexItem.value = item.color;\n            break; // No need to continue the loop once a match is found\n        }\n    }\n}\n\n// node.warn(initIndex);\n\nfor (const index of initIndex) {\n    buf.writeInt16BE(index.value);\n    const values = [(buf[0] * 256 + buf[1]), (buf[2] * 256) + buf[3]];\n    msg.payload = { \"value\": values, 'fc': fc, 'unitid': 1, 'address': index.address, 'quantity': addresses };\n    node.send(msg);\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 2580,
        "wires": [
            [
                "036c7dbce8ebb52f"
            ]
        ]
    },
    {
        "id": "944f422923afc981",
        "type": "function",
        "z": "d21f09457f348b43",
        "name": "Zone 10 Bath",
        "func": "const fc = 6;\nconst addresses = 1;     //Number of ADRRESS do want to write\nlet buf = Buffer.alloc(4);\nconst data = msg.payload;\nconst createIndexArray = global.get('createIndexArray');\nconst initIndex = await createIndexArray(442, 447, 99);\n\nfor (const item of data) {\n    const currentBlock = item.current_block;\n    for (const indexItem of initIndex) {\n        if (currentBlock === indexItem.index) {\n            indexItem.value = mapTypeToValue(item.qr_data_detail.data.type);\n            break; // No need to continue the loop once a match is found\n        }\n    }\n}\n\n// node.warn(initIndex);\n\nfor (const index of initIndex) {\n    buf.writeInt16BE(index.value);\n    const values = [(buf[0] * 256 + buf[1]), (buf[2] * 256) + buf[3]];\n    msg.payload = { \"value\": values, 'fc': fc, 'unitid': 1, 'address': index.address, 'quantity': addresses };\n    node.send(msg);\n}\n\nfunction mapTypeToValue(type) {\n    switch (type) {\n        case 'N':\n            return 1;\n        case 'B':\n            return 2;\n        case 'S':\n            return 3;\n        case 'A':\n            return 4;\n        default:\n            return null; // หรือค่าเริ่มต้นที่คุณต้องการ\n    }\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 2700,
        "wires": [
            [
                "036c7dbce8ebb52f"
            ]
        ]
    },
    {
        "id": "4d26161384176da5",
        "type": "comment",
        "z": "d21f09457f348b43",
        "name": "Zone11",
        "info": "",
        "x": 250,
        "y": 2800,
        "wires": []
    },
    {
        "id": "15088749785afda3",
        "type": "function",
        "z": "d21f09457f348b43",
        "name": "Query zone 11",
        "func": "const db = global.get(\"connetion_mongo\");\nconst collectionEnum = global.get(\"CollectionEnum\");\nconst zoneEnum = global.get('ZoneEnum');\nconst byPassEnum = global.get(\"ByPassEnum\");\n\ntry {\n    const query = {\n        \"is_active\": true,\n        \"current_zone\": zoneEnum.ZONE_11.index\n    }\n    msg.payload = await db.collection(collectionEnum.PRODUCTION_DATA).find(query).toArray();\n    return msg\n} catch (error) {\n    node.warn(error);\n};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 2840,
        "wires": [
            [
                "bebda8eb4165f947"
            ]
        ]
    },
    {
        "id": "0e3e127767a84443",
        "type": "function",
        "z": "d21f09457f348b43",
        "name": "Zone 11 Part No.",
        "func": "const fc = 6;\nconst addresses = 1;     //Number of ADRRESS do want to write\nlet buf = Buffer.alloc(4);\nconst data = msg.payload;\nconst createIndexArray = global.get('createIndexArray');\nconst initIndex = await createIndexArray(475, 477, 99);\n\nfor (const item of data) {\n    const currentBlock = item.current_block;\n    for (const indexItem of initIndex) {\n        if (currentBlock === indexItem.index) {\n            indexItem.value = item.qr_data_detail.data.units_number;\n            break; // No need to continue the loop once a match is found\n        }\n    }\n}\n\n// node.warn(initIndex);\n\nfor (const index of initIndex) {\n    buf.writeInt16BE(index.value);\n    const values = [(buf[0] * 256 + buf[1]), (buf[2] * 256) + buf[3]];\n    msg.payload = { \"value\": values, 'fc': fc, 'unitid': 1, 'address': index.address, 'quantity': addresses };\n    node.send(msg);\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 2920,
        "wires": [
            [
                "a0d5470d3d78e1fc"
            ]
        ]
    },
    {
        "id": "a0d5470d3d78e1fc",
        "type": "modbus-flex-write",
        "z": "d21f09457f348b43",
        "name": "",
        "showStatusActivities": false,
        "showErrors": false,
        "server": "51a1a8e59174b5dc",
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "x": 870,
        "y": 2840,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "bebda8eb4165f947",
        "type": "function",
        "z": "d21f09457f348b43",
        "name": "Zone 11 Color",
        "func": "const fc = 6;\nconst addresses = 1;     //Number of ADRRESS do want to write\nlet buf = Buffer.alloc(4);\nconst data = msg.payload;\nconst createIndexArray = global.get('createIndexArray');\nconst initIndex = await createIndexArray(241, 243, 98);\n\nfor (const item of data) {\n    const currentBlock = item.current_block;\n    for (const indexItem of initIndex) {\n        if (currentBlock === indexItem.index) {\n            indexItem.value = item.color;\n            break; // No need to continue the loop once a match is found\n        }\n    }\n}\n\n// node.warn(initIndex);\n\nfor (const index of initIndex) {\n    buf.writeInt16BE(index.value);\n    const values = [(buf[0] * 256 + buf[1]), (buf[2] * 256) + buf[3]];\n    msg.payload = { \"value\": values, 'fc': fc, 'unitid': 1, 'address': index.address, 'quantity': addresses };\n    node.send(msg);\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 2840,
        "wires": [
            [
                "a0d5470d3d78e1fc"
            ]
        ]
    },
    {
        "id": "1d83e6dfe8a9e26d",
        "type": "function",
        "z": "d21f09457f348b43",
        "name": "Zone 11 Bath",
        "func": "const fc = 6;\nconst addresses = 1;     //Number of ADRRESS do want to write\nlet buf = Buffer.alloc(4);\nconst data = msg.payload;\nconst createIndexArray = global.get('createIndexArray');\nconst initIndex = await createIndexArray(481, 483, 99);\n\nfor (const item of data) {\n    const currentBlock = item.current_block;\n    for (const indexItem of initIndex) {\n        if (currentBlock === indexItem.index) {\n            indexItem.value = mapTypeToValue(item.qr_data_detail.data.type);\n            break; // No need to continue the loop once a match is found\n        }\n    }\n}\n\n// node.warn(initIndex);\n\nfor (const index of initIndex) {\n    buf.writeInt16BE(index.value);\n    const values = [(buf[0] * 256 + buf[1]), (buf[2] * 256) + buf[3]];\n    msg.payload = { \"value\": values, 'fc': fc, 'unitid': 1, 'address': index.address, 'quantity': addresses };\n    node.send(msg);\n}\n\nfunction mapTypeToValue(type) {\n    switch (type) {\n        case 'N':\n            return 1;\n        case 'B':\n            return 2;\n        case 'S':\n            return 3;\n        case 'A':\n            return 4;\n        default:\n            return null; // หรือค่าเริ่มต้นที่คุณต้องการ\n    }\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 2960,
        "wires": [
            [
                "a0d5470d3d78e1fc"
            ]
        ]
    },
    {
        "id": "d256bf929bcb2e72",
        "type": "comment",
        "z": "d21f09457f348b43",
        "name": "Zone12",
        "info": "",
        "x": 250,
        "y": 3060,
        "wires": []
    },
    {
        "id": "dc13aa21288faed6",
        "type": "function",
        "z": "d21f09457f348b43",
        "name": "Query zone 12",
        "func": "const db = global.get(\"connetion_mongo\");\nconst collectionEnum = global.get(\"CollectionEnum\");\nconst zoneEnum = global.get('ZoneEnum');\nconst byPassEnum = global.get(\"ByPassEnum\");\n\ntry {\n    const query = {\n        \"is_active\": true,\n        \"current_zone\": zoneEnum.ZONE_12.index\n    }\n    msg.payload = await db.collection(collectionEnum.PRODUCTION_DATA).find(query).toArray();\n    return msg\n} catch (error) {\n    node.warn(error);\n};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 3100,
        "wires": [
            [
                "001a6bd9e0fdeff8"
            ]
        ]
    },
    {
        "id": "42a281aa5721767c",
        "type": "function",
        "z": "d21f09457f348b43",
        "name": "Zone 12 Part No.",
        "func": "const fc = 6;\nconst addresses = 1;     //Number of ADRRESS do want to write\nlet buf = Buffer.alloc(4);\nconst data = msg.payload;\nconst createIndexArray = global.get('createIndexArray');\nconst initIndex = await createIndexArray(484, 492, 99);\n\nfor (const item of data) {\n    const currentBlock = item.current_block;\n    for (const indexItem of initIndex) {\n        if (currentBlock === indexItem.index) {\n            indexItem.value = item.qr_data_detail.data.units_number;\n            break; // No need to continue the loop once a match is found\n        }\n    }\n}\n\n// node.warn(initIndex);\n\nfor (const index of initIndex) {\n    buf.writeInt16BE(index.value);\n    const values = [(buf[0] * 256 + buf[1]), (buf[2] * 256) + buf[3]];\n    msg.payload = { \"value\": values, 'fc': fc, 'unitid': 1, 'address': index.address, 'quantity': addresses };\n    node.send(msg);\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 3180,
        "wires": [
            [
                "98f3280d6fceac49"
            ]
        ]
    },
    {
        "id": "98f3280d6fceac49",
        "type": "modbus-flex-write",
        "z": "d21f09457f348b43",
        "name": "",
        "showStatusActivities": false,
        "showErrors": false,
        "server": "51a1a8e59174b5dc",
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "x": 870,
        "y": 3100,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "001a6bd9e0fdeff8",
        "type": "function",
        "z": "d21f09457f348b43",
        "name": "Zone 12 Color",
        "func": "const fc = 6;\nconst addresses = 1;     //Number of ADRRESS do want to write\nlet buf = Buffer.alloc(4);\nconst data = msg.payload;\nconst createIndexArray = global.get('createIndexArray');\nconst initIndex = await createIndexArray(244, 252, 98);\n\nfor (const item of data) {\n    const currentBlock = item.current_block;\n    for (const indexItem of initIndex) {\n        if (currentBlock === indexItem.index) {\n            indexItem.value = item.color;\n            break; // No need to continue the loop once a match is found\n        }\n    }\n}\n\n// node.warn(initIndex);\n\nfor (const index of initIndex) {\n    buf.writeInt16BE(index.value);\n    const values = [(buf[0] * 256 + buf[1]), (buf[2] * 256) + buf[3]];\n    msg.payload = { \"value\": values, 'fc': fc, 'unitid': 1, 'address': index.address, 'quantity': addresses };\n    node.send(msg);\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 3100,
        "wires": [
            [
                "98f3280d6fceac49"
            ]
        ]
    },
    {
        "id": "4dec11e36b1598d7",
        "type": "function",
        "z": "d21f09457f348b43",
        "name": "Zone 12 Bath",
        "func": "const fc = 6;\nconst addresses = 1;     //Number of ADRRESS do want to write\nlet buf = Buffer.alloc(4);\nconst data = msg.payload;\nconst createIndexArray = global.get('createIndexArray');\nconst initIndex = await createIndexArray(502, 510, 99);\n\nfor (const item of data) {\n    const currentBlock = item.current_block;\n    for (const indexItem of initIndex) {\n        if (currentBlock === indexItem.index) {\n            indexItem.value = mapTypeToValue(item.qr_data_detail.data.type);\n            break; // No need to continue the loop once a match is found\n        }\n    }\n}\n\n// node.warn(initIndex);\n\nfor (const index of initIndex) {\n    buf.writeInt16BE(index.value);\n    const values = [(buf[0] * 256 + buf[1]), (buf[2] * 256) + buf[3]];\n    msg.payload = { \"value\": values, 'fc': fc, 'unitid': 1, 'address': index.address, 'quantity': addresses };\n    node.send(msg);\n}\n\nfunction mapTypeToValue(type) {\n    switch (type) {\n        case 'N':\n            return 1;\n        case 'B':\n            return 2;\n        case 'S':\n            return 3;\n        case 'A':\n            return 4;\n        default:\n            return null; // หรือค่าเริ่มต้นที่คุณต้องการ\n    }\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 3220,
        "wires": [
            [
                "98f3280d6fceac49"
            ]
        ]
    },
    {
        "id": "902fd41fdde03515",
        "type": "comment",
        "z": "d21f09457f348b43",
        "name": "Zone8 (By Pass 2 Bathroom)",
        "info": "",
        "x": 320,
        "y": 1860,
        "wires": []
    },
    {
        "id": "f6e3533169ea3363",
        "type": "function",
        "z": "d21f09457f348b43",
        "name": "Query zone 8 (By Pass 2 Bathroom)",
        "func": "const db = global.get(\"connetion_mongo\");\nconst collectionEnum = global.get(\"CollectionEnum\");\nconst zoneEnum = global.get('ZoneEnum');\nconst byPassEnum = global.get(\"ByPassEnum\");\n\ntry {\n    const query = {\n        \"is_active\": true,\n        \"current_zone\": zoneEnum.ZONE_8.index,\n        \"unit_type\": \"B,C\"\n    }\n    msg.payload = await db.collection(collectionEnum.PRODUCTION_DATA).find(query).toArray();\n    return msg\n} catch (error) {\n    node.warn(error);\n};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 1960,
        "wires": [
            [
                "37d623392f249fca"
            ]
        ]
    },
    {
        "id": "f92809b19d5c4d8d",
        "type": "function",
        "z": "d21f09457f348b43",
        "name": "Zone 8 Part No.",
        "func": "const fc = 6;\nconst addresses = 1;     //Number of ADRRESS do want to write\nlet buf = Buffer.alloc(4);\nconst data = msg.payload;\nconst createIndexArray = global.get('createIndexArray');\nconst initIndex = await createIndexArray(337, 367, 99);\n\nfor (const item of data) {\n    const currentBlock = item.current_block;\n    for (const indexItem of initIndex) {\n        if (currentBlock === indexItem.index) {\n            indexItem.value = item.qr_data_detail.data.units_number;\n            break; // No need to continue the loop once a match is found\n        }\n    }\n}\n\n// node.warn(initIndex);\n\nfor (const index of initIndex) {\n    buf.writeInt16BE(index.value);\n    const values = [(buf[0] * 256 + buf[1]), (buf[2] * 256) + buf[3]];\n    msg.payload = { \"value\": values, 'fc': fc, 'unitid': 1, 'address': index.address, 'quantity': addresses };\n    node.send(msg);\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 1980,
        "wires": [
            [
                "026ae0fbcee05105"
            ]
        ]
    },
    {
        "id": "026ae0fbcee05105",
        "type": "modbus-flex-write",
        "z": "d21f09457f348b43",
        "name": "",
        "showStatusActivities": false,
        "showErrors": false,
        "server": "51a1a8e59174b5dc",
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "x": 870,
        "y": 1900,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "37d623392f249fca",
        "type": "function",
        "z": "d21f09457f348b43",
        "name": "Zone 8 Color",
        "func": "const fc = 6;\nconst addresses = 1;     //Number of ADRRESS do want to write\nlet buf = Buffer.alloc(4);\nconst data = msg.payload;\nconst createIndexArray = global.get('createIndexArray');\nconst initIndex = await createIndexArray(197, 222, 98);\n\nfor (const item of data) {\n    const currentBlock = item.current_block;\n    for (const indexItem of initIndex) {\n        if (currentBlock === indexItem.index) {\n            indexItem.value = item.color;\n            break; // No need to continue the loop once a match is found\n        }\n    }\n}\n\n// node.warn(initIndex);\n\nfor (const index of initIndex) {\n    buf.writeInt16BE(index.value);\n    const values = [(buf[0] * 256 + buf[1]), (buf[2] * 256) + buf[3]];\n    msg.payload = { \"value\": values, 'fc': fc, 'unitid': 1, 'address': index.address, 'quantity': addresses };\n    node.send(msg);\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 1900,
        "wires": [
            [
                "026ae0fbcee05105"
            ]
        ]
    },
    {
        "id": "292e99868ea19d7f",
        "type": "function",
        "z": "d21f09457f348b43",
        "name": "Zone 8 Bath",
        "func": "const fc = 6;\nconst addresses = 1;     //Number of ADRRESS do want to write\nlet buf = Buffer.alloc(4);\nconst data = msg.payload;\nconst createIndexArray = global.get('createIndexArray');\nconst initIndex = await createIndexArray(399, 429, 99);\n\nfor (const item of data) {\n    const currentBlock = item.current_block;\n    for (const indexItem of initIndex) {\n        if (currentBlock === indexItem.index) {\n            indexItem.value = mapTypeToValue(item.qr_data_detail.data.type);\n            break; // No need to continue the loop once a match is found\n        }\n    }\n}\n\n// node.warn(initIndex);\n\nfor (const index of initIndex) {\n    buf.writeInt16BE(index.value);\n    const values = [(buf[0] * 256 + buf[1]), (buf[2] * 256) + buf[3]];\n    msg.payload = { \"value\": values, 'fc': fc, 'unitid': 1, 'address': index.address, 'quantity': addresses };\n    node.send(msg);\n}\n\nfunction mapTypeToValue(type) {\n    switch (type) {\n        case 'N':\n            return 1;\n        case 'B':\n            return 2;\n        case 'S':\n            return 3;\n        case 'A':\n            return 4;\n        default:\n            return null; // หรือค่าเริ่มต้นที่คุณต้องการ\n    }\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 2020,
        "wires": [
            [
                "026ae0fbcee05105"
            ]
        ]
    },
    {
        "id": "5f3f51e8ac3668d2",
        "type": "comment",
        "z": "d21f09457f348b43",
        "name": "Zone8 (By Pass 2 Stair)",
        "info": "",
        "x": 320,
        "y": 2080,
        "wires": []
    },
    {
        "id": "88de2fef75dd1542",
        "type": "function",
        "z": "d21f09457f348b43",
        "name": "Query zone 8 (By Pass 2 Stair)",
        "func": "const db = global.get(\"connetion_mongo\");\nconst collectionEnum = global.get(\"CollectionEnum\");\nconst zoneEnum = global.get('ZoneEnum');\nconst byPassEnum = global.get(\"ByPassEnum\");\n\ntry {\n    const query = {\n        \"is_active\": true,\n        \"current_zone\": zoneEnum.ZONE_8.index,\n        \"unit_type\": \"R\"\n    }\n    msg.payload = await db.collection(collectionEnum.PRODUCTION_DATA).find(query).toArray();\n    return msg\n} catch (error) {\n    node.warn(error);\n};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 2180,
        "wires": [
            [
                "2080288503081cac"
            ]
        ]
    },
    {
        "id": "cb3b6b6b5183cc60",
        "type": "function",
        "z": "d21f09457f348b43",
        "name": "Zone 8 Part No.",
        "func": "const fc = 6;\nconst addresses = 1;     //Number of ADRRESS do want to write\nlet buf = Buffer.alloc(4);\nconst data = msg.payload;\nconst createIndexArray = global.get('createIndexArray');\nconst initIndex = await createIndexArray(337, 367, 99);\n\nfor (const item of data) {\n    const currentBlock = item.current_block;\n    for (const indexItem of initIndex) {\n        if (currentBlock === indexItem.index) {\n            indexItem.value = item.qr_data_detail.data.units_number;\n            break; // No need to continue the loop once a match is found\n        }\n    }\n}\n\n// node.warn(initIndex);\n\nfor (const index of initIndex) {\n    buf.writeInt16BE(index.value);\n    const values = [(buf[0] * 256 + buf[1]), (buf[2] * 256) + buf[3]];\n    msg.payload = { \"value\": values, 'fc': fc, 'unitid': 1, 'address': index.address, 'quantity': addresses };\n    node.send(msg);\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 660,
        "y": 2200,
        "wires": [
            [
                "0b99092385ce8b4e"
            ]
        ]
    },
    {
        "id": "0b99092385ce8b4e",
        "type": "modbus-flex-write",
        "z": "d21f09457f348b43",
        "name": "",
        "showStatusActivities": false,
        "showErrors": false,
        "server": "51a1a8e59174b5dc",
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "x": 890,
        "y": 2120,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "2080288503081cac",
        "type": "function",
        "z": "d21f09457f348b43",
        "name": "Zone 8 Color",
        "func": "const fc = 6;\nconst addresses = 1;     //Number of ADRRESS do want to write\nlet buf = Buffer.alloc(4);\nconst data = msg.payload;\nconst createIndexArray = global.get('createIndexArray');\nconst initIndex = await createIndexArray(223, 226, 98);\n\nfor (const item of data) {\n    const currentBlock = item.current_block;\n    for (const indexItem of initIndex) {\n        if (currentBlock === indexItem.index) {\n            indexItem.value = item.color;\n            break; // No need to continue the loop once a match is found\n        }\n    }\n}\n\n// node.warn(initIndex);\n\nfor (const index of initIndex) {\n    buf.writeInt16BE(index.value);\n    const values = [(buf[0] * 256 + buf[1]), (buf[2] * 256) + buf[3]];\n    msg.payload = { \"value\": values, 'fc': fc, 'unitid': 1, 'address': index.address, 'quantity': addresses };\n    node.send(msg);\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 2120,
        "wires": [
            [
                "0b99092385ce8b4e"
            ]
        ]
    },
    {
        "id": "52f715cab9e80a44",
        "type": "function",
        "z": "d21f09457f348b43",
        "name": "Zone 8 Bath",
        "func": "const fc = 6;\nconst addresses = 1;     //Number of ADRRESS do want to write\nlet buf = Buffer.alloc(4);\nconst data = msg.payload;\nconst createIndexArray = global.get('createIndexArray');\nconst initIndex = await createIndexArray(399, 429, 99);\n\nfor (const item of data) {\n    const currentBlock = item.current_block;\n    for (const indexItem of initIndex) {\n        if (currentBlock === indexItem.index) {\n            indexItem.value = mapTypeToValue(item.qr_data_detail.data.type);\n            break; // No need to continue the loop once a match is found\n        }\n    }\n}\n\n// node.warn(initIndex);\n\nfor (const index of initIndex) {\n    buf.writeInt16BE(index.value);\n    const values = [(buf[0] * 256 + buf[1]), (buf[2] * 256) + buf[3]];\n    msg.payload = { \"value\": values, 'fc': fc, 'unitid': 1, 'address': index.address, 'quantity': addresses };\n    node.send(msg);\n}\n\nfunction mapTypeToValue(type) {\n    switch (type) {\n        case 'N':\n            return 1;\n        case 'B':\n            return 2;\n        case 'S':\n            return 3;\n        case 'A':\n            return 4;\n        default:\n            return null; // หรือค่าเริ่มต้นที่คุณต้องการ\n    }\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 2240,
        "wires": [
            [
                "0b99092385ce8b4e"
            ]
        ]
    },
    {
        "id": "03ae926a45186fea",
        "type": "inject",
        "z": "d21f09457f348b43",
        "name": "",
        "props": [
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "60",
        "crontab": "",
        "once": true,
        "onceDelay": "10",
        "topic": "",
        "x": 270,
        "y": 500,
        "wires": [
            []
        ]
    },
    {
        "id": "4acfb00b20fee390",
        "type": "inject",
        "z": "d21f09457f348b43",
        "name": "",
        "props": [
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "60",
        "crontab": "",
        "once": true,
        "onceDelay": "10",
        "topic": "",
        "x": 270,
        "y": 300,
        "wires": [
            []
        ]
    },
    {
        "id": "b08e263a01ef9897",
        "type": "inject",
        "z": "d21f09457f348b43",
        "name": "Interval 5 seconds",
        "props": [
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": true,
        "onceDelay": "5",
        "topic": "",
        "x": 230,
        "y": 160,
        "wires": [
            [
                "0d600a4628a0d0ad",
                "77e6ef0c7186d296",
                "086d392a01b86c62",
                "430cbd8084743758"
            ]
        ]
    },
    {
        "id": "5a47681bb9292d48",
        "type": "inject",
        "z": "d21f09457f348b43",
        "name": "Interval 5 seconds",
        "props": [
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": true,
        "onceDelay": "5",
        "topic": "",
        "x": 230,
        "y": 960,
        "wires": [
            [
                "64fc7f3737ddbd0f",
                "6f986fb6cdc73120",
                "f00d44d1bac39a37"
            ]
        ]
    },
    {
        "id": "6d0bb87d69f7776c",
        "type": "inject",
        "z": "d21f09457f348b43",
        "name": "",
        "props": [
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "60",
        "crontab": "",
        "once": true,
        "onceDelay": "10",
        "topic": "",
        "x": 270,
        "y": 1180,
        "wires": [
            []
        ]
    },
    {
        "id": "6c5874c5ebc0729d",
        "type": "inject",
        "z": "d21f09457f348b43",
        "name": "",
        "props": [
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "60",
        "crontab": "",
        "once": true,
        "onceDelay": "10",
        "topic": "",
        "x": 270,
        "y": 1420,
        "wires": [
            []
        ]
    },
    {
        "id": "3cda20a1571be9bb",
        "type": "inject",
        "z": "d21f09457f348b43",
        "name": "Interval 5 seconds",
        "props": [
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": true,
        "onceDelay": "5",
        "topic": "",
        "x": 310,
        "y": 1660,
        "wires": [
            [
                "70dd61e6a80be4fd",
                "f6e3533169ea3363",
                "88de2fef75dd1542"
            ]
        ]
    },
    {
        "id": "e6ddc511f05daacb",
        "type": "inject",
        "z": "d21f09457f348b43",
        "name": "",
        "props": [
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "60",
        "crontab": "",
        "once": true,
        "onceDelay": "10",
        "topic": "",
        "x": 250,
        "y": 1900,
        "wires": [
            []
        ]
    },
    {
        "id": "ed99abc44b090c62",
        "type": "inject",
        "z": "d21f09457f348b43",
        "name": "",
        "props": [
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "60",
        "crontab": "",
        "once": true,
        "onceDelay": "10",
        "topic": "",
        "x": 250,
        "y": 2120,
        "wires": [
            []
        ]
    },
    {
        "id": "25be93c1b40a0e7b",
        "type": "inject",
        "z": "d21f09457f348b43",
        "name": "Interval 5 seconds",
        "props": [
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": true,
        "onceDelay": "5",
        "topic": "",
        "x": 210,
        "y": 2340,
        "wires": [
            [
                "d40fcbe40bd07463",
                "17eea6132279df17",
                "15088749785afda3",
                "dc13aa21288faed6"
            ]
        ]
    },
    {
        "id": "225637f432aabbfd",
        "type": "inject",
        "z": "d21f09457f348b43",
        "name": "",
        "props": [
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "60",
        "crontab": "",
        "once": true,
        "onceDelay": "10",
        "topic": "",
        "x": 270,
        "y": 2580,
        "wires": [
            []
        ]
    },
    {
        "id": "7c9ba41fb71bc38e",
        "type": "inject",
        "z": "d21f09457f348b43",
        "name": "",
        "props": [
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "60",
        "crontab": "",
        "once": true,
        "onceDelay": "10",
        "topic": "",
        "x": 270,
        "y": 2840,
        "wires": [
            []
        ]
    },
    {
        "id": "41bdd7a61a8b6fd5",
        "type": "inject",
        "z": "d21f09457f348b43",
        "name": "",
        "props": [
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "60",
        "crontab": "",
        "once": true,
        "onceDelay": "10",
        "topic": "",
        "x": 270,
        "y": 3100,
        "wires": [
            []
        ]
    },
    {
        "id": "7724e2440eb7bbc2",
        "type": "comment",
        "z": "b1b087dc079885be",
        "name": "Production speed in Assyline",
        "info": "",
        "x": 240,
        "y": 40,
        "wires": []
    },
    {
        "id": "e8bb401e4c12439d",
        "type": "inject",
        "z": "b1b087dc079885be",
        "name": "",
        "props": [
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 1590,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "71769419a67feaf3",
        "type": "function",
        "z": "b1b087dc079885be",
        "name": "Query Full Stage",
        "func": "try {\n    const maxBlockPerZone = global.get('maxBlockPerZone');\n    const valuesArray = Object.values(maxBlockPerZone);    \n    msg.payload = valuesArray;\n    return msg;\n} catch (error) {\n    node.warn(error);\n};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1770,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "d0cf95628740c8da",
        "type": "function",
        "z": "b1b087dc079885be",
        "name": "Full Stage",
        "func": "const fc = 6;\nconst addresses = 1;     //Number of ADRRESS do want to write\nlet buf = Buffer.alloc(4);\nconst data = msg.payload;\nconst createIndexArray = global.get('createIndexArray');\nconst initIndex = await createIndexArray(3001, 3013, 99);\n\ndata.forEach((value, index) => {\n    initIndex[index].value = value;\n});\nlet sum = 0;\nlet sum_4_8 = 0;\n// node.warn(initIndex);\nfor (const index of initIndex) {\n    buf.writeInt16BE(index.value);\n    const values = [(buf[0] * 256 + buf[1]), (buf[2] * 256) + buf[3]];\n    msg.payload = { \"value\": values, 'fc': fc, 'unitid': 1, 'address': index.address, 'quantity': addresses };\n    node.send(msg);\n    if (index.index == 5 || index.index == 9) {\n        sum_4_8 += index.value;\n    } else {\n        sum += index.value;\n    }\n\n}\nawait sendSummaryFullStage(sum, 3139);\nawait sendSummaryFullStage(sum_4_8, 3145);\n\nasync function sendSummaryFullStage(sum, address) {\n    var fc = 16;\n    var sa = address;    //Modbus ADRRESS do want to write\n    var addresses = 2;     //Number of ADRRESS do want to write\n    var value = sum;    //Value do want to command\n    var buf = Buffer.alloc(4);\n    buf.writeFloatBE(value);\n    var values = [(buf[0] * 256 + buf[1]), (buf[2] * 256) + buf[3]]\n    msg.payload = { \"value\": values, 'fc': fc, 'unitid': 1, 'address': sa, 'quantity': addresses };\n    // node.status({ fill: \"blue\", shape: \"ring\", text: msg.topic + \":\" + value });\n    node.send(msg);\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1980,
        "y": 80,
        "wires": [
            [
                "55a52eb870678813"
            ]
        ]
    },
    {
        "id": "55a52eb870678813",
        "type": "modbus-flex-write",
        "z": "b1b087dc079885be",
        "name": "",
        "showStatusActivities": false,
        "showErrors": false,
        "showWarnings": true,
        "server": "7ab982fca0f94f9e",
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 2210,
        "y": 80,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "73f90e2eb48002e3",
        "type": "function",
        "z": "b1b087dc079885be",
        "name": "Query Data",
        "func": "const db = global.get(\"connetion_mongo\");\nconst collectionEnum = global.get(\"CollectionEnum\");\nconst zoneEnum = global.get('ZoneEnum');\nconst byPassEnum = global.get(\"ByPassEnum\");\n\ntry {\n    const query = {\n        \"is_active\": true,\n    }\n    const payload_zone1 = await db.collection(collectionEnum.ZONE1_PRODUCTION_DATA).find(query).toArray();\n    const payload = await db.collection(collectionEnum.PRODUCTION_DATA).find(query).toArray();\n    // node.warn(payload);\n    \n    msg.production_data = payload;\n    msg.zone1_production_data = payload_zone1;\n    return msg\n} catch (error) {\n    node.warn(error);\n};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 140,
        "wires": [
            [
                "fa5488d33924204c"
            ]
        ]
    },
    {
        "id": "fa5488d33924204c",
        "type": "function",
        "z": "b1b087dc079885be",
        "name": "Act Inline",
        "func": "const fc = 6;\nconst addresses = 1;     //Number of ADRRESS do want to write\nlet buf = Buffer.alloc(4);\nconst createIndexArray = global.get('createIndexArray');\nconst zone1_production_data = msg.zone1_production_data;\nconst production_data = msg.production_data;\n// node.warn(production_data);\nlet sumAct = 0;\nlet sumAct_4_8 = 0;\n\n\nconst result_2_7 = await zone2_7();\nsumAct += await zone1();\nsumAct += result_2_7.sum;\nsumAct_4_8 += result_2_7.sum4_8;\nsumAct_4_8 += await zone8();\nsumAct_4_8 += await zone9_12();\n\nasync function zone1() {\n    let sum = 0;\n    const initIndex_zone1 = await createIndexArray(253, 254, 0);\n    for (const item of zone1_production_data) {\n        const current_zone = item.lines.line_number;\n        for (const indexItem of initIndex_zone1) {\n            if (current_zone === indexItem.index) {\n                indexItem.value += 1;\n            }\n        }\n    }\n\n    for (const index of initIndex_zone1) {\n        buf.writeUInt16BE(index.value);\n        const values = [(buf[0] * 256 + buf[1]), (buf[2] * 256) + buf[3]];\n        msg.payload = { \"value\": values, 'fc': fc, 'unitid': 1, 'address': index.address, 'quantity': addresses };\n        node.send(msg);\n        sum += index.value;\n    }\n    return sum;\n}\n\nasync function zone2_7() {\n    let sum = 0;\n    let sum4_8 = 0;\n    const initIndex = await createIndexArray(255, 260, 0);\n    for (const item of production_data) {\n        // node.warn(`item::${item.current_zone}`);\n        const current_zone = item.current_zone;\n        for (const indexItem of initIndex) {\n            // node.warn(`indexItem::${indexItem.index}`);\n            if (current_zone === (indexItem.index + 1)) {\n                indexItem.value += 1;\n            }\n        }\n    }\n\n    for (const index of initIndex) {\n        buf.writeUInt16BE(index.value);\n        const values = [(buf[0] * 256 + buf[1]), (buf[2] * 256) + buf[3]];\n        msg.payload = { \"value\": values, 'fc': fc, 'unitid': 1, 'address': index.address, 'quantity': addresses };\n        node.send(msg);\n        if (index.index == 3 || index.index == 7) {\n            sum4_8 += index.value;\n        } else {\n            sum += index.value;\n        }\n    }\n    return { sum, sum4_8 };\n}\n\nasync function zone9_12() {\n    let sum = 0;\n    const initIndex = await createIndexArray(264, 267, 0);\n    for (const item of production_data) {\n        // node.warn(`item::${item.current_zone}`);\n        const current_zone = item.current_zone;\n        for (const indexItem of initIndex) {\n            // node.warn(`indexItem::${indexItem.index}`);\n            if (current_zone === (indexItem.index + 8)) {\n                indexItem.value += 1;\n            }\n        }\n    }\n    // node.warn(initIndex);\n    for (const index of initIndex) {\n        buf.writeUInt16BE(index.value);\n        const values = [(buf[0] * 256 + buf[1]), (buf[2] * 256) + buf[3]];\n        msg.payload = { \"value\": values, 'fc': fc, 'unitid': 1, 'address': index.address, 'quantity': addresses };\n        node.send(msg);\n        sum += index.value;\n    }\n    return sum;\n}\n\nasync function zone8() {\n    let sum4_8 = 0;\n    let typeN = 0;\n    let typeBC = 0;\n    let typeR = 0;\n\n    for (const item of production_data) {\n        if (item.current_zone === 8) {\n            if (item.unit_type === 'N') {\n                typeN += 1;\n            } else if (item.unit_type === 'B,C') {\n                typeBC += 1;\n            } else if (item.unit_type === 'R') {\n                typeR += 1;\n            }\n            sum4_8 += 1;\n        }\n    }\n    await sendSingle(typeN, 261);\n    await sendSingle(typeBC, 262);\n    await sendSingle(typeR, 263);\n    return sum4_8;\n}\n\nawait sendSingle(sumAct + sumAct_4_8, 313);\n// await sendSingle(sumAct_4_8, 3141);\n\nasync function sendSingle(sumAct, address) {\n    var fc = 6;\n    var sa = address;    //Modbus ADRRESS do want to write\n    var addresses = 1;     //Number of ADRRESS do want to write\n    var value = sumAct;    //Value do want to command\n    var buf = Buffer.alloc(4);\n    buf.writeUInt16BE(value);\n    var values = [(buf[0] * 256 + buf[1]), (buf[2] * 256) + buf[3]]\n    msg.payload = { \"value\": values, 'fc': fc, 'unitid': 1, 'address': sa, 'quantity': addresses };\n    // node.status({ fill: \"blue\", shape: \"ring\", text: msg.topic + \":\" + value });\n    node.send(msg);\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 580,
        "y": 140,
        "wires": [
            [
                "40d1cebb5f5f9db7"
            ]
        ]
    },
    {
        "id": "40d1cebb5f5f9db7",
        "type": "modbus-flex-write",
        "z": "b1b087dc079885be",
        "name": "",
        "showStatusActivities": false,
        "showErrors": false,
        "showWarnings": true,
        "server": "51a1a8e59174b5dc",
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 810,
        "y": 140,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "bc685239a7935e51",
        "type": "inject",
        "z": "b1b087dc079885be",
        "name": "",
        "props": [
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 150,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "7176503662b83091",
        "type": "function",
        "z": "b1b087dc079885be",
        "name": "Passed Station",
        "func": "const fc = 6;\nconst addresses = 1;     //Number of ADRRESS do want to write\nlet buf = Buffer.alloc(4);\nconst createIndexArray = global.get('createIndexArray');\nconst zone1_production_data = msg.zone1_production_data;\nconst production_data = msg.production_data;\nconst moment = global.get('moment_timezone');\nconst startOfToday = moment().startOf(\"day\");\nconst endOfToday = moment().endOf(\"day\");\n\nlet sum = 0;\n\nsum += await zone1();\nsum += await zone2_7();\nsum += await zone8();\nsum += await zone9_12();\n\n// --------------- zone 1 ---------------//\nasync function zone1() {\n    let sumzome1 = 0;\n    const initIndex_zone1 = await createIndexArray(268, 269, 0);\n    for (const item of zone1_production_data) {\n        if (item.exit_time !== null) {\n            const exitTime = moment(item.exit_time);\n            if (exitTime.isBetween(startOfToday, endOfToday, null, \"[]\")) {\n                for (const indexItem of initIndex_zone1) {\n                    if (item.lines.line_number === indexItem.index) {\n                        indexItem.value += 1;\n                    }\n                }\n            }\n        }\n    }\n\n    for (const index of initIndex_zone1) {\n        buf.writeUInt16BE(index.value);\n        const values = [(buf[0] * 256 + buf[1]), (buf[2] * 256) + buf[3]];\n        msg.payload = { \"value\": values, 'fc': fc, 'unitid': 1, 'address': index.address, 'quantity': addresses };\n        node.send(msg);\n        sumzome1 += index.value;\n    }\n    return sumzome1;\n}\n// --------------- end zone 1 ---------------//\n\n// --------------- zone 2 - 7 ---------------//\nasync function zone2_7() {\n    let sum2_7 = 0;\n    const initIndex = await createIndexArray(270, 275, 0);\n    for (const item of production_data) {\n        for (const zone of item.zones) {\n            if (zone.exit_time !== null && zone.zone_number >= 2 && zone.zone_number <= 7) {\n                const exitTime = moment(zone.exit_time);\n                if (exitTime.isBetween(startOfToday, endOfToday, null, \"[]\")) {\n                    for (const indexItem of initIndex) {\n                        if (zone.zone_number === indexItem.index + 1) {\n                            indexItem.value += 1;\n                        }\n                    }\n                }\n            }\n        }\n    }\n    // node.warn(initIndex);\n    for (const index of initIndex) {\n        buf.writeUInt16BE(index.value);\n        const values = [(buf[0] * 256 + buf[1]), (buf[2] * 256) + buf[3]];\n        msg.payload = { \"value\": values, 'fc': fc, 'unitid': 1, 'address': index.address, 'quantity': addresses };\n        node.send(msg);\n        sum2_7 += index.value;\n    }\n    return sum2_7;\n}\n// --------------- end zone 2 - 7 ---------------//\n\n// --------------- zone 8 ---------------//\nasync function zone8() {\n    let sum8 = 0;\n    let typeN = 0;\n    let typeBC = 0;\n    let typeR = 0;\n\n    for (const item of production_data) {\n        // node.warn(item);\n        for (const zone of item.zones) {\n            if (zone.exit_time !== null && zone.zone_number === 8) {\n                if (item.unit_type === 'N') {\n                    typeN += 1;\n                } else if (item.unit_type === 'B,C') {\n                    typeBC += 1;\n                } else if (item.unit_type === 'R') {\n                    typeR += 1;\n                }\n                sum8 += 1;\n            }\n        }\n    }\n    await sendSingle(typeN, 276)\n    await sendSingle(typeBC, 277)\n    await sendSingle(typeR, 278)\n    sum8 = typeN + typeBC + typeR;\n    return sum8\n}\nasync function zone9_12() {\n    let sum9_12 = 0;\n    const initIndex = await createIndexArray(279, 282, 0);\n    for (const item of production_data) {\n        for (const zone of item.zones) {\n            if (zone.exit_time !== null && zone.zone_number >= 9) {\n                const exitTime = moment(zone.exit_time);\n                if (exitTime.isBetween(startOfToday, endOfToday, null, \"[]\")) {\n                    for (const indexItem of initIndex) {\n                        if (zone.zone_number === indexItem.index + 8) {\n                            indexItem.value += 1;\n                        }\n                    }\n                }\n            }\n        }\n    }\n    // node.warn(initIndex);\n    for (const index of initIndex) {\n        buf.writeUInt16BE(index.value);\n        const values = [(buf[0] * 256 + buf[1]), (buf[2] * 256) + buf[3]];\n        msg.payload = { \"value\": values, 'fc': fc, 'unitid': 1, 'address': index.address, 'quantity': addresses };\n        node.send(msg);\n        sum9_12 += index.value;\n    }\n    return sum9_12;\n}\n\n\nconst average = sum / 15;\nawait sendSingle(average, 314)\n\n\nasync function sendSingle(average, address) {\n    const fc = 6;\n    const sa = address;    //Modbus ADRRESS do want to write\n    const addresses = 1;     //Number of ADRRESS do want to write\n    const value = average;    //Value do want to command\n    const buf = Buffer.alloc(4);\n    buf.writeUInt16BE(value);\n    const values = [(buf[0] * 256 + buf[1]), (buf[2] * 256) + buf[3]]\n    msg.payload = { \"value\": values, 'fc': fc, 'unitid': 1, 'address': sa, 'quantity': addresses };\n    // node.status({ fill: \"blue\", shape: \"ring\", text: msg.topic + \":\" + value });\n    node.send(msg);\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 220,
        "wires": [
            [
                "dfd277e691a99622"
            ]
        ]
    },
    {
        "id": "dfd277e691a99622",
        "type": "modbus-flex-write",
        "z": "b1b087dc079885be",
        "name": "",
        "showStatusActivities": false,
        "showErrors": false,
        "showWarnings": true,
        "server": "51a1a8e59174b5dc",
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 810,
        "y": 260,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "af40fcb7dbb2a854",
        "type": "modbus-flex-write",
        "z": "b1b087dc079885be",
        "name": "",
        "showStatusActivities": false,
        "showErrors": false,
        "showWarnings": true,
        "server": "51a1a8e59174b5dc",
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 1970,
        "y": 140,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "4f0d66690199088e",
        "type": "function",
        "z": "b1b087dc079885be",
        "name": "CT",
        "func": "const fc = 6;\nconst addresses = 1;     //Number of ADRRESS do want to write\nlet buf = Buffer.alloc(4);\nconst createIndexArray = global.get('createIndexArray');\nconst zone1ProductionData = msg.zone1_production_data;\nconst production_data = msg.production_data;\nconst moment = global.get('moment_timezone');\nconst startOfToday = moment().startOf(\"day\");\nconst endOfToday = moment().endOf(\"day\");\n// node.warn(production_data);\nlet sum = 0;\n\nsum += await zone1(zone1ProductionData).then(result => result.sumZone1);\n// node.warn(`sum:${sum}`);\nsum += await zone2_7(production_data).then(result => result.sum2_7);\n// node.warn(`sum:${sum}`);\nsum += await zone8(production_data);\n// node.warn(`sum:${sum}`);\nsum += await zone9_12(production_data).then(result => result.sum9_12);\n// node.warn(`sum:${sum}`);\n\nasync function zone1(zone1ProductionData){\n    let sumZone1 = 0;\n    let countLineZone1 = new Array(2).fill(0);\n    const initIndexZone1 = await createIndexArray(283, 284, 0);\n    for (const item of zone1ProductionData) {\n        if (item.exit_time !== null) {\n            const exitTime = moment(item.exit_time);\n            if (exitTime.isBetween(startOfToday, endOfToday, null, \"[]\")) {\n                for (const indexItem of initIndexZone1) {\n                    if (item.lines.line_number === indexItem.index) {\n                        const duration = moment.duration(moment(item.exit_time) - moment(item.entry_time)).asMinutes();\n                        indexItem.value += duration;\n                        countLineZone1[indexItem.index - 1] += 1;\n                    }\n                }\n            }\n        }\n    }\n\n    initIndexZone1.forEach((item, index) => {\n        if (item.value) {\n            item.value = Math.floor(Number((item.value / countLineZone1[index]).toFixed(1)));\n        } else {\n            item.value = 0;\n        }\n    });\n    // node.warn(initIndexZone1);\n    for (const index of initIndexZone1) {\n        const sa = index.address;    //Modbus ADRRESS do want to write\n        const value = index.value;    //Value do want to command\n        buf.writeUInt16BE(value);\n        const values = [(buf[0] * 256 + buf[1]), (buf[2] * 256) + buf[3]]\n        msg.payload = { \"value\": values, 'fc': fc, 'unitid': 1, 'address': sa, 'quantity': addresses };\n        node.send(msg);\n        sumZone1 += index.value;\n    }\n    return {sumZone1, countLineZone1};\n}\n\nasync function zone2_7(production_data){\n    let sum2_7 = 0;\n    let countLine2_7 = new Array(11).fill(0);\n    const initIndex = await createIndexArray(285, 290, 0);\n    for (const item of production_data) {\n        for (const zone of item.zones) {\n            if (zone.exit_time !== null && zone.zone_number >= 2 && zone.zone_number <= 7) {\n                const exitTime = moment(zone.exit_time);\n                if (exitTime.isBetween(startOfToday, endOfToday, null, \"[]\")) {\n                    for (const indexItem of initIndex) {\n                        if (zone.zone_number === indexItem.index + 1) {\n                            const duration = moment.duration(moment(zone.exit_time) - moment(zone.entry_time)).asMinutes();\n                            indexItem.value += duration;\n                            countLine2_7[indexItem.index - 1] += 1;\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n\n    // node.warn(count_line);\n    initIndex.forEach((item, index) => {\n        if (item.value) {\n            item.value = Math.floor(Number((item.value / countLine2_7[index]).toFixed(1)));\n        } else {\n            item.value = 0;\n        }\n    });\n    // node.warn(initIndex);\n    for (const index of initIndex) {\n        const sa = index.address;    //Modbus ADRRESS do want to write\n        const value = index.value;    //Value do want to command\n        buf.writeUInt16BE(value);\n        const values = [(buf[0] * 256 + buf[1]), (buf[2] * 256) + buf[3]]\n        msg.payload = { \"value\": values, 'fc': fc, 'unitid': 1, 'address': sa, 'quantity': addresses };\n        node.send(msg);\n        sum2_7 += index.value;\n    }\n    return {sum2_7, countLine2_7}\n}\n\nasync function zone8(production_data) {\n    let countLineN = 0;\n    let countLineBC = 0;\n    let countLineR = 0;\n    let typeN = 0;\n    let typeBC = 0;\n    let typeR = 0;\n    \n    for (const item of production_data) {\n        for (const zone of item.zones) {\n            if (zone.exit_time !== null && zone.zone_number === 8) {\n                \n                const exitTime = moment(zone.exit_time);\n                if (exitTime.isBetween(startOfToday, endOfToday, null, \"[]\")) {\n                    const duration = moment.duration(moment(zone.exit_time) - moment(zone.entry_time)).asMinutes();\n                    if (item.unit_type === 'N') {\n                        typeN += duration;\n                        countLineN += 1;\n                    } else if (item.unit_type === 'B,C') {\n                        typeBC += duration;\n                        countLineBC += 1;\n                    } else if (item.unit_type === 'R') {\n                        typeR += duration;\n                        countLineR += 1;\n                    }\n                }\n            }\n        }\n    }\n\n    // node.warn(`typeN:${typeN} ,countLineN:${countLineN}`);\n    // node.warn(`typeBC:${typeBC} ,countLineBC:${countLineBC}`);\n    // node.warn(`typeR:${typeR} ,countLineR:${countLineR}`);\n\n    let valueTypeN = 0;\n    let valueTypeBC = 0;\n    let valueTypeR = 0;\n    if (typeN > 0){\n        valueTypeN = Math.floor(Number((typeN / countLineN)));\n    } else {\n        valueTypeN = 0;\n    }\n    if (typeBC > 0) {\n        valueTypeBC = Math.floor(Number((typeBC / countLineBC)));\n    } else {\n        valueTypeBC = 0;\n    }\n    if (typeR > 0) {\n        valueTypeR = Math.floor(Number((typeR / countLineR)));\n    } else {\n        valueTypeR = 0;\n    }\n    // node.warn(`valueTypeN:${valueTypeN}`);\n    // node.warn(`valueTypeBC:${valueTypeBC}`);\n    // node.warn(`valueTypeR:${valueTypeR}`);\n    sendSingle(valueTypeN, 291);\n    sendSingle(valueTypeBC, 292);\n    sendSingle(valueTypeR, 293);\n    return (valueTypeN + valueTypeBC + valueTypeR)\n}\n\nasync function zone9_12(production_data){\n    let sum9_12 = 0;\n    let countLine9_12 = new Array(11).fill(0);\n    const initIndex = await createIndexArray(294, 297, 0);\n    for (const item of production_data) {\n        for (const zone of item.zones) {\n            if (zone.exit_time !== null && zone.zone_number >= 9) {\n                const exitTime = moment(zone.exit_time);\n                if (exitTime.isBetween(startOfToday, endOfToday, null, \"[]\")) {\n                    for (const indexItem of initIndex) {\n                        if (zone.zone_number === indexItem.index + 8) {\n                            const duration = moment.duration(moment(zone.exit_time) - moment(zone.entry_time)).asMinutes();\n                            indexItem.value += duration;\n                            countLine9_12[indexItem.index - 1] += 1;\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n\n    // node.warn(count_line);\n    initIndex.forEach((item, index) => {\n        if (item.value) {\n            item.value = Math.floor(Number((item.value / countLine9_12[index]).toFixed(1)));\n        } else {\n            item.value = 0;\n        }\n    });\n    // node.warn(initIndex);\n    for (const index of initIndex) {\n        const sa = index.address;    //Modbus ADRRESS do want to write\n        const value = index.value;    //Value do want to command\n        buf.writeUInt16BE(value);\n        const values = [(buf[0] * 256 + buf[1]), (buf[2] * 256) + buf[3]]\n        msg.payload = { \"value\": values, 'fc': fc, 'unitid': 1, 'address': sa, 'quantity': addresses };\n        node.send(msg);\n        sum9_12 += index.value;\n    }\n    return {sum9_12, countLine9_12}\n}\n\nconst average = sum / 15;\n// node.warn(`average:${average}`);\nawait sendSingle(average, 315)\nasync function sendSingle(average, address) {\n    const fc = 6;\n    const sa = address;    //Modbus ADRRESS do want to write\n    const addresses = 1;     //Number of ADRRESS do want to write\n    const value = average;    //Value do want to command\n    const buf = Buffer.alloc(4);\n    buf.writeUInt16BE(value);\n    const values = [(buf[0] * 256 + buf[1]), (buf[2] * 256) + buf[3]]\n    msg.payload = { \"value\": values, 'fc': fc, 'unitid': 1, 'address': sa, 'quantity': addresses };\n    // node.status({ fill: \"blue\", shape: \"ring\", text: msg.topic + \":\" + value });\n    node.send(msg);\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 260,
        "wires": [
            [
                "dfd277e691a99622"
            ]
        ]
    },
    {
        "id": "c43286871dab77e9",
        "type": "function",
        "z": "b1b087dc079885be",
        "name": "TT",
        "func": "const fc = 6;\nconst addresses = 1;     //Number of ADRRESS do want to write\nlet buf = Buffer.alloc(4);\nconst createIndexArray = global.get('createIndexArray');\nconst zone1_production_data = msg.zone1_production_data;\nconst production_data = msg.production_data;\nconst moment = global.get('moment_timezone');\nconst calculateTotalWorkMinutes = global.get('calculateTotalWorkMinutes');\nlet sumValue = 0;\n// node.warn(production_data);\nsumValue += await zone1(zone1_production_data);\nsumValue += await zone2_7(production_data);\nsumValue += await zone8(production_data);\nsumValue += await zone9_12(production_data);\n\nasync function zone1(zone1_production_data) {\n    let sumZone1 = 0;\n    const initIndex_zone1 = await createIndexArray(298, 299, 0);\n    for (const data of zone1_production_data) {\n        if (data?.latest_exit_times?.[0] === undefined || data?.latest_exit_times?.[1] === undefined) {\n            continue\n        }\n        for (const item of initIndex_zone1) {\n            if (data.line_number === item.index) {\n                const firstTime = moment(data.latest_exit_times[1]);\n                const secondTime = moment(data.latest_exit_times[0]);\n                // node.warn(`firstTime:${firstTime}`);\n                // node.warn(`secondTime:${secondTime}`);\n                const duration = await calculateTotalWorkMinutes(firstTime, secondTime);\n                // node.warn(`duration:${duration}`);\n                let positiveValue = Math.abs(duration);\n                let integerValue = Math.floor(positiveValue);\n                item.value = integerValue;\n            }\n        }\n    }\n    // node.warn(initIndex_zone1);\n    for (const index of initIndex_zone1) {\n        var sa = index.address;    //Modbus ADRRESS do want to write\n        var value = index.value;    //Value do want to command\n        buf.writeUInt16BE(value);\n        var values = [(buf[0] * 256 + buf[1]), (buf[2] * 256) + buf[3]]\n        msg.payload = { \"value\": values, 'fc': fc, 'unitid': 1, 'address': sa, 'quantity': addresses };\n        node.send(msg);\n        sumZone1 += index.value;\n    }\n    return sumZone1;\n}\n\nasync function zone2_7(production_data) {\n    // node.warn(production_data);\n    let sumZone2_7 = 0;\n    const initIndex = await createIndexArray(300, 305, 0);\n    for (const zone of production_data) {\n        if (zone.zone_number >= 2 && zone.zone_number <= 7) {\n            if (zone?.latest_exit_times?.[0] === undefined || zone?.latest_exit_times?.[1] === undefined) {\n                continue\n            }\n            for (const indexItem of initIndex) {\n                if (zone.zone_number === indexItem.index + 1) {\n                    const firstTime = moment(zone.latest_exit_times[0]);\n                    const secondTime = moment(zone.latest_exit_times[1]);\n                    const duration = await calculateTotalWorkMinutes(firstTime, secondTime);\n                    let positiveValue = Math.abs(duration);\n                    let integerValue = Math.floor(positiveValue);\n                    indexItem.value = integerValue;\n                }\n            }\n        }\n    }\n    // node.warn(initIndex);\n    for (const index of initIndex) {\n        var sa = index.address;    //Modbus ADRRESS do want to write\n        var value = index.value;    //Value do want to command\n        buf.writeUInt16BE(value);\n        var values = [(buf[0] * 256 + buf[1]), (buf[2] * 256) + buf[3]]\n        msg.payload = { \"value\": values, 'fc': fc, 'unitid': 1, 'address': sa, 'quantity': addresses };\n        node.send(msg);\n        sumZone2_7 += index.value;\n    }\n    return sumZone2_7;\n}\n\nasync function zone8(production_data) {\n    let sumZone8 = 0;\n    if (production_data.length === 0) {\n        await sendSingleValue(0, 306);\n        await sendSingleValue(0, 307);\n        await sendSingleValue(0, 308);\n    }\n    for (const zone of production_data) {\n        if (zone?.latest_exit_times?.[0] === undefined || zone?.latest_exit_times?.[1] === undefined) {\n            continue\n        }\n        if (zone.zone_number === 8) {\n            const firstTime = moment(zone.latest_exit_times[0]);\n            const secondTime = moment(zone.latest_exit_times[1]);\n            const duration = await calculateTotalWorkMinutes(firstTime, secondTime);\n            let positiveValue = Math.abs(duration);\n            let integerValue = Math.floor(positiveValue);\n            // node.warn(`unit_type:${zone.unit_type} , integerValue:${integerValue}`);\n            if (zone.unit_type === 'N') {\n                await sendSingleValue(integerValue, 306);\n            } else if (zone.unit_type === 'B,C') {\n                await sendSingleValue(integerValue, 307);\n            } else if (zone.unit_type === 'R') {\n                await sendSingleValue(integerValue, 308);\n            }\n            sumZone8 += integerValue;\n        }\n    }\n    return sumZone8;\n}\n\nasync function zone9_12(production_data) {\n    let sumZone9 = 0;\n    const initIndex = await createIndexArray(309, 312, 0);\n    for (const zone of production_data) {\n        if (zone?.latest_exit_times?.[0] === undefined || zone?.latest_exit_times?.[1] === undefined) {\n            continue\n        }\n        if (zone.zone_number >= 9) {\n            for (const indexItem of initIndex) {\n                if (zone.zone_number === indexItem.index + 8) {\n                    const firstTime = moment(zone.latest_exit_times[0]);\n                    const secondTime = moment(zone.latest_exit_times[1]);\n                    const duration = await calculateTotalWorkMinutes(firstTime, secondTime);\n                    let positiveValue = Math.abs(duration);\n                    let integerValue = Math.floor(positiveValue);\n                    indexItem.value = integerValue;\n                }\n            }\n        }\n    }\n\n    // node.warn(initIndex);\n    for (const index of initIndex) {\n        var sa = index.address;    //Modbus ADRRESS do want to write\n        var value = index.value;    //Value do want to command\n        buf.writeUInt16BE(value);\n        var values = [(buf[0] * 256 + buf[1]), (buf[2] * 256) + buf[3]]\n        msg.payload = { \"value\": values, 'fc': fc, 'unitid': 1, 'address': sa, 'quantity': addresses };\n        node.send(msg);\n        sumZone9 += index.value;\n    }\n    return sumZone9;\n}\n\nawait sendSingleValue(sumValue / 15, 316);\n\nasync function sendSingleValue(average, address) {\n    var fc = 6;\n    var sa = address;    //Modbus ADRRESS do want to write\n    var addresses = 1;     //Number of ADRRESS do want to write\n    var value = average;    //Value do want to command\n    var buf = Buffer.alloc(4);\n    buf.writeUInt16BE(value);\n    var values = [(buf[0] * 256 + buf[1]), (buf[2] * 256) + buf[3]]\n    msg.payload = { \"value\": values, 'fc': fc, 'unitid': 1, 'address': sa, 'quantity': addresses };\n    // node.status({ fill: \"blue\", shape: \"ring\", text: msg.topic + \":\" + value });\n    node.send(msg);\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 320,
        "wires": [
            [
                "3b4a857d5bce7c64"
            ]
        ]
    },
    {
        "id": "3b4a857d5bce7c64",
        "type": "modbus-flex-write",
        "z": "b1b087dc079885be",
        "name": "",
        "showStatusActivities": false,
        "showErrors": false,
        "showWarnings": true,
        "server": "51a1a8e59174b5dc",
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 810,
        "y": 320,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "ad053765f35cbec8",
        "type": "function",
        "z": "b1b087dc079885be",
        "name": "Speed",
        "func": "const fc = 16;\nconst addresses = 2;     //Number of ADRRESS do want to write\nlet buf = Buffer.alloc(4);\nconst createFloatIndexArray = global.get('createFloatIndexArray');\nconst zone1_production_data = msg.zone1_production_data;\nconst production_data = msg.production_data;\nconst moment = global.get('moment_timezone');\nconst startOfToday = moment().startOf(\"day\");\nconst endOfToday = moment().endOf(\"day\");\n\n//Speed A Line [Minute] (Block/min)\nawait sendSingleFloatValue('', 3107);\n//Speed B Line [Minute] (Block/min)\nawait sendSingleFloatValue(1.5, 3109);\n//Speed C Line [Minute] (Block/min)\nawait sendSingleFloatValue(1.5, 3111);\n//Speed A Line [Minute] (m/min)\nawait sendSingleFloatValue('', 3113);\n//Speed B Line [Minute] (m/min)\nawait sendSingleFloatValue('', 3115);\n//Speed C Line [Minute] (m/min)\nawait sendSingleFloatValue('', 3117);\n//Speed A Line [Hz]\nawait sendSingleFloatValue('', 3119);\n//Speed B Line [Hz]\nawait sendSingleFloatValue(27.41, 3121);\n//Speed C Line [Hz]\nawait sendSingleFloatValue(27.33, 3123);\n\nasync function sendSingleFloatValue(average, address) {\n    var fc = 16;\n    var sa = address;    //Modbus ADRRESS do want to write\n    var addresses = 2;     //Number of ADRRESS do want to write\n    var value = average;    //Value do want to command\n    var buf = Buffer.alloc(4);\n    buf.writeFloatBE(value);\n    var values = [(buf[0] * 256 + buf[1]), (buf[2] * 256) + buf[3]]\n    msg.payload = { \"value\": values, 'fc': fc, 'unitid': 1, 'address': sa, 'quantity': addresses };\n    // node.status({ fill: \"blue\", shape: \"ring\", text: msg.topic + \":\" + value });\n    node.send(msg);\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1730,
        "y": 360,
        "wires": [
            [
                "de34c907ff1a6dd9"
            ]
        ]
    },
    {
        "id": "de34c907ff1a6dd9",
        "type": "modbus-flex-write",
        "z": "b1b087dc079885be",
        "name": "",
        "showStatusActivities": false,
        "showErrors": false,
        "server": "51a1a8e59174b5dc",
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "x": 2030,
        "y": 360,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "0c20f44ddeeacab5",
        "type": "function",
        "z": "b1b087dc079885be",
        "name": "% InStage",
        "func": "const fc = 6;\nconst addresses = 1;     //Number of ADRRESS do want to write\nlet buf = Buffer.alloc(4);\nconst createIndexArray = global.get('createIndexArray');\nconst zone1_production_data = msg.zone1_production_data;\nconst production_data = msg.production_data;\nconst maxBlockPerZone = global.get('maxBlockPerZone');\n// const maxBlockList = Object.values(maxBlockPerZone);    \nconst maxBlockArray = Object.values(maxBlockPerZone);\nlet sum = 0;\nlet sum_4_8 = 0;\n\nconst initIndex_zone1 = await createIndexArray(3040, 3041, 0);\nfor (const item of zone1_production_data) {\n    const current_zone = item.lines.line_number;\n    for (const indexItem of initIndex_zone1) {\n        if (current_zone === indexItem.index) {\n            indexItem.value += 1;\n        }\n    }\n}\n\nconst initIndex = await createIndexArray(3042, 3052, 0);\nfor (const item of production_data) {\n    const current_zone = item.current_zone;\n    for (const indexItem of initIndex) {\n        if (current_zone === (indexItem.index + 1)) {\n            indexItem.value += 1;\n        }\n    }\n}\n\n\ninitIndex_zone1.forEach((item, index) => {\n    // node.warn(item);\n    // node.warn(maxBlockArray[index]);\n    item.value = Math.floor((item.value / maxBlockArray[index]) * 100);\n});\n\ninitIndex.forEach((item, index) => {\n    // node.warn(item);\n    // node.warn(maxBlockArray[index]);\n    item.value = Math.floor((item.value / maxBlockArray[index + 2]) * 100);\n});\n\n\nfor (const index of initIndex_zone1) {\n    buf.writeInt16BE(index.value);\n    const values = [(buf[0] * 256 + buf[1]), (buf[2] * 256) + buf[3]];\n    msg.payload = { \"value\": values, 'fc': fc, 'unitid': 1, 'address': index.address, 'quantity': addresses };\n    node.send(msg);\n    sum += index.value;\n}\n\nfor (const index of initIndex) {\n    buf.writeInt16BE(index.value);\n    const values = [(buf[0] * 256 + buf[1]), (buf[2] * 256) + buf[3]];\n    msg.payload = { \"value\": values, 'fc': fc, 'unitid': 1, 'address': index.address, 'quantity': addresses };\n    node.send(msg);\n    if (index.index == 3 || index.index == 7) {\n        sum_4_8 += index.value;\n    } else {\n        sum += index.value;\n    }\n}\n\nconst average_4_8 = (sum_4_8 / initIndex.length).toFixed(2);\nconst average = (sum / initIndex.length).toFixed(2);\n\nawait sendSummaryInStage(average, 3137);\nawait sendSummaryInStage(average_4_8, 3143);\n\nasync function sendSummaryInStage(average, address) {\n    var fc = 16;\n    var sa = address;    //Modbus ADRRESS do want to write\n    var addresses = 2;     //Number of ADRRESS do want to write\n    var value = average;    //Value do want to command\n    var buf = Buffer.alloc(4);\n    buf.writeFloatBE(value);\n    var values = [(buf[0] * 256 + buf[1]), (buf[2] * 256) + buf[3]]\n    msg.payload = { \"value\": values, 'fc': fc, 'unitid': 1, 'address': sa, 'quantity': addresses };\n    node.status({ fill: \"blue\", shape: \"ring\", text: msg.topic + \":\" + value });\n    node.send(msg);\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1750,
        "y": 140,
        "wires": [
            [
                "af40fcb7dbb2a854"
            ]
        ]
    },
    {
        "id": "e9a85bd778ae7df5",
        "type": "function",
        "z": "b1b087dc079885be",
        "name": "Query Data",
        "func": "const db = global.get(\"connetion_mongo\");\nconst collectionEnum = global.get(\"CollectionEnum\");\nconst zoneEnum = global.get('ZoneEnum');\nconst byPassEnum = global.get(\"ByPassEnum\");\nconst moment = global.get('moment_timezone');\n// const yesterday = moment().subtract(1, \"days\").toDate();\nconst today = moment().startOf('day').toDate();\ntry {\n    const query = {\n        $or: [\n            { is_active: true },\n            { exit_time: { $gt: today } }\n        ]\n    }\n    const payload_zone1 = await db.collection(collectionEnum.ZONE1_PRODUCTION_DATA).find(query).toArray();\n    const payload = await db.collection(collectionEnum.PRODUCTION_DATA).find(query).toArray();\n    // node.warn(payload);\n\n    msg.production_data = payload;\n    msg.zone1_production_data = payload_zone1;\n    return msg\n} catch (error) {\n    node.warn(error);\n};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 180,
        "wires": [
            [
                "7176503662b83091",
                "f708b4bf524a9fca"
            ]
        ]
    },
    {
        "id": "5473e4d3a989aac1",
        "type": "function",
        "z": "b1b087dc079885be",
        "name": "Target and output",
        "func": "const fc = 16;\nconst addresses = 2;     //Number of ADRRESS do want to write\nlet buf = Buffer.alloc(4);\nconst calculateTotalWorkMinutes = global.get('calculateTotalWorkMinutes');\n\n//Send Target\nconst target = 12;\nawait sendSingleFloatValue(12, 3125)\n\n//innit variable\nconst createFloatIndexArray = global.get('createFloatIndexArray');\nconst production_data = msg.production_data;\nconst moment = global.get('moment_timezone');\nconst startOfToday = moment().startOf(\"day\");\nconst endOfToday = moment().endOf(\"day\");\n\nconst filteredAndSortedData = {\n    N: [],\n    B: [],\n    S: [],\n    A: []\n};\n\nproduction_data.forEach(item => {\n    if (item.weight !== null && item.exit_time !== null) {\n        const type = item.qr_data_detail.data.type;\n        filteredAndSortedData[type].push(item);\n    }\n});\n\nnode.warn(filteredAndSortedData);\n\n// Object.keys(filteredAndSortedData).forEach(type => {\n//     filteredAndSortedData[type].sort((a, b) => moment(b.exit_time).diff(moment(a.exit_time)));\n// });\nObject.keys(filteredAndSortedData).forEach(async (type) => {\n    await Promise.all(\n        filteredAndSortedData[type].map(async (item) => {\n            item.workMinutes = await calculateTotalWorkMinutes(\n                moment(item.entry_time),\n                moment(item.exit_time)\n            );\n        })\n    );\n\n    filteredAndSortedData[type].sort((a, b) => b.workMinutes - a.workMinutes);\n});\n\n\nconst averageTimes = {};\n\nObject.keys(filteredAndSortedData).forEach(type => {\n    const selectedItems = filteredAndSortedData[type].slice(0, 3);\n    const totalDuration = selectedItems.reduce(async (total, item) => {\n        const entryTime = moment(item.entry_time);\n        const exitTime = moment(item.exit_time);\n        // const duration = exitTime.diff(entryTime, 'minutes');\n        const duration = await calculateTotalWorkMinutes(entryTime, exitTime);\n        return total + duration;\n    }, 0);\n    if (selectedItems.length === 0){\n        averageTimes[type] = 0;\n    } else {\n        const averageDuration = totalDuration / selectedItems.length;\n        averageTimes[type] = averageDuration;\n    }\n    \n});\n\n\n\n\nnode.warn(averageTimes);\n\nconst initIndex = await createFloatIndexArray(3127, 3133, 0);\n\nObject.keys(averageTimes).forEach((type, index) => {\n    initIndex[index].value = averageTimes[type];\n});\n// node.warn(initIndex);\nfor (const index of initIndex) {\n    var sa = index.address;    //Modbus ADRRESS do want to write\n    var value = index.value;    //Value do want to command\n    buf.writeFloatBE(value);\n    var values = [(buf[0] * 256 + buf[1]), (buf[2] * 256) + buf[3]]\n    msg.payload = { \"value\": values, 'fc': fc, 'unitid': 1, 'address': sa, 'quantity': addresses };\n    node.send(msg);\n}\n\n\n\nasync function sendSingleFloatValue(average, address) {\n    var fc = 16;\n    var sa = address;    //Modbus ADRRESS do want to write\n    var addresses = 2;     //Number of ADRRESS do want to write\n    var value = average;    //Value do want to command\n    var buf = Buffer.alloc(4);\n    buf.writeFloatBE(value);\n    var values = [(buf[0] * 256 + buf[1]), (buf[2] * 256) + buf[3]]\n    msg.payload = { \"value\": values, 'fc': fc, 'unitid': 1, 'address': sa, 'quantity': addresses };\n    // node.status({ fill: \"blue\", shape: \"ring\", text: msg.topic + \":\" + value });\n    node.send(msg);\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1770,
        "y": 200,
        "wires": [
            [
                "f01056d15e05cd10"
            ]
        ]
    },
    {
        "id": "f01056d15e05cd10",
        "type": "modbus-flex-write",
        "z": "b1b087dc079885be",
        "name": "",
        "showStatusActivities": false,
        "showErrors": false,
        "showWarnings": true,
        "server": "51a1a8e59174b5dc",
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 1970,
        "y": 200,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "f2a3839a2beb50f5",
        "type": "function",
        "z": "b1b087dc079885be",
        "name": "Query Data",
        "func": "const db = global.get(\"connetion_mongo\");\nconst collectionEnum = global.get(\"CollectionEnum\");\nconst zoneEnum = global.get('ZoneEnum');\nconst byPassEnum = global.get(\"ByPassEnum\");\nconst moment = global.get('moment_timezone');\nconst yesterday = moment().subtract(1, \"days\").toDate();\ntry {\n    const pipeline_zone1 = [\n        {\n            $sort: { \"exit_time\": -1 }\n        },\n        {\n            $group: {\n                _id: \"$lines.line_number\",\n                latest_exit_times: { $push: \"$exit_time\" }\n            }\n        },\n        {\n            $sort: { \"_id\": 1 }\n        },\n        {\n            $project: {\n                _id: 0,\n                line_number: \"$_id\",\n                latest_exit_times: { $slice: [\"$latest_exit_times\", 2] }\n            }\n        }\n    ]\n    // node.warn(JSON.stringify(pipeline_zone1));\n    const results_zone1 = await db.collection(collectionEnum.ZONE1_PRODUCTION_DATA).aggregate(pipeline_zone1).toArray();\n\n\n    const pipeline = [\n        {\n            \"$unwind\": \"$zones\"\n        },\n        {\n            \"$match\": {\n                \"zones.exit_time\": { \"$ne\": null }\n            }\n        },\n        {\n            \"$sort\": {\n                \"zones.exit_time\": -1\n            }\n        },\n        {\n            \"$group\": {\n                \"_id\": {\n                    \"zone_number\": \"$zones.zone_number\",\n                    \"unit_type\": {\n                        \"$cond\": {\n                            \"if\": { \"$eq\": [\"$zones.zone_number\", 8] },\n                            \"then\": \"$unit_type\",\n                            \"else\": null\n                        }\n                    }\n                },\n                \"latest_exit_times\": {\n                    \"$push\": \"$zones.exit_time\"\n                }\n            }\n        },\n        {\n            \"$sort\": {\n                \"_id.zone_number\": 1\n            }\n        },\n        {\n            \"$project\": {\n                \"_id\": 0,\n                \"zone_number\": \"$_id.zone_number\",\n                \"unit_type\": \"$_id.unit_type\",\n                \"latest_exit_times\": {\n                    \"$slice\": [\n                        \"$latest_exit_times\",\n                        2\n                    ]\n                }\n            }\n        }\n    ];\n    // node.warn(pipeline);\n    const results = await db.collection(collectionEnum.PRODUCTION_DATA).aggregate(pipeline).toArray();\n    // node.warn(JSON.stringify(results_zone1));\n    // node.warn(JSON.stringify(results));\n    msg.zone1_production_data = results_zone1;\n    msg.production_data = results;\n    return msg\n} catch (error) {\n    node.warn(error);\n};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 320,
        "wires": [
            [
                "c43286871dab77e9"
            ]
        ]
    },
    {
        "id": "f708b4bf524a9fca",
        "type": "function",
        "z": "b1b087dc079885be",
        "name": "Unit/Day",
        "func": "const fc = 6;\nconst addresses = 1;     //Number of ADRRESS do want to write\nlet buf = Buffer.alloc(4);\nconst createIndexArray = global.get('createIndexArray');\n// const zone1_production_data = msg.zone1_production_data;\nconst production_data = msg.production_data;\nconst moment = global.get('moment_timezone');\nconst startOfToday = moment().startOf(\"day\");\nconst endOfToday = moment().endOf(\"day\");\n\n\nlet lineA = 0;\nlet lineB = 0;\nlet lineC = 0;\nfor (const item of production_data) {\n    for (const zone of item.zones) {\n        const exitTime = moment(zone.exit_time);\n        switch (zone.zone_number) {\n            case 2:\n                if (exitTime.isBetween(startOfToday, endOfToday, null, \"[]\")) {\n                    lineA += 1;\n                }\n                break;\n            case 3:\n                if (exitTime.isBetween(startOfToday, endOfToday, null, \"[]\")) {\n                    lineB += 1;\n                }\n                break;\n            case 9:\n                if (exitTime.isBetween(startOfToday, endOfToday, null, \"[]\")) {\n                    lineC += 1;\n                }\n                break;\n        }\n    }\n}\n// node.warn(`lineA:${lineA}`);\n// node.warn(`lineA:${lineB}`);\n// node.warn(`lineA:${lineC}`);\nawait sendSingle(lineA, 343);\nawait sendSingle(lineB, 344);\nawait sendSingle(lineC, 345);\n\n\n\n\nasync function sendSingle(item, address) {\n    const fc = 6;\n    const sa = address;    //Modbus ADRRESS do want to write\n    const addresses = 1;     //Number of ADRRESS do want to write\n    const value = item;    //Value do want to command\n    const buf = Buffer.alloc(4);\n    buf.writeUInt16BE(value);\n    const values = [(buf[0] * 256 + buf[1]), (buf[2] * 256) + buf[3]]\n    msg.payload = { \"value\": values, 'fc': fc, 'unitid': 1, 'address': sa, 'quantity': addresses };\n    // node.status({ fill: \"blue\", shape: \"ring\", text: msg.topic + \":\" + value });\n    node.send(msg);\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 580,
        "y": 180,
        "wires": [
            [
                "dfd277e691a99622"
            ]
        ]
    },
    {
        "id": "09cfecf165f5d095",
        "type": "function",
        "z": "b1b087dc079885be",
        "name": "CT(Backup)",
        "func": "const fc = 16;\nconst addresses = 2;     //Number of ADRRESS do want to write\nlet buf = Buffer.alloc(4);\nconst createFloatIndexArray = global.get('createFloatIndexArray');\nconst zone1_production_data = msg.zone1_production_data;\nconst production_data = msg.production_data;\nconst moment = global.get('moment_timezone');\nconst startOfToday = moment().startOf(\"day\");\nconst endOfToday = moment().endOf(\"day\");\n\nlet sum = 0;\nlet count_line_zone1 = new Array(2).fill(0);\nconst initIndex_zone1 = await createFloatIndexArray(3053, 3055, 0);\nfor (const item of zone1_production_data) {\n    if (item.exit_time !== null) {\n        const exitTime = moment(item.exit_time);\n        if (exitTime.isBetween(startOfToday, endOfToday, null, \"[]\")) {\n            for (const indexItem of initIndex_zone1) {\n                if (item.lines.line_number === indexItem.index) {\n                    const duration = moment.duration(moment(item.exit_time) - moment(item.entry_time)).asMinutes();\n                    indexItem.value += duration;\n                    count_line_zone1[indexItem.index - 1] += 1;\n                }\n            }\n        }\n    }\n}\n\ninitIndex_zone1.forEach((item, index) => {\n    if (item.value){\n        item.value = Number((item.value / count_line_zone1[index]).toFixed(1));\n    } else {\n        item.value = 0;\n    }\n});\n\nfor (const index of initIndex_zone1) {\n    var sa = index.address;    //Modbus ADRRESS do want to write\n    var value = index.value;    //Value do want to command\n    buf.writeFloatBE(value);\n    var values = [(buf[0] * 256 + buf[1]), (buf[2] * 256) + buf[3]]\n    msg.payload = { \"value\": values, 'fc': fc, 'unitid': 1, 'address': sa, 'quantity': addresses };\n    node.send(msg);\n    sum += index.value;\n}\n\nlet count_line = new Array(11).fill(0);\nconst initIndex = await createFloatIndexArray(3057, 3077, 0);\nfor (const item of production_data) {\n    for (const zone of item.zones){\n        if (zone.exit_time !== null){\n            const exitTime = moment(zone.exit_time);\n            if (exitTime.isBetween(startOfToday, endOfToday, null, \"[]\")) {\n                for (const indexItem of initIndex) {\n                    if (zone.zone_number === indexItem.index + 1){\n                        const duration = moment.duration(moment(zone.exit_time) - moment(zone.entry_time)).asMinutes();\n                        indexItem.value += duration;\n                        count_line[indexItem.index - 1] += 1;\n                    }\n                }\n            }\n        }\n    }\n}\n\n\n// node.warn(count_line);\ninitIndex.forEach((item, index) => {\n    if (item.value) {\n        item.value = Number((item.value / count_line[index]).toFixed(1));\n    } else {\n        item.value = 0;\n    }\n});\n// node.warn(initIndex);\nfor (const index of initIndex) {\n    var sa = index.address;    //Modbus ADRRESS do want to write\n    var value = index.value;    //Value do want to command\n    buf.writeFloatBE(value);\n    var values = [(buf[0] * 256 + buf[1]), (buf[2] * 256) + buf[3]]\n    msg.payload = { \"value\": values, 'fc': fc, 'unitid': 1, 'address': sa, 'quantity': addresses };\n    node.send(msg);\n    sum += index.value;\n}\n\n\nlet nonZeroCountZone1 = count_line_zone1.reduce((acc, value) => {\n    if (value !== 0) {\n        acc += 1;\n    }\n    return acc;\n}, 0);\n\nlet nonZeroCount = count_line.reduce((acc, value) => {\n    if (value !== 0) {\n        acc += 1;\n    }\n    return acc;\n}, 0);\nconst average = sum / (nonZeroCountZone1 + nonZeroCount);\nawait sendSummaryInStage(sum, 3147)\nasync function sendSummaryInStage(average, address) {\n    var fc = 16;\n    var sa = address;    //Modbus ADRRESS do want to write\n    var addresses = 2;     //Number of ADRRESS do want to write\n    var value = average;    //Value do want to command\n    var buf = Buffer.alloc(4);\n    buf.writeFloatBE(value);\n    var values = [(buf[0] * 256 + buf[1]), (buf[2] * 256) + buf[3]]\n    msg.payload = { \"value\": values, 'fc': fc, 'unitid': 1, 'address': sa, 'quantity': addresses };\n    node.status({ fill: \"blue\", shape: \"ring\", text: msg.topic + \":\" + value });\n    node.send(msg);\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1750,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "0286e57d4ac4d8eb",
        "type": "function",
        "z": "b1b087dc079885be",
        "name": "TT(Back up)",
        "func": "const fc = 16;\nconst addresses = 2;     //Number of ADRRESS do want to write\nlet buf = Buffer.alloc(4);\nconst createFloatIndexArray = global.get('createFloatIndexArray');\nconst zone1_production_data = msg.zone1_production_data;\nconst production_data = msg.production_data;\nconst moment = global.get('moment_timezone');\nconst startOfToday = moment().startOf(\"day\");\nconst endOfToday = moment().endOf(\"day\");\nconst calculateTotalWorkMinutes = global.get('calculateTotalWorkMinutes');\n\nconst initIndex_zone1 = await createFloatIndexArray(3079, 3081, 0);\nconst timeDifferences_zone1 = zone1_production_data.map(async (item) => {\n    const firstTime = moment(item.latest_entry_times[0]);\n    const secondTime = moment(item.latest_entry_times[1]);\n    // const duration = Math.abs(secondTime.diff(firstTime)) / 60000;\n    const duration = await calculateTotalWorkMinutes(firstTime, secondTime);\n    return Number(duration.toFixed(2));\n});\n\ninitIndex_zone1.forEach((item, index) => {\n    item.value = timeDifferences_zone1[index];\n});\n// node.warn(initIndex_zone1);\nfor (const index of initIndex_zone1) {\n    var sa = index.address;    //Modbus ADRRESS do want to write\n    var value = index.value;    //Value do want to command\n    buf.writeFloatBE(value);\n    var values = [(buf[0] * 256 + buf[1]), (buf[2] * 256) + buf[3]]\n    msg.payload = { \"value\": values, 'fc': fc, 'unitid': 1, 'address': sa, 'quantity': addresses };\n    node.send(msg);\n}\n\n\nconst initIndex = await createFloatIndexArray(3083, 3103, 0);\nconst timeDifferences = production_data.map(async (item) => {\n    const firstTime = moment(item.latest_entry_times[0]);\n    const secondTime = moment(item.latest_entry_times[1]);\n    // const duration = Math.abs(secondTime.diff(firstTime)) / 60000;\n    const duration = await calculateTotalWorkMinutes(firstTime, secondTime);\n    return Number(duration.toFixed(2));\n});\n\ninitIndex.forEach((item, index) => {\n    item.value = timeDifferences[index];\n});\n// node.warn(initIndex);\nfor (const index of initIndex) {\n    var sa = index.address;    //Modbus ADRRESS do want to write\n    var value = index.value;    //Value do want to command\n    buf.writeFloatBE(value);\n    var values = [(buf[0] * 256 + buf[1]), (buf[2] * 256) + buf[3]]\n    msg.payload = { \"value\": values, 'fc': fc, 'unitid': 1, 'address': sa, 'quantity': addresses };\n    node.send(msg);\n}\n\n\n// รวมผลรวมของค่า value ในอาร์เรย์ a และ b\nconst allValues = [...initIndex_zone1, ...initIndex].map(item => item.value);\nconst sumValues = allValues.reduce((total, value) => total + value, 0);\n\n// หาค่าเฉลี่ย\nconst average = sumValues / allValues.length;\n\n\nawait sendSingleFloatValue(Number(average.toFixed(2)), 3149);\n\n\n\nasync function sendSingleFloatValue(average, address) {\n    var fc = 16;\n    var sa = address;    //Modbus ADRRESS do want to write\n    var addresses = 2;     //Number of ADRRESS do want to write\n    var value = average;    //Value do want to command\n    var buf = Buffer.alloc(4);\n    buf.writeFloatBE(value);\n    var values = [(buf[0] * 256 + buf[1]), (buf[2] * 256) + buf[3]]\n    msg.payload = { \"value\": values, 'fc': fc, 'unitid': 1, 'address': sa, 'quantity': addresses };\n    // node.status({ fill: \"blue\", shape: \"ring\", text: msg.topic + \":\" + value });\n    node.send(msg);\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1750,
        "y": 300,
        "wires": [
            []
        ]
    },
    {
        "id": "1e09f0ae2bc16423",
        "type": "comment",
        "z": "b1b087dc079885be",
        "name": "MJ Unit Accumulate",
        "info": "",
        "x": 230,
        "y": 400,
        "wires": []
    },
    {
        "id": "2d75c73e436d9f23",
        "type": "function",
        "z": "b1b087dc079885be",
        "name": "Query Data",
        "func": "const db = global.get(\"connetion_mongo\");\nconst collectionEnum = global.get(\"CollectionEnum\");\nconst zoneEnum = global.get('ZoneEnum');\nconst byPassEnum = global.get(\"ByPassEnum\");\nconst moment = global.get('moment_timezone');\n//Month\nconst startDateMonth = moment().startOf('month').toDate();\nconst endDateMonth = moment().endOf('month').toDate();\n//Year\nconst startDateYear = moment().startOf('year').toDate();\nconst endDateYear = moment().endOf('year').toDate();\n\ntry {\n    const payloadYear = await db.collection(collectionEnum.PRODUCTION_DATA).find({\n        $and: [\n            { entry_time: { $gte: startDateYear } },\n            { entry_time: { $lte: endDateYear } }\n        ]\n    }).toArray();    \n    const currentMonth = moment().format('YYYY-MM');\n    const month = payloadYear.filter(item => moment(item.entry_time).format('YYYY-MM') === currentMonth)\n    const currentDate = moment();\n    const day = month.filter(item => moment(item.entry_time).isSame(currentDate, 'day'));\n\n    msg.year = payloadYear;\n    msg.month = month;\n    msg.day = day;\n\n    return msg\n} catch (error) {\n    node.warn(error);\n};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 440,
        "wires": [
            [
                "13c8a533151fa403",
                "802414e806421fe9"
            ]
        ]
    },
    {
        "id": "13c8a533151fa403",
        "type": "function",
        "z": "b1b087dc079885be",
        "name": "MJ Unit Accumulate",
        "func": "const createIndexArray = global.get('createIndexArray');\nconst moment = global.get('moment_timezone');\nconst startOfToday = moment().startOf(\"day\");\nconst endOfToday = moment().endOf(\"day\");\nconst calculateTotalWorkMinutes = global.get('calculateTotalWorkMinutes');\n\nconst year = msg.year;\nconst month = msg.month;\nconst day = msg.day;\n// node.warn(`year:${year.length} , month:${month}, day:${day}`);\n\nawait sendSingleValue(year.length, 317);\nawait sendSingleValue(month.length, 318);\nawait sendSingleValue(day.length, 322);\n\nasync function sendSingleValue(value, address) {\n    const fc = 6;\n    const addresses = 1;     //Number of ADRRESS do want to write\n    let buf = Buffer.alloc(4);\n    buf.writeUInt16BE(value);\n    const values = [(buf[0] * 256 + buf[1]), (buf[2] * 256) + buf[3]];\n    msg.payload = { \"value\": values, 'fc': fc, 'unitid': 1, 'address': address, 'quantity': addresses };\n    node.send(msg);\n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 440,
        "wires": [
            [
                "fcdc520c470aed89"
            ]
        ]
    },
    {
        "id": "fcdc520c470aed89",
        "type": "modbus-flex-write",
        "z": "b1b087dc079885be",
        "name": "",
        "showStatusActivities": false,
        "showErrors": false,
        "showWarnings": true,
        "server": "51a1a8e59174b5dc",
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 850,
        "y": 440,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "b7edb055a66ed593",
        "type": "function",
        "z": "b1b087dc079885be",
        "name": "To_INT16",
        "func": "const count =7;   //Num of Read\nconst buf = Buffer.from(msg.payload.buffer);\n\nif(count >=1){\nconst value = buf.readUint16BE();\nmsg.value = value;\n//msg.value = value;\n}\nelse{\n    msg.value =0;\n}\n\nif(count >=2){\nconst value2 = buf.readUint16BE(2);\nmsg.value2 = value2;\n//msg.value2 = value2;\n}\nelse{\n    msg.value2 =0;\n}\n\nif(count >=3){\nconst value3 = buf.readUint16BE(4);\nmsg.value3 = value3;\n//msg.value3 = value3;\n}\nelse{\n    msg.value3 =0;\n}\n\n\nif(count >=4){\nconst value4 = buf.readUint16BE(6);\nmsg.value4 = value4;\n//msg.value4 = value4;\n}\nelse{\n    msg.value4 =0;\n}\n\nif(count >=5){\nconst value5 = buf.readUint16BE(8);\nmsg.value5 = value5;\n//msg.value5 = value5;\n}\nelse{\n    msg.value5 =0;\n}\n\n\nif(count >=6){\nconst value6 = buf.readUint16BE(10);\nmsg.value6 = value6;\n//msg.value6 = value6;\n}\nelse{\n    msg.value6 =0;\n}\n\nif (count >= 7) {\n    const value7 = buf.readUint16BE(10);\n    msg.value7 = value7;\n    //msg.value6 = value6;\n}\nelse {\n    msg.value7 = 0;\n}\n\nif (count >= 8) {\n    const value8 = buf.readUint16BE(10);\n    msg.value8 = value8;\n    //msg.value6 = value6;\n}\nelse {\n    msg.value8 = 0;\n}\n\n\n\nif (count >= 9) {\n    const value9 = buf.readUint16BE(10);\n    msg.value9 = value9;\n    //msg.value6 = value6;\n}\nelse {\n    msg.value9 = 0;\n}\n\n\n\nif (count >= 10) {\n    const value10 = buf.readUint16BE(10);\n    msg.value10 = value10;\n    //msg.value6 = value6;\n}\nelse {\n    msg.value10 = 0;\n}\n\n\n\nif (count >= 11) {\n    const value11 = buf.readUint16BE(10);\n    msg.value11 = value11;\n    //msg.value6 = value6;\n}\nelse {\n    msg.value11 = 0;\n}\n\n\nif (count >= 12) {\n    const value12 = buf.readUint16BE(10);\n    msg.value12 = value12;\n    //msg.value6 = value6;\n}\nelse {\n    msg.value12 = 0;\n}\n\n\nif (count >= 13) {\n    const value13 = buf.readUint16BE(10);\n    msg.value13 = value13;\n    //msg.value6 = value6;\n}\nelse {\n    msg.value13 = 0;\n}\n\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1940,
        "y": 560,
        "wires": [
            [
                "94dc0678e5c1e8b9"
            ]
        ]
    },
    {
        "id": "d75ed17ddb5edaf8",
        "type": "inject",
        "z": "b1b087dc079885be",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "3",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1710,
        "y": 480,
        "wires": [
            [
                "1b4d021111f9d873"
            ]
        ]
    },
    {
        "id": "1b4d021111f9d873",
        "type": "function",
        "z": "b1b087dc079885be",
        "name": "",
        "func": "var fc=3;\nvar sa=323;          //start address base0\nvar addresses=10;   //Number of word address\n\nmsg.payload={value: msg.payload, 'fc': fc, 'unitid': 1, 'address': sa , 'quantity': addresses };\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1720,
        "y": 520,
        "wires": [
            [
                "05107e55dced4ba7"
            ]
        ]
    },
    {
        "id": "05107e55dced4ba7",
        "type": "modbus-flex-getter",
        "z": "b1b087dc079885be",
        "name": "",
        "showStatusActivities": false,
        "showErrors": false,
        "showWarnings": true,
        "logIOActivities": false,
        "server": "51a1a8e59174b5dc",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 1740,
        "y": 560,
        "wires": [
            [],
            [
                "b7edb055a66ed593"
            ]
        ]
    },
    {
        "id": "94dc0678e5c1e8b9",
        "type": "function",
        "z": "b1b087dc079885be",
        "name": "",
        "func": "node.status({ fill: \"blue\", shape: \"ring\", text: \"D1\" + \":\" + msg.value + \"  D2\" + \":\" + msg.value2 + \"  D3\" + \":\" + msg.value3 + \"  D4\" + \":\" + msg.value4 + \"  D5\" + \":\" + msg.value5 + \"  D6\" + \":\" + msg.value6 + \"  D7\" + \":\" + msg.value7 });  \nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2140,
        "y": 560,
        "wires": [
            []
        ]
    },
    {
        "id": "c9f3689e64485cfe",
        "type": "comment",
        "z": "b1b087dc079885be",
        "name": "Avg. Productive (min/u)",
        "info": "",
        "x": 620,
        "y": 500,
        "wires": []
    },
    {
        "id": "802414e806421fe9",
        "type": "function",
        "z": "b1b087dc079885be",
        "name": "Avg. Productive",
        "func": "const createIndexArray = global.get('createIndexArray');\nconst moment = global.get('moment_timezone');\nconst startOfToday = moment().startOf(\"day\");\nconst endOfToday = moment().endOf(\"day\");\nconst calculateTotalWorkMinutes = global.get('calculateTotalWorkMinutes');\n\nconst month = msg.month;\n// node.warn(month);\nconst filterMonth = month.filter(item => item.entry_time !== null && item.exit_time !== null);\n// node.warn(filterMonth);\n// สร้างออบเจ็กต์เพื่อเก็บค่าเฉลี่ยของแต่ละ type\nconst result = [\n    {\n        type: \"N\",\n        count: 0,\n        avg: 0\n    },\n    {\n        type: \"B,C\",\n        count: 0,\n        avg: 0\n    },\n    {\n        type: \"R\",\n        count: 0,\n        avg: 0\n    }\n];\n\nconst newData = result.map(resultItem => {\n    const { type } = resultItem;\n    const filteredData = filterMonth.filter(item => item.unit_type === type);\n    // node.warn(`filteredData`);\n    // node.warn(filteredData);\n    const total = filteredData.reduce((sum, item) => sum + moment.duration(moment(item.exit_time) - moment(item.entry_time)).asMinutes(), 0);\n    const count = filteredData.length;\n    // node.warn(`type:${type}`);\n    // node.warn(`total:${total}`);\n    // node.warn(`count:${count}`);\n    // node.warn(`===================================`);\n    const avg = count > 0 ? total / count : 0;\n\n    return {\n        type,\n        count,\n        avg\n    };\n});\n// node.warn(newData);\n//send data to modbus\nnewData.map((item) => {\n    if (item.type === 'N'){\n        sendSingleValue(Math.round(item.avg), 319);\n    } else if (item.type === 'B,C') {\n        sendSingleValue(Math.round(item.avg), 320);\n    } else if (item.type === 'R'){\n        sendSingleValue(Math.round(item.avg), 321);\n    }\n})\n\n\nfunction sendSingleValue(value, address) {\n    // node.warn(`value:${value}, address:${address}`)\n    const fc = 6;\n    const addresses = 1;     //Number of ADRRESS do want to write\n    let buf = Buffer.alloc(4);\n    buf.writeUInt16BE(value);\n    const values = [(buf[0] * 256 + buf[1]), (buf[2] * 256) + buf[3]];\n    msg.payload = { \"value\": values, 'fc': fc, 'unitid': 1, 'address': address, 'quantity': addresses };\n    node.send(msg);\n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 540,
        "wires": [
            [
                "fcdc520c470aed89"
            ]
        ]
    },
    {
        "id": "bf0573a8deede71f",
        "type": "comment",
        "z": "b1b087dc079885be",
        "name": "Working Time ",
        "info": "",
        "x": 210,
        "y": 580,
        "wires": []
    },
    {
        "id": "4cea9eac554fda6f",
        "type": "comment",
        "z": "b1b087dc079885be",
        "name": "Speed Set",
        "info": "",
        "x": 200,
        "y": 740,
        "wires": []
    },
    {
        "id": "bb67bd9bb1728f25",
        "type": "comment",
        "z": "b1b087dc079885be",
        "name": "MJ Production",
        "info": "",
        "x": 600,
        "y": 400,
        "wires": []
    },
    {
        "id": "9f622e1b7e1e9185",
        "type": "function",
        "z": "b1b087dc079885be",
        "name": "Query Data",
        "func": "const db = global.get(\"connetion_mongo\");\nconst collectionEnum = global.get(\"CollectionEnum\");\nconst zoneEnum = global.get('ZoneEnum');\nconst byPassEnum = global.get(\"ByPassEnum\");\nconst moment = global.get('moment_timezone');\n\ntry {\n    const result = await db.collection(collectionEnum.HISTORY_WORK_SCHEDULE).findOne({\n        date: moment().format('YYYY-MM-DD')\n    });    \n\n    // node.warn(result);\n    msg.payload = result;\n    return msg\n} catch (error) {\n    node.warn(error);\n};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 620,
        "wires": [
            [
                "acb1583bf8c75892"
            ]
        ]
    },
    {
        "id": "acb1583bf8c75892",
        "type": "function",
        "z": "b1b087dc079885be",
        "name": "Avg. Productive",
        "func": "const createIndexArray = global.get('createIndexArray');\nconst moment = global.get('moment_timezone');\nconst startOfToday = moment().startOf(\"day\");\nconst endOfToday = moment().endOf(\"day\");\nconst calculateTotalWorkMinutes = global.get('calculateTotalWorkMinutes');\n\nconst payload = msg.payload;\n// node.warn(payload);\n//Moring\nconst morningHourStart = payload?.schedule?.morning?.start?.hour;\nconst morningMinuteStart = payload?.schedule?.morning?.start?.minute;\nconst morningHourEnd = payload?.schedule?.morning?.end?.hour;\nconst morningMinuteEnd = payload?.schedule?.morning?.end?.minute;\n//Afternoon\nconst afternoonHourStart = payload?.schedule?.afternoon?.start?.hour;\nconst afternoonMinuteStart = payload?.schedule?.afternoon?.start?.minute;\nconst afternoonHourEnd = payload?.schedule?.afternoon?.end?.hour;\nconst afternoonMinuteEnd = payload?.schedule?.afternoon?.end?.minute;\n//Overtime\nconst overtimeHourStart = payload?.schedule?.overtime?.start?.hour;\nconst overtimeMinuteStart = payload?.schedule?.overtime?.start?.minute;\nconst overtimeHourEnd = payload?.schedule?.overtime?.end?.hour;\nconst overtimeMinuteEnd = payload?.schedule?.overtime?.end?.minute;\n\nconst workTimeMorning = diffTime(morningHourStart, morningMinuteStart, morningHourEnd, morningMinuteEnd);\nconst workTimeAfternoon = diffTime(afternoonHourStart, afternoonMinuteStart, afternoonHourEnd, afternoonMinuteEnd);\nconst workTimeOvertime = diffTime(overtimeHourStart, overtimeMinuteStart, overtimeHourEnd, overtimeMinuteEnd);\n\n// node.warn(`workTimeMorning + workTimeAfternoon:${workTimeMorning + workTimeAfternoon}`)\n// node.warn(`workTimeOvertime:${workTimeOvertime}`)\n//Send data to modbus\nsendSingleValue(workTimeMorning + workTimeAfternoon, 323);\nif (payload?.schedule?.overtime?.is_active){\n    sendSingleValue(workTimeOvertime, 324);\n} else {\n    sendSingleValue(0, 324);\n}\n\n\nfunction diffTime(startHoue, startMinute, endHoue, endMinute){\n    try {\n        // node.warn(`startHoue:${startHoue}`);\n        // node.warn(`startMinute:${startMinute}`);\n        // node.warn(`endHoue:${endHoue}`);\n        // node.warn(`endMinute:${endMinute}`);\n        const startTime = moment({ hour: startHoue, minute: startMinute });\n        const endTime = moment({ hour: endHoue, minute: endMinute });\n        const durationInMinutes = endTime.diff(startTime, 'minutes');\n        // node.warn(durationInMinutes);\n        return durationInMinutes;\n    } catch (error) {\n        console.error(error);\n        return 0;\n    };\n}\n\n\n\nfunction sendSingleValue(value, address) {\n    const fc = 6;\n    const addresses = 1;     //Number of ADRRESS do want to write\n    let buf = Buffer.alloc(4);\n    buf.writeUInt16BE(value);\n    const values = [(buf[0] * 256 + buf[1]), (buf[2] * 256) + buf[3]];\n    msg.payload = { \"value\": values, 'fc': fc, 'unitid': 1, 'address': address, 'quantity': addresses };\n    node.send(msg);\n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 620,
        "wires": [
            [
                "9142f20c80627493"
            ]
        ]
    },
    {
        "id": "28da8467cb7b1efd",
        "type": "function",
        "z": "b1b087dc079885be",
        "name": "To_UINT16",
        "func": "const count =4;   //Num of Read\nconst buf = Buffer.from(msg.payload.buffer);\n\nif(count >=1){\nconst value = buf.readUint16BE();\nmsg.value = value;\n//msg.value = value;\n}\nelse{\n    msg.value =0;\n}\n\nif(count >=2){\nconst value2 = buf.readUint16BE(2);\nmsg.value2 = value2;\n//msg.value2 = value2;\n}\nelse{\n    msg.value2 =0;\n}\n\nif(count >=3){\nconst value3 = buf.readUint16BE(4);\nmsg.value3 = value3;\n//msg.value3 = value3;\n}\nelse{\n    msg.value3 =0;\n}\n\n\nif(count >=4){\nconst value4 = buf.readUint16BE(6);\nmsg.value4 = value4;\n//msg.value4 = value4;\n}\nelse{\n    msg.value4 =0;\n}\n\nif(count >=5){\nconst value5 = buf.readUint16BE(8);\nmsg.value5 = value5;\n//msg.value5 = value5;\n}\nelse{\n    msg.value5 =0;\n}\n\n\nif(count >=6){\nconst value6 = buf.readUint16BE(10);\nmsg.value6 = value6;\n//msg.value6 = value6;\n}\nelse{\n    msg.value6 =0;\n}\n\n\n\n\n\n\n\n\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 1600,
        "wires": [
            [
                "41d7a8093a4ed771"
            ]
        ]
    },
    {
        "id": "337b24bf49029e99",
        "type": "inject",
        "z": "b1b087dc079885be",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 270,
        "y": 1600,
        "wires": [
            [
                "b94891f397f3269a"
            ]
        ]
    },
    {
        "id": "b94891f397f3269a",
        "type": "function",
        "z": "b1b087dc079885be",
        "name": "",
        "func": "var fc=3;\nvar sa=323;          //start address base0\nvar addresses=10;   //Number of word address\n\nmsg.payload={value: msg.payload, 'fc': fc, 'unitid': 1, 'address': sa , 'quantity': addresses };\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 1600,
        "wires": [
            [
                "198c3085b190132d"
            ]
        ]
    },
    {
        "id": "198c3085b190132d",
        "type": "modbus-flex-getter",
        "z": "b1b087dc079885be",
        "name": "",
        "showStatusActivities": false,
        "showErrors": false,
        "logIOActivities": false,
        "server": "51a1a8e59174b5dc",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "x": 620,
        "y": 1600,
        "wires": [
            [],
            [
                "28da8467cb7b1efd"
            ]
        ]
    },
    {
        "id": "41d7a8093a4ed771",
        "type": "function",
        "z": "b1b087dc079885be",
        "name": "",
        "func": "node.status({fill:\"blue\",shape:\"ring\",text:\"D1\" + \":\" + msg.value + \"  D2\" + \":\" + msg.value2 + \"  D3\" + \":\" + msg.value3 + \"  D4\" + \":\" + msg.value4 + \"  D5\" + \":\" + msg.value5 + \"  D6\" + \":\" + msg.value6});  \nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1040,
        "y": 1620,
        "wires": [
            []
        ]
    },
    {
        "id": "9142f20c80627493",
        "type": "modbus-flex-write",
        "z": "b1b087dc079885be",
        "name": "",
        "showStatusActivities": false,
        "showErrors": false,
        "showWarnings": true,
        "server": "51a1a8e59174b5dc",
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 850,
        "y": 620,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "c9e97f9fb175a2fd",
        "type": "function",
        "z": "b1b087dc079885be",
        "name": "Query Data",
        "func": "const db = global.get(\"connetion_mongo\");\nconst collectionEnum = global.get(\"CollectionEnum\");\nconst zoneEnum = global.get('ZoneEnum');\nconst byPassEnum = global.get(\"ByPassEnum\");\nconst moment = global.get('moment_timezone');\nconst yesterday = moment().subtract(1, \"days\").toDate();\ntry {\n    const query = {\n        exit_time: { $gte: yesterday }\n    }\n    const payload_zone1 = await db.collection(collectionEnum.ZONE1_PRODUCTION_DATA).find(query).toArray();\n    const payload = await db.collection(collectionEnum.PRODUCTION_DATA).find(query).toArray();\n    node.warn(payload);\n    \n    msg.production_data = payload;\n    msg.zone1_production_data = payload_zone1;\n    return msg\n} catch (error) {\n    node.warn(error);\n};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1570,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "056a4f048cc97d7e",
        "type": "function",
        "z": "b1b087dc079885be",
        "name": "Cap Unit/Day(Backup)",
        "func": "const fc = 6;\nconst addresses = 1;     //Number of ADRRESS do want to write\nlet buf = Buffer.alloc(4);\nconst createIndexArray = global.get('createIndexArray');\nconst zone1_production_data = msg.zone1_production_data;\nconst production_data = msg.production_data;\nconst moment = global.get('moment_timezone');\nconst startOfToday = moment().startOf(\"day\");\nconst endOfToday = moment().endOf(\"day\");\n\nlet sum = 0;\n\n// --------------- zone 1 ---------------//\nlet count_line_zone1 = new Array(2).fill(0);\nconst initIndex_zone1 = await createIndexArray(268, 269, 0);\nfor (const item of zone1_production_data) {\n    if (item.exit_time !== null) {\n        const exitTime = moment(item.exit_time);\n        if (exitTime.isBetween(startOfToday, endOfToday, null, \"[]\")) {\n            for (const indexItem of initIndex_zone1) {\n                if (item.lines.line_number === indexItem.index) {\n                    indexItem.value += 1;\n                    count_line_zone1[indexItem.index - 1] += 1;\n                }\n            }\n        }\n    }\n}\n\nfor (const index of initIndex_zone1) {\n    buf.writeInt16BE(index.value);\n    const values = [(buf[0] * 256 + buf[1]), (buf[2] * 256) + buf[3]];\n    msg.payload = { \"value\": values, 'fc': fc, 'unitid': 1, 'address': index.address, 'quantity': addresses };\n    node.send(msg);\n    sum += index.value;\n}\n// --------------- end zone 1 ---------------//\n\n// --------------- zone 2 - 7 ---------------//\nlet count_line2_7 = new Array(11).fill(0);\nconst initIndex = await createIndexArray(270, 275, 0);\nfor (const item of production_data) {\n    for (const zone of item.zones){\n        if (zone.exit_time !== null) {\n            const exitTime = moment(zone.exit_time);\n            if (exitTime.isBetween(startOfToday, endOfToday, null, \"[]\")) {\n                for (const indexItem of initIndex){\n                    if (zone.zone_number === indexItem.index + 1) {\n                        indexItem.value += 1;\n                        count_line2_7[indexItem.index - 1] += 1;\n                    }\n                }\n            }\n        }\n    }\n}\n// node.warn(initIndex);\nfor (const index of initIndex) {\n    buf.writeInt16BE(index.value);\n    const values = [(buf[0] * 256 + buf[1]), (buf[2] * 256) + buf[3]];\n    msg.payload = { \"value\": values, 'fc': fc, 'unitid': 1, 'address': index.address, 'quantity': addresses };\n    node.send(msg);\n    sum += index.value;\n}\n// --------------- end zone 2 - 7 ---------------//\n\n\n// --------------- zone 8 ---------------//\n// --------------- end zone 8 ---------------//\n// --------------- zone 9 - 12 ---------------//\n\n// --------------- end zone 9 - 12 ---------------//\n\n\nlet nonZeroCountZone1 = count_line_zone1.reduce((acc, value) => {\n    if (value !== 0) {\n        acc += 1;\n    }\n    return acc;\n}, 0);\n\nlet nonZeroCount_2_7 = count_line2_7.reduce((acc, value) => {\n    if (value !== 0) {\n        acc += 1;\n    }\n    return acc;\n}, 0);\nconst average = sum / (nonZeroCountZone1 + nonZeroCount_2_7);\nawait sendSummaryInStage(sum, 3151)\nasync function sendSummaryInStage(average, address) {\n    var fc = 16;\n    var sa = address;    //Modbus ADRRESS do want to write\n    var addresses = 2;     //Number of ADRRESS do want to write\n    var value = average;    //Value do want to command\n    var buf = Buffer.alloc(4);\n    buf.writeFloatBE(value);\n    var values = [(buf[0] * 256 + buf[1]), (buf[2] * 256) + buf[3]]\n    msg.payload = { \"value\": values, 'fc': fc, 'unitid': 1, 'address': sa, 'quantity': addresses };\n    node.status({ fill: \"blue\", shape: \"ring\", text: msg.topic + \":\" + value });\n    node.send(msg);\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2220,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "f903be7ba5cca940",
        "type": "function",
        "z": "b1b087dc079885be",
        "name": "Speed send",
        "func": "const db = global.get(\"connetion_mongo\");\nconst collectionEnum = global.get(\"CollectionEnum\");\nconst zoneEnum = global.get('ZoneEnum');\nconst byPassEnum = global.get(\"ByPassEnum\");\nconst moment = global.get('moment_timezone');\nconst speed = global.get('ZoneMoveTime');\n\n\nconst speedA = speed['zone2MoveTime'] !== 9999 ? speed['zone2MoveTime'] : 0;\nconst speedB = speed['zone3MoveTime'] !== 9999 ? speed['zone3MoveTime'] : 0;\nconst speedC = speed['zone9MoveTime'] !== 9999 ? speed['zone9MoveTime'] : 0;\n\n// node.warn(`speedA:${speedA}`);\n// node.warn(`speedB:${speedB}`);\n// node.warn(`speedC:${speedC}`);\n\n//Block/Minute\nsendSingleValue(speedA, 326);\nsendSingleValue(speedB, 328);\nsendSingleValue(speedC, 330);\n\n// sendSingleValue(speedA, 332);\n// sendSingleValue(speedB, 334);\n// sendSingleValue(speedC, 336);\n\n//Meter/Minute\n// sendSingleValue(speedA / 6.5, 332);\n// sendSingleValue(speedB / 6.5, 334);\n// sendSingleValue(speedC / 6.5, 336);\n\n\nfunction sendSingleValue(value, address) {\n    const fc = 16;\n    const addresses = 2;     //Number of ADRRESS do want to write\n    const buf = Buffer.alloc(4);\n    buf.writeFloatBE(value);\n    const values = [(buf[0] * 256 + buf[1]), (buf[2] * 256) + buf[3]]\n    msg.payload = { \"value\": values, 'fc': fc, 'unitid': 1, 'address': address, 'quantity': addresses };\n    node.send(msg);\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 780,
        "wires": [
            [
                "b09c4886c451c2f2"
            ]
        ]
    },
    {
        "id": "5d6536c48af18db0",
        "type": "function",
        "z": "b1b087dc079885be",
        "name": "To_Float32",
        "func": "const count =4;   //Num of Read\nconst buf = Buffer.from(msg.payload.buffer);\n\nif(count >=1){\nconst value = buf.readFloatBE();\nmsg.value = parseFloat(value.toFixed(4));\n//msg.value = value;\n}\nelse{\n    msg.value =0;\n}\n\nif(count >=2){\nconst value2 = buf.readFloatBE(4);\nmsg.value2 = parseFloat(value2.toFixed(4));\n//msg.value2 = value2;\n}\nelse{\n    msg.value2 =0;\n}\n\nif(count >=3){\nconst value3 = buf.readFloatBE(8);\nmsg.value3 = parseFloat(value3.toFixed(4));\n//msg.value3 = value3;\n}\nelse{\n    msg.value3 =0;\n}\n\n\nif(count >=4){\nconst value4 = buf.readFloatBE(12);\nmsg.value4 = parseFloat(value4.toFixed(4));\n//msg.value4 = value4;\n}\nelse{\n    msg.value4 =0;\n}\n\nif(count >=5){\nconst value5 = buf.readFloatBE(16);\nmsg.value5 = parseFloat(value5.toFixed(4));\n//msg.value5 = value5;\n}\nelse{\n    msg.value5 =0;\n}\n\n\nif(count >=6){\nconst value6 = buf.readFloatBE(20);\nmsg.value6 = parseFloat(value6.toFixed(4));\n//msg.value6 = value6;\n}\nelse{\n    msg.value6 =0;\n}\n\n\n\n\n\n\n\n\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 870,
        "y": 1520,
        "wires": [
            [
                "99dadb23dd5928bf"
            ]
        ]
    },
    {
        "id": "a726f3ffdc127e16",
        "type": "inject",
        "z": "b1b087dc079885be",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "3",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 270,
        "y": 1520,
        "wires": [
            [
                "64e7d91ad520ddef"
            ]
        ]
    },
    {
        "id": "64e7d91ad520ddef",
        "type": "function",
        "z": "b1b087dc079885be",
        "name": "",
        "func": "var fc=3;\nvar sa=326;          //start address base0\nvar addresses=12;   //Number of word address\n\nmsg.payload={value: msg.payload, 'fc': fc, 'unitid': 1, 'address': sa , 'quantity': addresses };\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 1520,
        "wires": [
            [
                "bcb8df1e4359bef4"
            ]
        ]
    },
    {
        "id": "bcb8df1e4359bef4",
        "type": "modbus-flex-getter",
        "z": "b1b087dc079885be",
        "name": "",
        "showStatusActivities": false,
        "showErrors": false,
        "showWarnings": true,
        "logIOActivities": false,
        "server": "51a1a8e59174b5dc",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 620,
        "y": 1520,
        "wires": [
            [],
            [
                "5d6536c48af18db0"
            ]
        ]
    },
    {
        "id": "99dadb23dd5928bf",
        "type": "function",
        "z": "b1b087dc079885be",
        "name": "",
        "func": "node.status({fill:\"blue\",shape:\"ring\",text:\"D1\" + \":\" + msg.value + \"  D2\" + \":\" + msg.value2 + \"  D3\" + \":\" + msg.value3 + \"  D4\" + \":\" + msg.value4 + \"  D5\" + \":\" + msg.value5 + \"  D6\" + \":\" + msg.value6});  \nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1060,
        "y": 1520,
        "wires": [
            []
        ]
    },
    {
        "id": "b09c4886c451c2f2",
        "type": "modbus-flex-write",
        "z": "b1b087dc079885be",
        "name": "",
        "showStatusActivities": false,
        "showErrors": false,
        "showWarnings": true,
        "server": "51a1a8e59174b5dc",
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 630,
        "y": 780,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "e255e08d448bece8",
        "type": "inject",
        "z": "b1b087dc079885be",
        "name": "Interval 5 seconds",
        "props": [
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "5",
        "crontab": "",
        "once": true,
        "onceDelay": "10",
        "topic": "",
        "x": 150,
        "y": 320,
        "wires": [
            []
        ]
    },
    {
        "id": "90f76cab3a40baca",
        "type": "inject",
        "z": "b1b087dc079885be",
        "name": "Interval 10 seconds",
        "props": [
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "10",
        "crontab": "",
        "once": true,
        "onceDelay": "10",
        "topic": "",
        "x": 140,
        "y": 140,
        "wires": [
            [
                "73f90e2eb48002e3",
                "e9a85bd778ae7df5",
                "2d75c73e436d9f23",
                "9f622e1b7e1e9185",
                "f903be7ba5cca940",
                "f2a3839a2beb50f5",
                "d5e96638ac255b22"
            ]
        ]
    },
    {
        "id": "2461f98db8d10d64",
        "type": "inject",
        "z": "b1b087dc079885be",
        "name": "Interval 5 seconds",
        "props": [
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "5",
        "crontab": "",
        "once": true,
        "onceDelay": "10",
        "topic": "",
        "x": 150,
        "y": 440,
        "wires": [
            []
        ]
    },
    {
        "id": "538f6afac58d82f9",
        "type": "inject",
        "z": "b1b087dc079885be",
        "name": "Interval 5 seconds",
        "props": [
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "5",
        "crontab": "",
        "once": true,
        "onceDelay": "10",
        "topic": "",
        "x": 150,
        "y": 620,
        "wires": [
            []
        ]
    },
    {
        "id": "c24ab2331814f6dc",
        "type": "inject",
        "z": "b1b087dc079885be",
        "name": "Interval 5 seconds",
        "props": [
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "5",
        "crontab": "",
        "once": true,
        "onceDelay": "10",
        "topic": "",
        "x": 150,
        "y": 780,
        "wires": [
            []
        ]
    },
    {
        "id": "d5e96638ac255b22",
        "type": "function",
        "z": "b1b087dc079885be",
        "name": "Query Data",
        "func": "const db = global.get(\"connetion_mongo\");\nconst collectionEnum = global.get(\"CollectionEnum\");\nconst zoneEnum = global.get('ZoneEnum');\nconst byPassEnum = global.get(\"ByPassEnum\");\nconst moment = global.get('moment_timezone');\n// const yesterday = moment().subtract(1, \"days\").toDate();\nconst today = moment().startOf('day').toDate();\ntry {\n    const query = {\n        $or: [\n            { is_active: true },\n            { exit_time: { $gt: today } }\n        ]\n    }\n    const payload_zone1 = await db.collection(collectionEnum.ZONE1_PRODUCTION_DATA).find(query).toArray();\n    const payload = await db.collection(collectionEnum.PRODUCTION_DATA).find(query).toArray();\n    // node.warn(payload);\n\n    msg.production_data = payload;\n    msg.zone1_production_data = payload_zone1;\n    return msg\n} catch (error) {\n    node.warn(error);\n};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 260,
        "wires": [
            [
                "4f0d66690199088e"
            ]
        ]
    },
    {
        "id": "ef748e9156efb28b",
        "type": "inject",
        "z": "b1b087dc079885be",
        "name": "Interval 12 hours",
        "props": [
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "43200",
        "crontab": "",
        "once": true,
        "onceDelay": "10",
        "topic": "",
        "x": 150,
        "y": 900,
        "wires": [
            [
                "8a065af03b50aacd"
            ]
        ]
    },
    {
        "id": "8a065af03b50aacd",
        "type": "function",
        "z": "b1b087dc079885be",
        "name": "Working day",
        "func": "const db = global.get(\"connetion_mongo\");\nconst collectionEnum = global.get(\"CollectionEnum\");\nconst zoneEnum = global.get('ZoneEnum');\nconst byPassEnum = global.get(\"ByPassEnum\");\nconst moment = global.get('moment_timezone');\nconst speed = global.get('ZoneMoveTime');\n\n\n\nconst currentYear = new Date().getFullYear();\nconst result = await db.collection(collectionEnum.HISTORY_WORK_SCHEDULE).find({\n    is_active: true,\n    created_at: {\n        $gte: new Date(`${currentYear}-01-01T00:00:00Z`),\n        $lt: new Date(`${currentYear + 1}-01-01T00:00:00Z`)\n    }\n}).sort({ _id: -1 }).limit(100).count();\n\n// node.warn(result)\nsendSingleValue(result, 348);\n\nfunction sendSingleValue(value, address) {\n    const fc = 6;\n    const addresses = 1;     //Number of ADRRESS do want to write\n    const buf = Buffer.alloc(4);\n    buf.writeFloatBE(value);\n    const values = [(buf[0] * 256 + buf[1]), (buf[2] * 256) + buf[3]]\n    msg.payload = { \"value\": values, 'fc': fc, 'unitid': 1, 'address': address, 'quantity': addresses };\n    node.send(msg);\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 900,
        "wires": [
            [
                "99efd0f1834ee73e"
            ]
        ]
    },
    {
        "id": "99efd0f1834ee73e",
        "type": "modbus-flex-write",
        "z": "b1b087dc079885be",
        "name": "",
        "showStatusActivities": false,
        "showErrors": false,
        "showWarnings": true,
        "server": "51a1a8e59174b5dc",
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 630,
        "y": 900,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "a346aaa85cfd1091",
        "type": "comment",
        "z": "b1b087dc079885be",
        "name": "Working day",
        "info": "",
        "x": 210,
        "y": 860,
        "wires": []
    },
    {
        "id": "459b74ed9c9e0478",
        "type": "debug",
        "z": "800bf15721c87a4b",
        "name": "INT1",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "value",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 910,
        "y": 360,
        "wires": []
    },
    {
        "id": "0243a5f31ca3c45b",
        "type": "function",
        "z": "800bf15721c87a4b",
        "name": "To_INT16",
        "func": "const count =4;   //Num of Read\nconst buf = Buffer.from(msg.payload.buffer);\n\nif(count >=1){\nconst value = buf.readInt16BE();\nmsg.value = value;\n//msg.value = value;\n}\nelse{\n    msg.value =0;\n}\n\nif(count >=2){\nconst value2 = buf.readInt16BE(2);\nmsg.value2 = value2;\n//msg.value2 = value2;\n}\nelse{\n    msg.value2 =0;\n}\n\nif(count >=3){\nconst value3 = buf.readInt16BE(4);\nmsg.value3 = value3;\n//msg.value3 = value3;\n}\nelse{\n    msg.value3 =0;\n}\n\n\nif(count >=4){\nconst value4 = buf.readInt16BE(6);\nmsg.value4 = value4;\n//msg.value4 = value4;\n}\nelse{\n    msg.value4 =0;\n}\n\nif(count >=5){\nconst value5 = buf.readInt16BE(8);\nmsg.value5 = value5;\n//msg.value5 = value5;\n}\nelse{\n    msg.value5 =0;\n}\n\n\nif(count >=6){\nconst value6 = buf.readInt16BE(10);\nmsg.value6 = value6;\n//msg.value6 = value6;\n}\nelse{\n    msg.value6 =0;\n}\n\n\n\n\n\n\n\n\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 360,
        "wires": [
            [
                "459b74ed9c9e0478",
                "559535a3f07d8b7a"
            ]
        ]
    },
    {
        "id": "e24703cd63b256bf",
        "type": "comment",
        "z": "800bf15721c87a4b",
        "name": "Edit Modbus IP",
        "info": "",
        "x": 500,
        "y": 320,
        "wires": []
    },
    {
        "id": "2a7959de75cc59fb",
        "type": "function",
        "z": "800bf15721c87a4b",
        "name": "To_Float32",
        "func": "const count =4;   //Num of Read\nconst buf = Buffer.from(msg.payload.buffer);\n\nif(count >=1){\nconst value = buf.readFloatBE();\nmsg.value = parseFloat(value.toFixed(4));\n//msg.value = value;\n}\nelse{\n    msg.value =0;\n}\n\nif(count >=2){\nconst value2 = buf.readFloatBE(4);\nmsg.value2 = parseFloat(value2.toFixed(4));\n//msg.value2 = value2;\n}\nelse{\n    msg.value2 =0;\n}\n\nif(count >=3){\nconst value3 = buf.readFloatBE(8);\nmsg.value3 = parseFloat(value3.toFixed(4));\n//msg.value3 = value3;\n}\nelse{\n    msg.value3 =0;\n}\n\n\nif(count >=4){\nconst value4 = buf.readFloatBE(12);\nmsg.value4 = parseFloat(value4.toFixed(4));\n//msg.value4 = value4;\n}\nelse{\n    msg.value4 =0;\n}\n\nif(count >=5){\nconst value5 = buf.readFloatBE(16);\nmsg.value5 = parseFloat(value5.toFixed(4));\n//msg.value5 = value5;\n}\nelse{\n    msg.value5 =0;\n}\n\n\nif(count >=6){\nconst value6 = buf.readFloatBE(20);\nmsg.value6 = parseFloat(value6.toFixed(4));\n//msg.value6 = value6;\n}\nelse{\n    msg.value6 =0;\n}\n\n\n\n\n\n\n\n\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 720,
        "wires": [
            [
                "a92aee22b021e94e"
            ]
        ]
    },
    {
        "id": "8da93c2f3eb4f8b0",
        "type": "inject",
        "z": "800bf15721c87a4b",
        "d": true,
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "3",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 360,
        "wires": [
            [
                "b11b3b5779fa3168"
            ]
        ]
    },
    {
        "id": "b11b3b5779fa3168",
        "type": "function",
        "z": "800bf15721c87a4b",
        "name": "",
        "func": "var fc=3;\nvar sa=0;          //start address base0\nvar addresses=4;   //Number of word address\n\nmsg.payload={value: msg.payload, 'fc': fc, 'unitid': 1, 'address': sa , 'quantity': addresses };\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 280,
        "y": 360,
        "wires": [
            [
                "22c10328cfd21ed4"
            ]
        ]
    },
    {
        "id": "d2656960b06ad06d",
        "type": "comment",
        "z": "800bf15721c87a4b",
        "name": "Edit Fnc.Address,length",
        "info": "",
        "x": 290,
        "y": 320,
        "wires": []
    },
    {
        "id": "22c10328cfd21ed4",
        "type": "modbus-flex-getter",
        "z": "800bf15721c87a4b",
        "name": "",
        "showStatusActivities": false,
        "showErrors": false,
        "logIOActivities": false,
        "server": "51a1a8e59174b5dc",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "x": 480,
        "y": 360,
        "wires": [
            [],
            [
                "0243a5f31ca3c45b"
            ]
        ]
    },
    {
        "id": "559535a3f07d8b7a",
        "type": "function",
        "z": "800bf15721c87a4b",
        "name": "",
        "func": "node.status({fill:\"blue\",shape:\"ring\",text:\"D1\" + \":\" + msg.value + \"  D2\" + \":\" + msg.value2 + \"  D3\" + \":\" + msg.value3 + \"  D4\" + \":\" + msg.value4 + \"  D5\" + \":\" + msg.value5 + \"  D6\" + \":\" + msg.value6});  \nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 840,
        "y": 420,
        "wires": [
            []
        ]
    },
    {
        "id": "cbb3d408c378b88d",
        "type": "function",
        "z": "800bf15721c87a4b",
        "name": "To_UINT16",
        "func": "const count =4;   //Num of Read\nconst buf = Buffer.from(msg.payload.buffer);\n\nif(count >=1){\nconst value = buf.readUint16BE();\nmsg.value = value;\n//msg.value = value;\n}\nelse{\n    msg.value =0;\n}\n\nif(count >=2){\nconst value2 = buf.readUint16BE(2);\nmsg.value2 = value2;\n//msg.value2 = value2;\n}\nelse{\n    msg.value2 =0;\n}\n\nif(count >=3){\nconst value3 = buf.readUint16BE(4);\nmsg.value3 = value3;\n//msg.value3 = value3;\n}\nelse{\n    msg.value3 =0;\n}\n\n\nif(count >=4){\nconst value4 = buf.readUint16BE(6);\nmsg.value4 = value4;\n//msg.value4 = value4;\n}\nelse{\n    msg.value4 =0;\n}\n\nif(count >=5){\nconst value5 = buf.readUint16BE(8);\nmsg.value5 = value5;\n//msg.value5 = value5;\n}\nelse{\n    msg.value5 =0;\n}\n\n\nif(count >=6){\nconst value6 = buf.readUint16BE(10);\nmsg.value6 = value6;\n//msg.value6 = value6;\n}\nelse{\n    msg.value6 =0;\n}\n\n\n\n\n\n\n\n\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 540,
        "wires": [
            [
                "7c0f396f772948de"
            ]
        ]
    },
    {
        "id": "d4f3a698ba655c6a",
        "type": "function",
        "z": "800bf15721c87a4b",
        "name": "To_UINT32",
        "func": "const count =1;   //Num of Read\nconst buf = Buffer.from(msg.payload.buffer);\n\nif(count >=1){\nconst value = buf.readUint32BE();\nmsg.value = value;\n//msg.value = value;\n}\nelse{\n    msg.value =0;\n}\n\nif(count >=2){\nconst value2 = buf.readUint32BE(4);\nmsg.value2 = value2;\n//msg.value2 = value2;\n}\nelse{\n    msg.value2 =0;\n}\n\nif(count >=3){\nconst value3 = buf.readUint32BE(8);\nmsg.value3 = value3;\n//msg.value3 = value3;\n}\nelse{\n    msg.value3 =0;\n}\n\n\nif(count >=4){\nconst value4 = buf.readUint32BE(12);\nmsg.value4 = value4;\n//msg.value4 = value4;\n}\nelse{\n    msg.value4 =0;\n}\n\nif(count >=5){\nconst value5 = buf.readUint32BE(16);\nmsg.value5 = value5;\n//msg.value5 = value5;\n}\nelse{\n    msg.value5 =0;\n}\n\n\nif(count >=6){\nconst value6 = buf.readUint32BE(20);\nmsg.value6 = value6;\n//msg.value6 = value6;\n}\nelse{\n    msg.value6 =0;\n}\n\n\n\n\n\n\n\n\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 920,
        "wires": [
            [
                "770d877753ce7286"
            ]
        ]
    },
    {
        "id": "a083bf1936c7c30b",
        "type": "inject",
        "z": "800bf15721c87a4b",
        "d": true,
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "3",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 540,
        "wires": [
            [
                "310490e2524f2946"
            ]
        ]
    },
    {
        "id": "310490e2524f2946",
        "type": "function",
        "z": "800bf15721c87a4b",
        "name": "",
        "func": "var fc=3;\nvar sa=4;          //start address base0\nvar addresses=4;   //Number of word address\n\nmsg.payload={value: msg.payload, 'fc': fc, 'unitid': 1, 'address': sa , 'quantity': addresses };\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 280,
        "y": 540,
        "wires": [
            [
                "4e9b21c3ea6c88bb"
            ]
        ]
    },
    {
        "id": "4e9b21c3ea6c88bb",
        "type": "modbus-flex-getter",
        "z": "800bf15721c87a4b",
        "name": "",
        "showStatusActivities": false,
        "showErrors": false,
        "logIOActivities": false,
        "server": "51a1a8e59174b5dc",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "x": 480,
        "y": 540,
        "wires": [
            [],
            [
                "cbb3d408c378b88d"
            ]
        ]
    },
    {
        "id": "022aa111b5a62d9a",
        "type": "comment",
        "z": "800bf15721c87a4b",
        "name": "Edit Fnc.Address,length",
        "info": "",
        "x": 250,
        "y": 480,
        "wires": []
    },
    {
        "id": "0253bc40af91ad8f",
        "type": "comment",
        "z": "800bf15721c87a4b",
        "name": "Edit Modbus IP",
        "info": "",
        "x": 483.75,
        "y": 493.75,
        "wires": []
    },
    {
        "id": "7c0f396f772948de",
        "type": "function",
        "z": "800bf15721c87a4b",
        "name": "",
        "func": "node.status({fill:\"blue\",shape:\"ring\",text:\"D1\" + \":\" + msg.value + \"  D2\" + \":\" + msg.value2 + \"  D3\" + \":\" + msg.value3 + \"  D4\" + \":\" + msg.value4 + \"  D5\" + \":\" + msg.value5 + \"  D6\" + \":\" + msg.value6});  \nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 900,
        "y": 560,
        "wires": [
            []
        ]
    },
    {
        "id": "a44e0caec3373945",
        "type": "inject",
        "z": "800bf15721c87a4b",
        "d": true,
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "3",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 110,
        "y": 720,
        "wires": [
            [
                "10c2651c1624350c"
            ]
        ]
    },
    {
        "id": "10c2651c1624350c",
        "type": "function",
        "z": "800bf15721c87a4b",
        "name": "",
        "func": "const fc = 3;\nconst sa = 621;          //start address base0\nconst addresses = 2;   //Number of word address\n\nmsg.payload={value: msg.payload, 'fc': fc, 'unitid': 1, 'address': sa , 'quantity': addresses };\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 260,
        "y": 720,
        "wires": [
            [
                "fd07e9c2c3598783"
            ]
        ]
    },
    {
        "id": "fd07e9c2c3598783",
        "type": "modbus-flex-getter",
        "z": "800bf15721c87a4b",
        "name": "",
        "showStatusActivities": false,
        "showErrors": false,
        "showWarnings": true,
        "logIOActivities": false,
        "server": "7ab982fca0f94f9e",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 460,
        "y": 720,
        "wires": [
            [],
            [
                "2a7959de75cc59fb"
            ]
        ]
    },
    {
        "id": "f42fdd32944e9e7f",
        "type": "comment",
        "z": "800bf15721c87a4b",
        "name": "Edit Fnc.Address,length",
        "info": "",
        "x": 230,
        "y": 660,
        "wires": []
    },
    {
        "id": "0e1671092cca0877",
        "type": "comment",
        "z": "800bf15721c87a4b",
        "name": "Edit Modbus IP",
        "info": "",
        "x": 463.75,
        "y": 673.75,
        "wires": []
    },
    {
        "id": "a92aee22b021e94e",
        "type": "function",
        "z": "800bf15721c87a4b",
        "name": "",
        "func": "node.status({fill:\"blue\",shape:\"ring\",text:\"D1\" + \":\" + msg.value + \"  D2\" + \":\" + msg.value2 + \"  D3\" + \":\" + msg.value3 + \"  D4\" + \":\" + msg.value4 + \"  D5\" + \":\" + msg.value5 + \"  D6\" + \":\" + msg.value6});  \nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 900,
        "y": 720,
        "wires": [
            []
        ]
    },
    {
        "id": "3240424690302f54",
        "type": "inject",
        "z": "800bf15721c87a4b",
        "d": true,
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "3",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 110,
        "y": 920,
        "wires": [
            [
                "6095e7e132c4f3ab"
            ]
        ]
    },
    {
        "id": "6095e7e132c4f3ab",
        "type": "function",
        "z": "800bf15721c87a4b",
        "name": "",
        "func": "var fc=3;\nvar sa=16;          //start address base0\nvar addresses=2;   //Number of word address\n\nmsg.payload={value: msg.payload, 'fc': fc, 'unitid': 1, 'address': sa , 'quantity': addresses };\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 260,
        "y": 920,
        "wires": [
            [
                "218d4336e4a8602d"
            ]
        ]
    },
    {
        "id": "218d4336e4a8602d",
        "type": "modbus-flex-getter",
        "z": "800bf15721c87a4b",
        "name": "",
        "showStatusActivities": false,
        "showErrors": false,
        "logIOActivities": false,
        "server": "51a1a8e59174b5dc",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "x": 460,
        "y": 920,
        "wires": [
            [],
            [
                "d4f3a698ba655c6a"
            ]
        ]
    },
    {
        "id": "3e6282941522d1cb",
        "type": "comment",
        "z": "800bf15721c87a4b",
        "name": "Edit Fnc.Address,length",
        "info": "",
        "x": 230,
        "y": 860,
        "wires": []
    },
    {
        "id": "3e1d0a88372e9c77",
        "type": "comment",
        "z": "800bf15721c87a4b",
        "name": "Edit Modbus IP",
        "info": "",
        "x": 463.75,
        "y": 873.75,
        "wires": []
    },
    {
        "id": "770d877753ce7286",
        "type": "function",
        "z": "800bf15721c87a4b",
        "name": "",
        "func": "node.status({fill:\"blue\",shape:\"ring\",text:\"D1\" + \":\" + msg.value + \"  D2\" + \":\" + msg.value2 + \"  D3\" + \":\" + msg.value3 + \"  D4\" + \":\" + msg.value4 + \"  D5\" + \":\" + msg.value5 + \"  D6\" + \":\" + msg.value6});  \nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 900,
        "y": 920,
        "wires": [
            []
        ]
    },
    {
        "id": "f5e1aa97d2828687",
        "type": "function",
        "z": "800bf15721c87a4b",
        "name": "To_INT32",
        "func": "const count =1;   //Num of Read\nconst buf = Buffer.from(msg.payload.buffer);\n\nif(count >=1){\nconst value = buf.readInt32BE();\nmsg.value = value;\n//msg.value = value;\n}\nelse{\n    msg.value =0;\n}\n\nif(count >=2){\nconst value2 = buf.readInt32BE(4);\nmsg.value2 = value2;\n//msg.value2 = value2;\n}\nelse{\n    msg.value2 =0;\n}\n\nif(count >=3){\nconst value3 = buf.readInt32BE(8);\nmsg.value3 = value3;\n//msg.value3 = value3;\n}\nelse{\n    msg.value3 =0;\n}\n\n\nif(count >=4){\nconst value4 = buf.readInt32BE(12);\nmsg.value4 = value4;\n//msg.value4 = value4;\n}\nelse{\n    msg.value4 =0;\n}\n\nif(count >=5){\nconst value5 = buf.readInt32BE(16);\nmsg.value5 = value5;\n//msg.value5 = value5;\n}\nelse{\n    msg.value5 =0;\n}\n\n\nif(count >=6){\nconst value6 = buf.readInt32BE(20);\nmsg.value6 = value6;\n//msg.value6 = value6;\n}\nelse{\n    msg.value6 =0;\n}\n\n\n\n\n\n\n\n\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 760,
        "y": 1100,
        "wires": [
            [
                "ac7e09e341da0436"
            ]
        ]
    },
    {
        "id": "edd13e293d5e2178",
        "type": "inject",
        "z": "800bf15721c87a4b",
        "d": true,
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "3",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 150,
        "y": 1100,
        "wires": [
            [
                "a78913bd74cbfa72"
            ]
        ]
    },
    {
        "id": "a78913bd74cbfa72",
        "type": "function",
        "z": "800bf15721c87a4b",
        "name": "",
        "func": "var fc=3;\nvar sa=18;          //start address base0\nvar addresses=2;   //Number of word address\n\nmsg.payload={value: msg.payload, 'fc': fc, 'unitid': 1, 'address': sa , 'quantity': addresses };\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 1100,
        "wires": [
            [
                "6e9dc1c3f18277af"
            ]
        ]
    },
    {
        "id": "6e9dc1c3f18277af",
        "type": "modbus-flex-getter",
        "z": "800bf15721c87a4b",
        "name": "",
        "showStatusActivities": false,
        "showErrors": false,
        "logIOActivities": false,
        "server": "51a1a8e59174b5dc",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "x": 500,
        "y": 1100,
        "wires": [
            [],
            [
                "f5e1aa97d2828687"
            ]
        ]
    },
    {
        "id": "e3273a42a60509de",
        "type": "comment",
        "z": "800bf15721c87a4b",
        "name": "Edit Fnc.Address,length",
        "info": "",
        "x": 270,
        "y": 1040,
        "wires": []
    },
    {
        "id": "14c40551db003115",
        "type": "comment",
        "z": "800bf15721c87a4b",
        "name": "Edit Modbus IP",
        "info": "",
        "x": 503.75,
        "y": 1053.75,
        "wires": []
    },
    {
        "id": "ac7e09e341da0436",
        "type": "function",
        "z": "800bf15721c87a4b",
        "name": "",
        "func": "node.status({fill:\"blue\",shape:\"ring\",text:\"D1\" + \":\" + msg.value + \"  D2\" + \":\" + msg.value2 + \"  D3\" + \":\" + msg.value3 + \"  D4\" + \":\" + msg.value4 + \"  D5\" + \":\" + msg.value5 + \"  D6\" + \":\" + msg.value6});  \nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 940,
        "y": 1100,
        "wires": [
            []
        ]
    },
    {
        "id": "26e614884b967298",
        "type": "comment",
        "z": "800bf15721c87a4b",
        "name": "MODBUS READ",
        "info": "",
        "x": 120,
        "y": 260,
        "wires": []
    },
    {
        "id": "41575ed473970f59",
        "type": "comment",
        "z": "800bf15721c87a4b",
        "name": "MODBUS WRITE",
        "info": "",
        "x": 130,
        "y": 1300,
        "wires": []
    },
    {
        "id": "e40afd55da1f177c",
        "type": "inject",
        "z": "800bf15721c87a4b",
        "name": "",
        "props": [
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 130,
        "y": 1420,
        "wires": [
            [
                "f045993987ce1957"
            ]
        ]
    },
    {
        "id": "f045993987ce1957",
        "type": "function",
        "z": "800bf15721c87a4b",
        "name": "Float Write",
        "func": "var fc=16;\nvar sa=16;    //Modbus ADRRESS do want to write\nvar addresses=2;     //Number of ADRRESS do want to write\nvar value=45000.78;    //Value do want to command\n\nvar buf=Buffer.alloc(4);\nbuf.writeFloatBE(value);\n//buf.writeFloatBE(16001.5);\nvar values=[(buf[0]*256+buf[1]),(buf[2]*256)+buf[3]]\nmsg.payload={\"value\":values , 'fc': fc, 'unitid': 1, 'address': sa , 'quantity': addresses };\n\nnode.status({fill:\"blue\",shape:\"ring\",text:msg.topic + \":\" + value}); \nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 1420,
        "wires": [
            [
                "2b07f934692119a3"
            ]
        ]
    },
    {
        "id": "2b07f934692119a3",
        "type": "modbus-flex-write",
        "z": "800bf15721c87a4b",
        "name": "",
        "showStatusActivities": false,
        "showErrors": false,
        "server": "51a1a8e59174b5dc",
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "x": 570,
        "y": 1420,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "11db2298368a4cd0",
        "type": "inject",
        "z": "800bf15721c87a4b",
        "name": "",
        "props": [
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 130,
        "y": 1520,
        "wires": [
            [
                "7876b112ef5af57e"
            ]
        ]
    },
    {
        "id": "7876b112ef5af57e",
        "type": "function",
        "z": "800bf15721c87a4b",
        "name": "Int16 Write",
        "func": "var fc=6;\nvar sa=28;    //Modbus ADRRESS do want to write\nvar addresses=1;     //Number of ADRRESS do want to write\nvar value=-1500;    //Value do want to command\nvar buf=Buffer.alloc(4);\nbuf.writeInt16BE(value);\n//buf.writeFloatBE(16001.5);\nvar values=[(buf[0]*256+buf[1]),(buf[2]*256)+buf[3]]\nmsg.payload={\"value\":values , 'fc': fc, 'unitid': 1, 'address': sa , 'quantity': addresses };\n\nnode.status({fill:\"blue\",shape:\"ring\",text:msg.topic + \":\" + value}); \nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 1520,
        "wires": [
            [
                "e64b1be9a35fe07c"
            ]
        ]
    },
    {
        "id": "e64b1be9a35fe07c",
        "type": "modbus-flex-write",
        "z": "800bf15721c87a4b",
        "name": "",
        "showStatusActivities": false,
        "showErrors": false,
        "server": "51a1a8e59174b5dc",
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "x": 570,
        "y": 1520,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "c04570c2080a95fc",
        "type": "comment",
        "z": "800bf15721c87a4b",
        "name": "Edit Fnc.Address,length",
        "info": "",
        "x": 350,
        "y": 1480,
        "wires": []
    },
    {
        "id": "9a8e7b1b30fe4a1a",
        "type": "comment",
        "z": "800bf15721c87a4b",
        "name": "Edit Modbus IP",
        "info": "",
        "x": 560,
        "y": 1480,
        "wires": []
    },
    {
        "id": "55785ceaf823e5a2",
        "type": "inject",
        "z": "800bf15721c87a4b",
        "name": "",
        "props": [
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 130,
        "y": 1620,
        "wires": [
            [
                "fb8ee9166245dc40"
            ]
        ]
    },
    {
        "id": "fb8ee9166245dc40",
        "type": "function",
        "z": "800bf15721c87a4b",
        "name": "UInt16 Write",
        "func": "var fc=6;\nvar sa=29;    //Modbus ADRRESS do want to write\nvar addresses=1;     //Number of ADRRESS do want to write\nvar value=40000;    //Value do want to command\nlet buf=Buffer.alloc(4);\nbuf.writeUInt16BE(value);\n//buf.writeFloatBE(16001.5);\nvar values=[(buf[0]*256+buf[1]),(buf[2]*256)+buf[3]]\nmsg.payload={\"value\":values , 'fc': fc, 'unitid': 1, 'address': sa , 'quantity': addresses };\n\nnode.status({fill:\"blue\",shape:\"ring\",text:msg.topic + \":\" + value}); \nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 1620,
        "wires": [
            [
                "37c47e2980fb45bf"
            ]
        ]
    },
    {
        "id": "37c47e2980fb45bf",
        "type": "modbus-flex-write",
        "z": "800bf15721c87a4b",
        "name": "",
        "showStatusActivities": false,
        "showErrors": false,
        "server": "51a1a8e59174b5dc",
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "x": 570,
        "y": 1620,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "b088f5ae6ea849eb",
        "type": "comment",
        "z": "800bf15721c87a4b",
        "name": "Edit Fnc.Address,length",
        "info": "",
        "x": 350,
        "y": 1580,
        "wires": []
    },
    {
        "id": "6c186eaf4cf12560",
        "type": "comment",
        "z": "800bf15721c87a4b",
        "name": "Edit Modbus IP",
        "info": "",
        "x": 560,
        "y": 1580,
        "wires": []
    },
    {
        "id": "8acb5709d6463e05",
        "type": "inject",
        "z": "800bf15721c87a4b",
        "name": "",
        "props": [
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 130,
        "y": 1740,
        "wires": [
            [
                "035f82dc9c95cd69"
            ]
        ]
    },
    {
        "id": "035f82dc9c95cd69",
        "type": "function",
        "z": "800bf15721c87a4b",
        "name": "UINT32 Write",
        "func": "var fc=16;\nvar sa=32;    //Modbus ADRRESS do want to write\nvar addresses=2;     //Number of ADRRESS do want to write\nvar value=2500000;    //Value do want to command\nbuf=Buffer.alloc(4);\nbuf.writeUInt32BE(value);\n//buf.writeFloatBE(16001.5);\nvar values=[(buf[0]*256+buf[1]),(buf[2]*256)+buf[3]]\nmsg.payload={\"value\":values , 'fc': fc, 'unitid': 1, 'address': sa , 'quantity': addresses };\n\nnode.status({fill:\"blue\",shape:\"ring\",text:msg.topic + \":\" + value}); \nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 1740,
        "wires": [
            [
                "3ca5ce92594f33e5"
            ]
        ]
    },
    {
        "id": "3ca5ce92594f33e5",
        "type": "modbus-flex-write",
        "z": "800bf15721c87a4b",
        "name": "",
        "showStatusActivities": false,
        "showErrors": false,
        "server": "51a1a8e59174b5dc",
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "x": 570,
        "y": 1740,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "f48538b153beadb6",
        "type": "inject",
        "z": "800bf15721c87a4b",
        "name": "",
        "props": [
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 130,
        "y": 1840,
        "wires": [
            [
                "75a37a7c61499ced"
            ]
        ]
    },
    {
        "id": "75a37a7c61499ced",
        "type": "function",
        "z": "800bf15721c87a4b",
        "name": "INT32 Write",
        "func": "var fc=16;\nvar sa=34;    //Modbus ADRRESS do want to write\nvar addresses=2;     //Number of ADRRESS do want to write\nvar value=212;    //Value do want to command\nlet buf=Buffer.alloc(4);\nbuf.writeInt32BE(value);\n//buf.writeFloatBE(16001.5);\nvar values=[(buf[0]*256+buf[1]),(buf[2]*256)+buf[3]]\nmsg.payload={\"value\":values , 'fc': fc, 'unitid': 1, 'address': sa , 'quantity': addresses };\n\nnode.status({fill:\"blue\",shape:\"ring\",text:msg.topic + \":\" + value}); \nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 1840,
        "wires": [
            [
                "0e83dc0f9120f8b0"
            ]
        ]
    },
    {
        "id": "0e83dc0f9120f8b0",
        "type": "modbus-flex-write",
        "z": "800bf15721c87a4b",
        "name": "",
        "showStatusActivities": false,
        "showErrors": false,
        "server": "51a1a8e59174b5dc",
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "x": 570,
        "y": 1840,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "3da7573e0202a56a",
        "type": "inject",
        "z": "800bf15721c87a4b",
        "name": "",
        "props": [
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 130,
        "y": 1960,
        "wires": [
            [
                "2a3fd99a4464f681"
            ]
        ]
    },
    {
        "id": "2a3fd99a4464f681",
        "type": "function",
        "z": "800bf15721c87a4b",
        "name": "Bool Write",
        "func": "var fc=6;\nvar sa=36;    //Modbus ADRRESS do want to write\nvar addresses=1;     //Number of ADRRESS do want to write\nvar value=0b1111100011111111;   //Value do want to command\n\n\nmsg.payload={\"value\":value , 'fc': fc, 'unitid': 1, 'address': sa , 'quantity': addresses };\n\nnode.status({fill:\"blue\",shape:\"ring\",text:msg.topic + \":\" + value}); \nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 1960,
        "wires": [
            [
                "68d648cb2be2115c",
                "8cac8f54b231db23"
            ]
        ]
    },
    {
        "id": "68d648cb2be2115c",
        "type": "modbus-flex-write",
        "z": "800bf15721c87a4b",
        "name": "",
        "showStatusActivities": false,
        "showErrors": false,
        "server": "51a1a8e59174b5dc",
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "x": 570,
        "y": 1960,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "88bab5986291c63f",
        "type": "comment",
        "z": "800bf15721c87a4b",
        "name": "Edit Fnc.Address,length",
        "info": "",
        "x": 350,
        "y": 1920,
        "wires": []
    },
    {
        "id": "cf89f59db8ab15cb",
        "type": "comment",
        "z": "800bf15721c87a4b",
        "name": "Edit Modbus IP",
        "info": "",
        "x": 560,
        "y": 1920,
        "wires": []
    },
    {
        "id": "8cac8f54b231db23",
        "type": "debug",
        "z": "800bf15721c87a4b",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 490,
        "y": 2060,
        "wires": []
    },
    {
        "id": "ca9a975f3fcb21fc",
        "type": "comment",
        "z": "800bf15721c87a4b",
        "name": "MODBUS Server",
        "info": "",
        "x": 180,
        "y": 2140,
        "wires": []
    },
    {
        "id": "419acc4abe8f130e",
        "type": "modbus-flex-server",
        "z": "800bf15721c87a4b",
        "d": true,
        "name": "",
        "logEnabled": false,
        "serverAddress": "127.0.0.1",
        "serverPort": 11502,
        "responseDelay": 100,
        "unitId": 1,
        "delayUnit": "ms",
        "coilsBufferSize": 20000,
        "registersBufferSize": 20000,
        "minAddress": 0,
        "splitAddress": 10000,
        "funcGetCoil": "function getFlexCoil(addr, unitID) {\n\tif (unitID === node.unitId && \n\t\taddr >= node.minAddress && \n\t\taddr <= node.splitAddress) { \n\n\t\treturn node.coils.readUInt8(addr * node.bufferFactor) \n\t}  \n}",
        "funcGetDiscreteInput": "function getFlexDiscreteInput(addr, unitID) {\n\taddr += node.splitAddress\n\tif (unitID === node.unitId && \n\t\taddr >= node.splitAddress && \n\t\taddr <= node.splitAddress * 2) { \n\n\t\treturn node.coils.readUInt8(addr * node.bufferFactor) \n\t}  \n}",
        "funcGetInputRegister": "function getFlexInputRegister(addr, unitID) { \n\tif (unitID === node.unitId && \n\t\taddr >= node.minAddress && \n\t\taddr <= node.splitAddress) { \n\n\t\treturn node.registers.readUInt16BE(addr * node.bufferFactor)  \n\t} \n}",
        "funcGetHoldingRegister": "function getFlexHoldingRegsiter(addr, unitID) { \n\taddr += node.splitAddress\n\tif (unitID === node.unitId && \n\t\taddr >= node.splitAddress && \n\t\taddr <= node.splitAddress * 2) { \n\n\t\treturn node.registers.readUInt16BE(addr * node.bufferFactor)  \n\t} \n}",
        "funcSetCoil": "function setFlexCoil(addr, value, unitID) { \n\tif (unitID === node.unitId && \n\t\taddr >= node.minAddress && \n\t\taddr <= node.splitAddress) { \n\n\t\tnode.coils.writeUInt8(value, addr * node.bufferFactor)  \n\t} \n}",
        "funcSetRegister": "function setFlexRegister(addr, value, unitID) { \n\taddr += node.splitAddress\n\tif (unitID === node.unitId && \n\t\taddr >= node.splitAddress && \n\t\taddr <= node.splitAddress * 2) { \n\n\t\tnode.registers.writeUInt16BE(value, addr * node.bufferFactor)  \n\t} \n}",
        "showErrors": false,
        "x": 340,
        "y": 2220,
        "wires": [
            [],
            [],
            [],
            [],
            []
        ]
    },
    {
        "id": "8c26e9cf0bfea6bb",
        "type": "function",
        "z": "800bf15721c87a4b",
        "name": "To_INT16",
        "func": "const count =10;   //Num of Read\nconst buf = Buffer.from(msg.payload.buffer);\n\nif(count >=1){\nconst value = buf.readInt16BE();\nmsg.value = value;\n//msg.value = value;\n}\nelse{\n    msg.value =0;\n}\n\nif(count >=2){\nconst value2 = buf.readInt16BE(2);\nmsg.value2 = value2;\n//msg.value2 = value2;\n}\nelse{\n    msg.value2 =0;\n}\n\nif(count >=3){\nconst value3 = buf.readInt16BE(4);\nmsg.value3 = value3;\n//msg.value3 = value3;\n}\nelse{\n    msg.value3 =0;\n}\n\n\nif(count >=4){\nconst value4 = buf.readInt16BE(6);\nmsg.value4 = value4;\n//msg.value4 = value4;\n}\nelse{\n    msg.value4 =0;\n}\n\nif(count >=5){\nconst value5 = buf.readInt16BE(8);\nmsg.value5 = value5;\n//msg.value5 = value5;\n}\nelse{\n    msg.value5 =0;\n}\n\n\nif(count >=6){\nconst value6 = buf.readInt16BE(10);\nmsg.value6 = value6;\n//msg.value6 = value6;\n}\nelse{\n    msg.value6 =0;\n}\n\nif (count >= 7) {\n    const value7 = buf.readInt16BE(10);\n    msg.value7 = value7;\n    //msg.value6 = value6;\n}\nelse {\n    msg.value7 = 0;\n}\n\nif (count >= 8) {\n    const value8 = buf.readInt16BE(10);\n    msg.value8 = value8;\n    //msg.value6 = value6;\n}\nelse {\n    msg.value8 = 0;\n}\n\n\n\nif (count >= 9) {\n    const value9 = buf.readInt16BE(10);\n    msg.value9 = value9;\n    //msg.value6 = value6;\n}\nelse {\n    msg.value9 = 0;\n}\n\n\n\nif (count >= 10) {\n    const value10 = buf.readInt16BE(10);\n    msg.value10 = value10;\n    //msg.value6 = value6;\n}\nelse {\n    msg.value10 = 0;\n}\n\n\n\nif (count >= 11) {\n    const value11 = buf.readInt16BE(10);\n    msg.value11 = value11;\n    //msg.value6 = value6;\n}\nelse {\n    msg.value11 = 0;\n}\n\n\nif (count >= 12) {\n    const value12 = buf.readInt16BE(10);\n    msg.value12 = value12;\n    //msg.value6 = value6;\n}\nelse {\n    msg.value12 = 0;\n}\n\n\nif (count >= 13) {\n    const value13 = buf.readInt16BE(10);\n    msg.value13 = value13;\n    //msg.value6 = value6;\n}\nelse {\n    msg.value13 = 0;\n}\n\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 760,
        "y": 2500,
        "wires": [
            [
                "43af9205c98603cf"
            ]
        ]
    },
    {
        "id": "3019afbe2c84313e",
        "type": "comment",
        "z": "800bf15721c87a4b",
        "name": "Edit Modbus IP",
        "info": "",
        "x": 540,
        "y": 2460,
        "wires": []
    },
    {
        "id": "41eb97f2b464ab43",
        "type": "inject",
        "z": "800bf15721c87a4b",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "3",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 170,
        "y": 2500,
        "wires": [
            [
                "eec883602bccee5e"
            ]
        ]
    },
    {
        "id": "eec883602bccee5e",
        "type": "function",
        "z": "800bf15721c87a4b",
        "name": "",
        "func": "var fc=3;\nvar sa=315;          //start address base0\nvar addresses=10;   //Number of word address\n\nmsg.payload={value: msg.payload, 'fc': fc, 'unitid': 1, 'address': sa , 'quantity': addresses };\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 2500,
        "wires": [
            [
                "44817bc1db41102c"
            ]
        ]
    },
    {
        "id": "68562ebfbcee4855",
        "type": "comment",
        "z": "800bf15721c87a4b",
        "name": "Edit Fnc.Address,length",
        "info": "",
        "x": 330,
        "y": 2460,
        "wires": []
    },
    {
        "id": "44817bc1db41102c",
        "type": "modbus-flex-getter",
        "z": "800bf15721c87a4b",
        "name": "",
        "showStatusActivities": false,
        "showErrors": false,
        "logIOActivities": false,
        "server": "51a1a8e59174b5dc",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "x": 520,
        "y": 2500,
        "wires": [
            [],
            [
                "8c26e9cf0bfea6bb"
            ]
        ]
    },
    {
        "id": "43af9205c98603cf",
        "type": "function",
        "z": "800bf15721c87a4b",
        "name": "",
        "func": "node.status({ fill: \"blue\", shape: \"ring\", text: \"D1\" + \":\" + msg.value + \"  D2\" + \":\" + msg.value2 + \"  D3\" + \":\" + msg.value3 + \"  D4\" + \":\" + msg.value4 + \"  D5\" + \":\" + msg.value5 + \"  D6\" + \":\" + msg.value6 + \"  D7\" + \":\" + msg.value7 + \"  D8\" + \":\" + msg.value8 + \"  D9\" + \":\" + msg.value9 + \"  D10\" + \":\" + msg.value10 + \"  D11\" + \":\" + msg.value11 + \"  D12\" + \":\" + msg.value12 + \"  D13\" + \":\" + msg.value13});  \nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 2360,
        "wires": [
            []
        ]
    },
    {
        "id": "06cbc23f48d7f14e",
        "type": "inject",
        "z": "800bf15721c87a4b",
        "name": "",
        "props": [
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 150,
        "y": 2660,
        "wires": [
            [
                "53bc04836e4452bb",
                "00d1c1ee783e2475",
                "3de523864c717f55",
                "ce18a5fa898fd4ea",
                "d086b52977bef6a4",
                "6c9cc4b19af3a906",
                "c2e58af031ae5f37",
                "88f847c4e09b0cf3"
            ]
        ]
    },
    {
        "id": "53bc04836e4452bb",
        "type": "function",
        "z": "800bf15721c87a4b",
        "name": "Int16 Write",
        "func": "var fc=6;\nvar sa=105;    //Modbus ADRRESS do want to write\nvar addresses=1;     //Number of ADRRESS do want to write\nvar value=1;    //Value do want to command\nvar buf=Buffer.alloc(4);\nbuf.writeInt16BE(value);\n//buf.writeFloatBE(16001.5);\nvar values=[(buf[0]*256+buf[1]),(buf[2]*256)+buf[3]]\n\nmsg.payload = { \"value\": values, 'fc': fc, 'unitid': 1, 'address': sa, 'quantity': addresses };    \n\n\nnode.status({fill:\"blue\",shape:\"ring\",text:msg.topic + \":\" + value}); \nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 2660,
        "wires": [
            [
                "6613e6fb82026753"
            ]
        ]
    },
    {
        "id": "6613e6fb82026753",
        "type": "modbus-flex-write",
        "z": "800bf15721c87a4b",
        "name": "",
        "showStatusActivities": false,
        "showErrors": false,
        "server": "51a1a8e59174b5dc",
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "x": 590,
        "y": 2660,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "00d1c1ee783e2475",
        "type": "function",
        "z": "800bf15721c87a4b",
        "name": "Int16 Write",
        "func": "var fc=6;\nvar sa=4002;    //Modbus ADRRESS do want to write\nvar addresses=1;     //Number of ADRRESS do want to write\nvar value=999;    //Value do want to command\nvar buf=Buffer.alloc(4);\nbuf.writeInt16BE(value);\n//buf.writeFloatBE(16001.5);\nvar values=[(buf[0]*256+buf[1]),(buf[2]*256)+buf[3]]\n\nmsg.payload = { \"value\": values, 'fc': fc, 'unitid': 1, 'address': sa, 'quantity': addresses };    \n\n\nnode.status({fill:\"blue\",shape:\"ring\",text:msg.topic + \":\" + value}); \nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 2700,
        "wires": [
            [
                "6613e6fb82026753"
            ]
        ]
    },
    {
        "id": "3de523864c717f55",
        "type": "function",
        "z": "800bf15721c87a4b",
        "name": "Int16 Write",
        "func": "var fc=6;\nvar sa=4004;    //Modbus ADRRESS do want to write\nvar addresses=1;     //Number of ADRRESS do want to write\nvar value=999;    //Value do want to command\nvar buf=Buffer.alloc(4);\nbuf.writeInt16BE(value);\n//buf.writeFloatBE(16001.5);\nvar values=[(buf[0]*256+buf[1]),(buf[2]*256)+buf[3]]\n\nmsg.payload = { \"value\": values, 'fc': fc, 'unitid': 1, 'address': sa, 'quantity': addresses };    \n\n\nnode.status({fill:\"blue\",shape:\"ring\",text:msg.topic + \":\" + value}); \nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 2740,
        "wires": [
            [
                "6613e6fb82026753"
            ]
        ]
    },
    {
        "id": "ce18a5fa898fd4ea",
        "type": "function",
        "z": "800bf15721c87a4b",
        "name": "Int16 Write",
        "func": "var fc=6;\nvar sa=4006;    //Modbus ADRRESS do want to write\nvar addresses=1;     //Number of ADRRESS do want to write\nvar value=999;    //Value do want to command\nvar buf=Buffer.alloc(4);\nbuf.writeInt16BE(value);\n//buf.writeFloatBE(16001.5);\nvar values=[(buf[0]*256+buf[1]),(buf[2]*256)+buf[3]]\n\nmsg.payload = { \"value\": values, 'fc': fc, 'unitid': 1, 'address': sa, 'quantity': addresses };    \n\n\nnode.status({fill:\"blue\",shape:\"ring\",text:msg.topic + \":\" + value}); \nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 2780,
        "wires": [
            [
                "6613e6fb82026753"
            ]
        ]
    },
    {
        "id": "d086b52977bef6a4",
        "type": "function",
        "z": "800bf15721c87a4b",
        "name": "Int16 Write",
        "func": "var fc=6;\nvar sa=4007;    //Modbus ADRRESS do want to write\nvar addresses=1;     //Number of ADRRESS do want to write\nvar value=999;    //Value do want to command\nvar buf=Buffer.alloc(4);\nbuf.writeInt16BE(value);\n//buf.writeFloatBE(16001.5);\nvar values=[(buf[0]*256+buf[1]),(buf[2]*256)+buf[3]]\n\nmsg.payload = { \"value\": values, 'fc': fc, 'unitid': 1, 'address': sa, 'quantity': addresses };    \n\n\nnode.status({fill:\"blue\",shape:\"ring\",text:msg.topic + \":\" + value}); \nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 2820,
        "wires": [
            [
                "6613e6fb82026753"
            ]
        ]
    },
    {
        "id": "6c9cc4b19af3a906",
        "type": "function",
        "z": "800bf15721c87a4b",
        "name": "Int16 Write",
        "func": "var fc=6;\nvar sa=4010;    //Modbus ADRRESS do want to write\nvar addresses=1;     //Number of ADRRESS do want to write\nvar value=999;    //Value do want to command\nvar buf=Buffer.alloc(4);\nbuf.writeInt16BE(value);\n//buf.writeFloatBE(16001.5);\nvar values=[(buf[0]*256+buf[1]),(buf[2]*256)+buf[3]]\n\nmsg.payload = { \"value\": values, 'fc': fc, 'unitid': 1, 'address': sa, 'quantity': addresses };    \n\n\nnode.status({fill:\"blue\",shape:\"ring\",text:msg.topic + \":\" + value}); \nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 2860,
        "wires": [
            [
                "6613e6fb82026753"
            ]
        ]
    },
    {
        "id": "c2e58af031ae5f37",
        "type": "function",
        "z": "800bf15721c87a4b",
        "name": "Int16 Write",
        "func": "var fc=6;\nvar sa=4011;    //Modbus ADRRESS do want to write\nvar addresses=1;     //Number of ADRRESS do want to write\nvar value=999;    //Value do want to command\nvar buf=Buffer.alloc(4);\nbuf.writeInt16BE(value);\n//buf.writeFloatBE(16001.5);\nvar values=[(buf[0]*256+buf[1]),(buf[2]*256)+buf[3]]\n\nmsg.payload = { \"value\": values, 'fc': fc, 'unitid': 1, 'address': sa, 'quantity': addresses };    \n\n\nnode.status({fill:\"blue\",shape:\"ring\",text:msg.topic + \":\" + value}); \nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 2900,
        "wires": [
            [
                "6613e6fb82026753"
            ]
        ]
    },
    {
        "id": "88f847c4e09b0cf3",
        "type": "function",
        "z": "800bf15721c87a4b",
        "name": "Int16 Write",
        "func": "var fc=6;\nvar sa=4012;    //Modbus ADRRESS do want to write\nvar addresses=1;     //Number of ADRRESS do want to write\nvar value=999;    //Value do want to command\nvar buf=Buffer.alloc(4);\nbuf.writeInt16BE(value);\n//buf.writeFloatBE(16001.5);\nvar values=[(buf[0]*256+buf[1]),(buf[2]*256)+buf[3]]\n\nmsg.payload = { \"value\": values, 'fc': fc, 'unitid': 1, 'address': sa, 'quantity': addresses };    \n\n\nnode.status({fill:\"blue\",shape:\"ring\",text:msg.topic + \":\" + value}); \nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 2940,
        "wires": [
            [
                "6613e6fb82026753"
            ]
        ]
    },
    {
        "id": "32b5e07839e046ac",
        "type": "inject",
        "z": "800bf15721c87a4b",
        "d": true,
        "name": "interval 1 sec",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 160,
        "y": 3040,
        "wires": [
            [
                "a8582c7f7baa7ff1"
            ]
        ]
    },
    {
        "id": "0862da68c111f145",
        "type": "function",
        "z": "800bf15721c87a4b",
        "name": "Address 4001",
        "func": "var fc=3;\nvar sa=4001;          //start address base0\nvar addresses=1;   //Number of word address\n\nmsg.payload={value: msg.payload, 'fc': fc, 'unitid': 1, 'address': sa , 'quantity': addresses };\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 3040,
        "wires": [
            [
                "4fb289e706509566"
            ]
        ]
    },
    {
        "id": "4fb289e706509566",
        "type": "modbus-flex-getter",
        "z": "800bf15721c87a4b",
        "name": "",
        "showStatusActivities": false,
        "showErrors": false,
        "logIOActivities": false,
        "server": "51a1a8e59174b5dc",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "x": 600,
        "y": 3040,
        "wires": [
            [],
            [
                "4326acbe6ce6c768"
            ]
        ]
    },
    {
        "id": "4326acbe6ce6c768",
        "type": "function",
        "z": "800bf15721c87a4b",
        "name": "Validate status",
        "func": "const buf = Buffer.from(msg.payload.buffer);\nconst value = buf.readInt16BE();\nconst lineEnum = global.get(\"LineEnum\");\nlet statusCounter = global.get(\"statusAddress4001\");\n// node.status({\n//     fill: \"blue\", shape: \"ring\", text: \"value\" + \":\" + value\n// });\n// if (statusCounter === undefined) {\n//     global.set(\"statusAddress4001\", 0);\n// }\n// if (value === 1) {\n//     statusCounter += 1;\n//     global.set(\"statusAddress4001\", statusCounter);\n// }\n\n// if (value === 0 && statusCounter > 5) {\n//     global.set(\"statusAddress4001\", 0);\n//     msg.payload.event = lineEnum.LINE_CEILING.value;\n//     return msg;\n// }\n// node.warn(statusCounter);\n// node.warn(value);\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 840,
        "y": 3040,
        "wires": [
            [
                "3611ca4877d60212"
            ]
        ]
    },
    {
        "id": "6eb447af7f828851",
        "type": "function",
        "z": "800bf15721c87a4b",
        "name": "Int16 Write",
        "func": "var fc=6;\nvar sa = 101;    //Modbus ADRRESS do want to write\nvar addresses=1;     //Number of ADRRESS do want to write\nvar value=1;    //Value do want to command\nvar buf=Buffer.alloc(4);\nbuf.writeInt16BE(value);\n//buf.writeFloatBE(16001.5);\nvar values=[(buf[0]*256+buf[1]),(buf[2]*256)+buf[3]]\n\nmsg.payload = { \"value\": values, 'fc': fc, 'unitid': 1, 'address': sa, 'quantity': addresses };    \n\n\nnode.status({fill:\"blue\",shape:\"ring\",text:msg.topic + \":\" + value}); \nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 2620,
        "wires": [
            [
                "6613e6fb82026753"
            ]
        ]
    },
    {
        "id": "f81174e532ed903f",
        "type": "inject",
        "z": "800bf15721c87a4b",
        "name": "",
        "props": [
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 150,
        "y": 2620,
        "wires": [
            [
                "6eb447af7f828851"
            ]
        ]
    },
    {
        "id": "3611ca4877d60212",
        "type": "debug",
        "z": "800bf15721c87a4b",
        "name": "debug 1",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1060,
        "y": 3040,
        "wires": []
    },
    {
        "id": "a8582c7f7baa7ff1",
        "type": "function",
        "z": "800bf15721c87a4b",
        "name": "Address 3097",
        "func": "var fc=3;\nvar sa=3097;          //start address base0\nvar addresses=1;   //Number of word address\n\nmsg.payload={value: msg.payload, 'fc': fc, 'unitid': 1, 'address': sa , 'quantity': addresses };\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 3120,
        "wires": [
            [
                "8ba389768dc2053e"
            ]
        ]
    },
    {
        "id": "8ba389768dc2053e",
        "type": "modbus-flex-getter",
        "z": "800bf15721c87a4b",
        "name": "",
        "showStatusActivities": false,
        "showErrors": false,
        "showWarnings": true,
        "logIOActivities": false,
        "server": "51a1a8e59174b5dc",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 580,
        "y": 3120,
        "wires": [
            [],
            [
                "853ea78d75ecb661"
            ]
        ]
    },
    {
        "id": "853ea78d75ecb661",
        "type": "function",
        "z": "800bf15721c87a4b",
        "name": "Validate status",
        "func": "const buf = Buffer.from(msg.payload.buffer);\nconst value = buf.readInt16BE();\nconst lineEnum = global.get(\"LineEnum\");\nconst statusAddressEnum = global.get('StatusAddressEnum');\nlet statusCounter = global.get(\"STATUS_ADDRESS_WEIGHT\");\nlet weight = global.get(\"WEIGHT\");\nnode.status({\n    fill: \"blue\", shape: \"ring\", text: \"value\" + \":\" + value\n});\nif (weight === undefined) {\n    global.set(\"WEIGHT\", 0);\n}\nif (statusCounter === undefined) {\n    global.set(\"STATUS_ADDRESS_WEIGHT\", 0);\n}\n\nif (value > 0){\n    global.set(\"WEIGHT\", value);\n    if (weight === value){\n\n        statusCounter += 1;\n        global.set(\"STATUS_ADDRESS_WEIGHT\", statusCounter);\n    }\n}\n\nif (value === 0 && statusCounter > 5) {\n    global.set(\"STATUS_ADDRESS_WEIGHT\", 0);\n    return msg;\n}\n\n// node.warn(statusCounter);\n// node.warn(value);\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 800,
        "y": 3120,
        "wires": [
            [
                "3611ca4877d60212"
            ]
        ]
    },
    {
        "id": "f314634464f66b3f",
        "type": "function",
        "z": "800bf15721c87a4b",
        "name": "To_Float32",
        "func": "const count =4;   //Num of Read\nconst buf = Buffer.from(msg.payload.buffer);\n\nif(count >=1){\nconst value = buf.readFloatBE();\nmsg.value = parseFloat(value.toFixed(4));\n//msg.value = value;\n}\nelse{\n    msg.value =0;\n}\n\nif(count >=2){\nconst value2 = buf.readFloatBE(4);\nmsg.value2 = parseFloat(value2.toFixed(4));\n//msg.value2 = value2;\n}\nelse{\n    msg.value2 =0;\n}\n\nif(count >=3){\nconst value3 = buf.readFloatBE(8);\nmsg.value3 = parseFloat(value3.toFixed(4));\n//msg.value3 = value3;\n}\nelse{\n    msg.value3 =0;\n}\n\n\nif(count >=4){\nconst value4 = buf.readFloatBE(12);\nmsg.value4 = parseFloat(value4.toFixed(4));\n//msg.value4 = value4;\n}\nelse{\n    msg.value4 =0;\n}\n\nif(count >=5){\nconst value5 = buf.readFloatBE(16);\nmsg.value5 = parseFloat(value5.toFixed(4));\n//msg.value5 = value5;\n}\nelse{\n    msg.value5 =0;\n}\n\n\nif(count >=6){\nconst value6 = buf.readFloatBE(20);\nmsg.value6 = parseFloat(value6.toFixed(4));\n//msg.value6 = value6;\n}\nelse{\n    msg.value6 =0;\n}\n\n\n\n\n\n\n\n\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 770,
        "y": 3360,
        "wires": [
            [
                "2efb763a2064af99"
            ]
        ]
    },
    {
        "id": "7be3b04371daf203",
        "type": "inject",
        "z": "800bf15721c87a4b",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "3",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 170,
        "y": 3360,
        "wires": [
            [
                "cc35378e2b22e1ae"
            ]
        ]
    },
    {
        "id": "cc35378e2b22e1ae",
        "type": "function",
        "z": "800bf15721c87a4b",
        "name": "",
        "func": "var fc=3;\nvar sa=600;          //start address base0\nvar addresses=8;   //Number of word address\n\nmsg.payload={value: msg.payload, 'fc': fc, 'unitid': 1, 'address': sa , 'quantity': addresses };\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 3360,
        "wires": [
            [
                "f9d381f2315dbd3c"
            ]
        ]
    },
    {
        "id": "f9d381f2315dbd3c",
        "type": "modbus-flex-getter",
        "z": "800bf15721c87a4b",
        "name": "",
        "showStatusActivities": false,
        "showErrors": false,
        "showWarnings": true,
        "logIOActivities": false,
        "server": "51a1a8e59174b5dc",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 520,
        "y": 3360,
        "wires": [
            [],
            [
                "f314634464f66b3f"
            ]
        ]
    },
    {
        "id": "2efb763a2064af99",
        "type": "function",
        "z": "800bf15721c87a4b",
        "name": "",
        "func": "node.status({fill:\"blue\",shape:\"ring\",text:\"D1\" + \":\" + msg.value + \"  D2\" + \":\" + msg.value2 + \"  D3\" + \":\" + msg.value3 + \"  D4\" + \":\" + msg.value4 + \"  D5\" + \":\" + msg.value5 + \"  D6\" + \":\" + msg.value6});  \nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 960,
        "y": 3360,
        "wires": [
            []
        ]
    },
    {
        "id": "83628b00ac15652b",
        "type": "inject",
        "z": "800bf15721c87a4b",
        "name": "",
        "props": [
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 150,
        "y": 3200,
        "wires": [
            [
                "58d9d747ee9dd719",
                "9240c74768153a40",
                "edb4748026d6f6de"
            ]
        ]
    },
    {
        "id": "58d9d747ee9dd719",
        "type": "function",
        "z": "800bf15721c87a4b",
        "name": "Float Write",
        "func": "var fc=16;\nvar sa=600;    //Modbus ADRRESS do want to write\nvar addresses=2;     //Number of ADRRESS do want to write\nvar value=600.66;    //Value do want to command\n\nvar buf=Buffer.alloc(4);\nbuf.writeFloatBE(value);\n//buf.writeFloatBE(16001.5);\nvar values=[(buf[0]*256+buf[1]),(buf[2]*256)+buf[3]]\nmsg.payload={\"value\":values , 'fc': fc, 'unitid': 1, 'address': sa , 'quantity': addresses };\n\nnode.status({fill:\"blue\",shape:\"ring\",text:msg.topic + \":\" + value}); \nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 3200,
        "wires": [
            [
                "1a2375c2c13f2be9"
            ]
        ]
    },
    {
        "id": "1a2375c2c13f2be9",
        "type": "modbus-flex-write",
        "z": "800bf15721c87a4b",
        "name": "",
        "showStatusActivities": false,
        "showErrors": false,
        "server": "51a1a8e59174b5dc",
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "x": 590,
        "y": 3200,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "9240c74768153a40",
        "type": "function",
        "z": "800bf15721c87a4b",
        "name": "Float Write",
        "func": "var fc=16;\nvar sa=602;    //Modbus ADRRESS do want to write\nvar addresses=2;     //Number of ADRRESS do want to write\nvar value=601.66;    //Value do want to command\n\nvar buf=Buffer.alloc(4);\nbuf.writeFloatBE(value);\n//buf.writeFloatBE(16001.5);\nvar values=[(buf[0]*256+buf[1]),(buf[2]*256)+buf[3]]\nmsg.payload={\"value\":values , 'fc': fc, 'unitid': 1, 'address': sa , 'quantity': addresses };\n\nnode.status({fill:\"blue\",shape:\"ring\",text:msg.topic + \":\" + value}); \nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 3240,
        "wires": [
            [
                "1a2375c2c13f2be9"
            ]
        ]
    },
    {
        "id": "edb4748026d6f6de",
        "type": "function",
        "z": "800bf15721c87a4b",
        "name": "Float Write",
        "func": "var fc=16;\nvar sa=604;    //Modbus ADRRESS do want to write\nvar addresses=2;     //Number of ADRRESS do want to write\nvar value=603.66;    //Value do want to command\n\nvar buf=Buffer.alloc(4);\nbuf.writeFloatBE(value);\n//buf.writeFloatBE(16001.5);\nvar values=[(buf[0]*256+buf[1]),(buf[2]*256)+buf[3]]\nmsg.payload={\"value\":values , 'fc': fc, 'unitid': 1, 'address': sa , 'quantity': addresses };\n\nnode.status({fill:\"blue\",shape:\"ring\",text:msg.topic + \":\" + value}); \nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 3280,
        "wires": [
            [
                "1a2375c2c13f2be9"
            ]
        ]
    },
    {
        "id": "1a5dfd890d35336b",
        "type": "modbus-read",
        "z": "800bf15721c87a4b",
        "d": true,
        "name": "",
        "topic": "",
        "showStatusActivities": false,
        "logIOActivities": false,
        "showErrors": false,
        "showWarnings": true,
        "unitid": "1",
        "dataType": "HoldingRegister",
        "adr": "620",
        "quantity": "2",
        "rate": "1",
        "rateUnit": "s",
        "delayOnStart": false,
        "startDelayTime": "",
        "server": "7ab982fca0f94f9e",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "x": 370,
        "y": 80,
        "wires": [
            [
                "1cd7c713d63de864"
            ],
            []
        ]
    },
    {
        "id": "1cd7c713d63de864",
        "type": "function",
        "z": "800bf15721c87a4b",
        "name": "Read mudbus float",
        "func": "var rawData = new ArrayBuffer(4);\nvar intView = new Uint16Array(rawData);\nvar fltView = new Float32Array(rawData);\n\nintView[0] = msg.payload[0]; //low\nintView[1] = msg.payload[1]; //high\n\nmsg.payload = parseFloat(fltView[0].toFixed(1));\n\n\nnode.status({ fill: \"blue\", shape: \"ring\", text: msg.topic + \":\" + msg.payload });\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 80,
        "wires": [
            [
                "30e015e3027db34a"
            ]
        ]
    },
    {
        "id": "30e015e3027db34a",
        "type": "function",
        "z": "800bf15721c87a4b",
        "name": "function 3",
        "func": "const logger = global.get('loggerInfo');\n//const buf = Buffer.from(msg.payload.buffer);//\nconst value = msg.payload;\nconst lineEnum = global.get(\"LineEnum\");\nconst statusAddressEnum = global.get('StatusAddressEnum');\nlet statusCounter = global.get(\"STATUS_ADDRESS_WEIGHT\");\nlet weight = global.get(\"WEIGHT\");\nnode.status({\n    fill: \"blue\", shape: \"ring\", text: \"value\" + \":\" + value + \"weight :\" + weight + \"statusCounter :\" + statusCounter\n});\nif (weight === undefined || isNaN(weight)) {\n    global.set(\"WEIGHT\", 0);\n}\nif (statusCounter === undefined || isNaN(statusCounter)) {\n    global.set(\"STATUS_ADDRESS_WEIGHT\", 0);\n}\n\nif (value > 0) {\n    if (statusCounter < 10) {\n        global.set(\"WEIGHT\", value);\n    }\n    if (weight < (value + 2) && weight > (value - 2)) {\n        statusCounter += 1;\n        global.set(\"STATUS_ADDRESS_WEIGHT\", statusCounter);\n    } else if (weight !== value && statusCounter < 10) {\n        global.set(\"STATUS_ADDRESS_WEIGHT\", 0);\n    }\n}\n\nif (value === 0 && statusCounter > 10) {\n    global.set(\"STATUS_ADDRESS_WEIGHT\", 0);\n    node.log(`STATUS_ADDRESS_WEIGHT is active.... | weight : ${weight}`);\n    logger(\"Sensor is active.... | weight : \" + weight, \"info\");\n    msg.payload = weight;\n    return msg;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 800,
        "y": 80,
        "wires": [
            []
        ]
    }
]